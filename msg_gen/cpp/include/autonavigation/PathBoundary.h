/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/PathBoundary.msg */
#ifndef AUTONAVIGATION_MESSAGE_PATHBOUNDARY_H
#define AUTONAVIGATION_MESSAGE_PATHBOUNDARY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct PathBoundary_ {
  typedef PathBoundary_<ContainerAllocator> Type;

  PathBoundary_()
  : BoundaryPointsx()
  , BoundaryPointsy()
  , Number(0)
  {
    BoundaryPointsx.assign(0);
    BoundaryPointsy.assign(0);
  }

  PathBoundary_(const ContainerAllocator& _alloc)
  : BoundaryPointsx()
  , BoundaryPointsy()
  , Number(0)
  {
    BoundaryPointsx.assign(0);
    BoundaryPointsy.assign(0);
  }

  typedef boost::array<int32_t, 50>  _BoundaryPointsx_type;
  boost::array<int32_t, 50>  BoundaryPointsx;

  typedef boost::array<int32_t, 50>  _BoundaryPointsy_type;
  boost::array<int32_t, 50>  BoundaryPointsy;

  typedef int32_t _Number_type;
  int32_t Number;


  typedef boost::shared_ptr< ::autonavigation::PathBoundary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::PathBoundary_<ContainerAllocator>  const> ConstPtr;
}; // struct PathBoundary
typedef  ::autonavigation::PathBoundary_<std::allocator<void> > PathBoundary;

typedef boost::shared_ptr< ::autonavigation::PathBoundary> PathBoundaryPtr;
typedef boost::shared_ptr< ::autonavigation::PathBoundary const> PathBoundaryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::PathBoundary_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::PathBoundary_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::PathBoundary_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::PathBoundary_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::PathBoundary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "de99878f80fecf87fd1d9e75205a7390";
  }

  static const char* value(const  ::autonavigation::PathBoundary_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xde99878f80fecf87ULL;
  static const uint64_t static_value2 = 0xfd1d9e75205a7390ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::PathBoundary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/PathBoundary";
  }

  static const char* value(const  ::autonavigation::PathBoundary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::PathBoundary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[50] BoundaryPointsx\n\
int32[50] BoundaryPointsy\n\
int32  Number\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::PathBoundary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::PathBoundary_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::PathBoundary_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.BoundaryPointsx);
    stream.next(m.BoundaryPointsy);
    stream.next(m.Number);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PathBoundary_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::PathBoundary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::PathBoundary_<ContainerAllocator> & v) 
  {
    s << indent << "BoundaryPointsx[]" << std::endl;
    for (size_t i = 0; i < v.BoundaryPointsx.size(); ++i)
    {
      s << indent << "  BoundaryPointsx[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.BoundaryPointsx[i]);
    }
    s << indent << "BoundaryPointsy[]" << std::endl;
    for (size_t i = 0; i < v.BoundaryPointsy.size(); ++i)
    {
      s << indent << "  BoundaryPointsy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.BoundaryPointsy[i]);
    }
    s << indent << "Number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Number);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_PATHBOUNDARY_H


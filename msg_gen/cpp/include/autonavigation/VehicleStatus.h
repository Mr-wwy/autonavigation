/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/VehicleStatus.msg */
#ifndef AUTONAVIGATION_MESSAGE_VEHICLESTATUS_H
#define AUTONAVIGATION_MESSAGE_VEHICLESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct VehicleStatus_ {
  typedef VehicleStatus_<ContainerAllocator> Type;

  VehicleStatus_()
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , longitude(0.0)
  , latitude(0.0)
  , gaussX(0)
  , gaussY(0)
  , height(0)
  , azimuth(0)
  , pitch(0)
  , roll(0)
  , northVelocity(0)
  , eastVelocity(0)
  , upVelocity(0)
  , travel_distance(0)
  , remain_time(0)
  , time_delay(0)
  , steer(0)
  , fuel(0)
  , shift(0)
  , voltage(0)
  , throttle(0)
  , brake(0)
  , engine_speed(0)
  , vehicle_speed(0)
  , water_temperature(0)
  , control_status(0)
  , error_status(0)
  , barometer1(0)
  , barometer2(0)
  , handbrake(0)
  , engine_status(0)
  , sts_mode(0)
  , controllable1(0)
  , enable(0)
  , reserve3(0)
  , reserve4(0)
  , reserve5(0)
  , reserve6(0)
  , reserve7(0)
  , md5_str()
  {
  }

  VehicleStatus_(const ContainerAllocator& _alloc)
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , longitude(0.0)
  , latitude(0.0)
  , gaussX(0)
  , gaussY(0)
  , height(0)
  , azimuth(0)
  , pitch(0)
  , roll(0)
  , northVelocity(0)
  , eastVelocity(0)
  , upVelocity(0)
  , travel_distance(0)
  , remain_time(0)
  , time_delay(0)
  , steer(0)
  , fuel(0)
  , shift(0)
  , voltage(0)
  , throttle(0)
  , brake(0)
  , engine_speed(0)
  , vehicle_speed(0)
  , water_temperature(0)
  , control_status(0)
  , error_status(0)
  , barometer1(0)
  , barometer2(0)
  , handbrake(0)
  , engine_status(0)
  , sts_mode(0)
  , controllable1(0)
  , enable(0)
  , reserve3(0)
  , reserve4(0)
  , reserve5(0)
  , reserve6(0)
  , reserve7(0)
  , md5_str(_alloc)
  {
  }

  typedef uint32_t _unique_key_type;
  uint32_t unique_key;

  typedef uint32_t _gps_week_type;
  uint32_t gps_week;

  typedef uint64_t _gps_millisecond_type;
  uint64_t gps_millisecond;

  typedef double _longitude_type;
  double longitude;

  typedef double _latitude_type;
  double latitude;

  typedef int64_t _gaussX_type;
  int64_t gaussX;

  typedef int64_t _gaussY_type;
  int64_t gaussY;

  typedef int32_t _height_type;
  int32_t height;

  typedef int32_t _azimuth_type;
  int32_t azimuth;

  typedef int32_t _pitch_type;
  int32_t pitch;

  typedef int32_t _roll_type;
  int32_t roll;

  typedef int32_t _northVelocity_type;
  int32_t northVelocity;

  typedef int32_t _eastVelocity_type;
  int32_t eastVelocity;

  typedef int32_t _upVelocity_type;
  int32_t upVelocity;

  typedef uint32_t _travel_distance_type;
  uint32_t travel_distance;

  typedef int32_t _remain_time_type;
  int32_t remain_time;

  typedef uint32_t _time_delay_type;
  uint32_t time_delay;

  typedef int16_t _steer_type;
  int16_t steer;

  typedef uint8_t _fuel_type;
  uint8_t fuel;

  typedef uint8_t _shift_type;
  uint8_t shift;

  typedef uint8_t _voltage_type;
  uint8_t voltage;

  typedef uint8_t _throttle_type;
  uint8_t throttle;

  typedef uint8_t _brake_type;
  uint8_t brake;

  typedef uint8_t _engine_speed_type;
  uint8_t engine_speed;

  typedef uint8_t _vehicle_speed_type;
  uint8_t vehicle_speed;

  typedef uint8_t _water_temperature_type;
  uint8_t water_temperature;

  typedef uint8_t _control_status_type;
  uint8_t control_status;

  typedef uint8_t _error_status_type;
  uint8_t error_status;

  typedef uint8_t _barometer1_type;
  uint8_t barometer1;

  typedef uint8_t _barometer2_type;
  uint8_t barometer2;

  typedef uint8_t _handbrake_type;
  uint8_t handbrake;

  typedef uint8_t _engine_status_type;
  uint8_t engine_status;

  typedef uint8_t _sts_mode_type;
  uint8_t sts_mode;

  typedef uint8_t _controllable1_type;
  uint8_t controllable1;

  typedef uint8_t _enable_type;
  uint8_t enable;

  typedef uint8_t _reserve3_type;
  uint8_t reserve3;

  typedef uint8_t _reserve4_type;
  uint8_t reserve4;

  typedef uint8_t _reserve5_type;
  uint8_t reserve5;

  typedef uint8_t _reserve6_type;
  uint8_t reserve6;

  typedef uint8_t _reserve7_type;
  uint8_t reserve7;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _md5_str_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  md5_str;


  typedef boost::shared_ptr< ::autonavigation::VehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VehicleStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct VehicleStatus
typedef  ::autonavigation::VehicleStatus_<std::allocator<void> > VehicleStatus;

typedef boost::shared_ptr< ::autonavigation::VehicleStatus> VehicleStatusPtr;
typedef boost::shared_ptr< ::autonavigation::VehicleStatus const> VehicleStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VehicleStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VehicleStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VehicleStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VehicleStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "91d7fe875bafc86f4b02d632ea4842cd";
  }

  static const char* value(const  ::autonavigation::VehicleStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x91d7fe875bafc86fULL;
  static const uint64_t static_value2 = 0x4b02d632ea4842cdULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VehicleStatus";
  }

  static const char* value(const  ::autonavigation::VehicleStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#对应结构体Autonavigation_Vehicle_Status\n\
\n\
uint32     unique_key           #自主行驶载车唯一标识\n\
uint32     gps_week             #GPS周\n\
uint64     gps_millisecond      #GPS毫秒,以周的零点开始的毫秒数\n\
float64    longitude            #经度，单位为度\n\
float64    latitude             #纬度，单位为度\n\
int64      gaussX               #高斯坐标X\n\
int64      gaussY               #高斯坐标Y\n\
int32      height               #距离海平面高度\n\
int32      azimuth              #航向角，单位0.01度，向东为0，逆时针0～36000\n\
int32      pitch                #俯仰角，欧拉角，单位0.01度\n\
int32      roll                 #翻滚角，欧拉角，单位0.01度\n\
int32      northVelocity        #北向速度，单位cm/s\n\
int32      eastVelocity         #东向速度，单位cm/s\n\
int32      upVelocity           #向上速度，单位cm/s\n\
uint32     travel_distance      #T0时刻开始后，前进的里程，单位米\n\
int32      remain_time          #距离T0时刻还有多少时间，单位毫秒\n\
uint32     time_delay           #网络延时，单位毫秒\n\
int16      steer                #单位0.01度，前轮转角，左转为正\n\
uint8      fuel                 #剩余油量，百分比\n\
uint8      shift                #档位\n\
uint8      voltage              #电压\n\
uint8      throttle             #当前使用油门量，百分比\n\
uint8      brake                #当前使用刹车量，百分比\n\
uint8      engine_speed         #单位100转/分钟，发动机转速\n\
uint8      vehicle_speed        #单位km/h，汽车时速\n\
uint8      water_temperature    #汽车水温\n\
uint8      control_status       #控制状态\n\
uint8      error_status         #错误状态\n\
uint8      barometer1           #单位0.1kpa\n\
uint8      barometer2           #单位0.1kpa\n\
uint8      handbrake            #手刹状态    0：手刹放开 1：手刹拉紧\n\
uint8      engine_status        #发动机点火状态  0：发动机熄火  1：发动机运行  \n\
uint8      sts_mode             #0-默认状态, 1-md5文件校验结果\n\
uint8      controllable1        #Bit8：方向盘 Bit7：油门 Bit6：刹车 Bit5：档位 Bit4：手刹 Bit3：点火 Bit2：熄火 Bit1：预留 相应位为1表示受方舱控制 \n\
uint8      enable               #能否进行自主 0：不能  1：能\n\
uint8      reserve3             #record_status\n\
uint8      reserve4 \n\
uint8      reserve5 \n\
uint8      reserve6 \n\
uint8      reserve7 \n\
uint8[]    md5_str              #md5文件校验值\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::VehicleStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.unique_key);
    stream.next(m.gps_week);
    stream.next(m.gps_millisecond);
    stream.next(m.longitude);
    stream.next(m.latitude);
    stream.next(m.gaussX);
    stream.next(m.gaussY);
    stream.next(m.height);
    stream.next(m.azimuth);
    stream.next(m.pitch);
    stream.next(m.roll);
    stream.next(m.northVelocity);
    stream.next(m.eastVelocity);
    stream.next(m.upVelocity);
    stream.next(m.travel_distance);
    stream.next(m.remain_time);
    stream.next(m.time_delay);
    stream.next(m.steer);
    stream.next(m.fuel);
    stream.next(m.shift);
    stream.next(m.voltage);
    stream.next(m.throttle);
    stream.next(m.brake);
    stream.next(m.engine_speed);
    stream.next(m.vehicle_speed);
    stream.next(m.water_temperature);
    stream.next(m.control_status);
    stream.next(m.error_status);
    stream.next(m.barometer1);
    stream.next(m.barometer2);
    stream.next(m.handbrake);
    stream.next(m.engine_status);
    stream.next(m.sts_mode);
    stream.next(m.controllable1);
    stream.next(m.enable);
    stream.next(m.reserve3);
    stream.next(m.reserve4);
    stream.next(m.reserve5);
    stream.next(m.reserve6);
    stream.next(m.reserve7);
    stream.next(m.md5_str);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VehicleStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VehicleStatus_<ContainerAllocator> & v) 
  {
    s << indent << "unique_key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.unique_key);
    s << indent << "gps_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "gaussX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gaussX);
    s << indent << "gaussY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gaussY);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "azimuth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.azimuth);
    s << indent << "pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roll);
    s << indent << "northVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.northVelocity);
    s << indent << "eastVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.eastVelocity);
    s << indent << "upVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.upVelocity);
    s << indent << "travel_distance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.travel_distance);
    s << indent << "remain_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remain_time);
    s << indent << "time_delay: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_delay);
    s << indent << "steer: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steer);
    s << indent << "fuel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fuel);
    s << indent << "shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shift);
    s << indent << "voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "throttle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "engine_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_speed);
    s << indent << "vehicle_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "water_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.water_temperature);
    s << indent << "control_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_status);
    s << indent << "error_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_status);
    s << indent << "barometer1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.barometer1);
    s << indent << "barometer2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.barometer2);
    s << indent << "handbrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handbrake);
    s << indent << "engine_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_status);
    s << indent << "sts_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sts_mode);
    s << indent << "controllable1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.controllable1);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "reserve3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve3);
    s << indent << "reserve4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve4);
    s << indent << "reserve5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve5);
    s << indent << "reserve6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve6);
    s << indent << "reserve7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve7);
    s << indent << "md5_str[]" << std::endl;
    for (size_t i = 0; i < v.md5_str.size(); ++i)
    {
      s << indent << "  md5_str[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.md5_str[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VEHICLESTATUS_H


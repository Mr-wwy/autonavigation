/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/VelodyneLine.msg */
#ifndef AUTONAVIGATION_MESSAGE_VELODYNELINE_H
#define AUTONAVIGATION_MESSAGE_VELODYNELINE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "autonavigation/VelodynePoint.h"

namespace autonavigation
{
template <class ContainerAllocator>
struct VelodyneLine_ {
  typedef VelodyneLine_<ContainerAllocator> Type;

  VelodyneLine_()
  : velodyneline()
  {
  }

  VelodyneLine_(const ContainerAllocator& _alloc)
  : velodyneline(_alloc)
  {
  }

  typedef std::vector< ::autonavigation::VelodynePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::VelodynePoint_<ContainerAllocator> >::other >  _velodyneline_type;
  std::vector< ::autonavigation::VelodynePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::VelodynePoint_<ContainerAllocator> >::other >  velodyneline;


  typedef boost::shared_ptr< ::autonavigation::VelodyneLine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VelodyneLine_<ContainerAllocator>  const> ConstPtr;
}; // struct VelodyneLine
typedef  ::autonavigation::VelodyneLine_<std::allocator<void> > VelodyneLine;

typedef boost::shared_ptr< ::autonavigation::VelodyneLine> VelodyneLinePtr;
typedef boost::shared_ptr< ::autonavigation::VelodyneLine const> VelodyneLineConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VelodyneLine_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VelodyneLine_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodyneLine_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodyneLine_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VelodyneLine_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7c8138d92dd21d98965a9487a7b04516";
  }

  static const char* value(const  ::autonavigation::VelodyneLine_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7c8138d92dd21d98ULL;
  static const uint64_t static_value2 = 0x965a9487a7b04516ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VelodyneLine_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VelodyneLine";
  }

  static const char* value(const  ::autonavigation::VelodyneLine_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VelodyneLine_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
VelodynePoint[] velodyneline\n\
\n\
================================================================================\n\
MSG: autonavigation/VelodynePoint\n\
# velodyne point \n\
\n\
int16  x             #cm\n\
int16  y            \n\
int16  z\n\
uint16  intensity     #0-255\n\
uint16  angleH        #0.01degree\n\
uint16  angleV        #0.01degree\n\
uint8   ring\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::VelodyneLine_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VelodyneLine_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velodyneline);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelodyneLine_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VelodyneLine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VelodyneLine_<ContainerAllocator> & v) 
  {
    s << indent << "velodyneline[]" << std::endl;
    for (size_t i = 0; i < v.velodyneline.size(); ++i)
    {
      s << indent << "  velodyneline[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autonavigation::VelodynePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.velodyneline[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VELODYNELINE_H


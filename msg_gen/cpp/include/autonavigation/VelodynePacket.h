/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/VelodynePacket.msg */
#ifndef AUTONAVIGATION_MESSAGE_VELODYNEPACKET_H
#define AUTONAVIGATION_MESSAGE_VELODYNEPACKET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct VelodynePacket_ {
  typedef VelodynePacket_<ContainerAllocator> Type;

  VelodynePacket_()
  : stamp()
  , data()
  {
    data.assign(0);
  }

  VelodynePacket_(const ContainerAllocator& _alloc)
  : stamp()
  , data()
  {
    data.assign(0);
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef boost::array<uint8_t, 1206>  _data_type;
  boost::array<uint8_t, 1206>  data;


  typedef boost::shared_ptr< ::autonavigation::VelodynePacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VelodynePacket_<ContainerAllocator>  const> ConstPtr;
}; // struct VelodynePacket
typedef  ::autonavigation::VelodynePacket_<std::allocator<void> > VelodynePacket;

typedef boost::shared_ptr< ::autonavigation::VelodynePacket> VelodynePacketPtr;
typedef boost::shared_ptr< ::autonavigation::VelodynePacket const> VelodynePacketConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VelodynePacket_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VelodynePacket_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodynePacket_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodynePacket_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VelodynePacket_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae4f90a23256f44e82baa08dd45c3456";
  }

  static const char* value(const  ::autonavigation::VelodynePacket_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae4f90a23256f44eULL;
  static const uint64_t static_value2 = 0x82baa08dd45c3456ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VelodynePacket_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VelodynePacket";
  }

  static const char* value(const  ::autonavigation::VelodynePacket_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VelodynePacket_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Raw Velodyne LIDAR packet.\n\
\n\
time stamp              # packet timestamp\n\
uint8[1206] data        # packet contents\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::VelodynePacket_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::VelodynePacket_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VelodynePacket_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelodynePacket_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VelodynePacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VelodynePacket_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VELODYNEPACKET_H


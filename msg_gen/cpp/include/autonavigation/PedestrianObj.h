/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/PedestrianObj.msg */
#ifndef AUTONAVIGATION_MESSAGE_PEDESTRIANOBJ_H
#define AUTONAVIGATION_MESSAGE_PEDESTRIANOBJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct PedestrianObj_ {
  typedef PedestrianObj_<ContainerAllocator> Type;

  PedestrianObj_()
  : ID(0)
  , centerX(0)
  , centerY(0)
  , radius(0)
  , speed(0)
  , direction(0)
  , height(0)
  {
  }

  PedestrianObj_(const ContainerAllocator& _alloc)
  : ID(0)
  , centerX(0)
  , centerY(0)
  , radius(0)
  , speed(0)
  , direction(0)
  , height(0)
  {
  }

  typedef int32_t _ID_type;
  int32_t ID;

  typedef int32_t _centerX_type;
  int32_t centerX;

  typedef int32_t _centerY_type;
  int32_t centerY;

  typedef int32_t _radius_type;
  int32_t radius;

  typedef int32_t _speed_type;
  int32_t speed;

  typedef int32_t _direction_type;
  int32_t direction;

  typedef int32_t _height_type;
  int32_t height;


  typedef boost::shared_ptr< ::autonavigation::PedestrianObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::PedestrianObj_<ContainerAllocator>  const> ConstPtr;
}; // struct PedestrianObj
typedef  ::autonavigation::PedestrianObj_<std::allocator<void> > PedestrianObj;

typedef boost::shared_ptr< ::autonavigation::PedestrianObj> PedestrianObjPtr;
typedef boost::shared_ptr< ::autonavigation::PedestrianObj const> PedestrianObjConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::PedestrianObj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::PedestrianObj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::PedestrianObj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::PedestrianObj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::PedestrianObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "65929af4c024bcd268e1861cd3907563";
  }

  static const char* value(const  ::autonavigation::PedestrianObj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x65929af4c024bcd2ULL;
  static const uint64_t static_value2 = 0x68e1861cd3907563ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::PedestrianObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/PedestrianObj";
  }

  static const char* value(const  ::autonavigation::PedestrianObj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::PedestrianObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#ID num\n\
int32 ID       \n\
# position, cm\n\
int32 centerX         \n\
int32 centerY\n\
#radius\n\
int32 radius\n\
# cm/s\n\
int32 speed        \n\
# 0.01degree , 0-36000 \n\
int32 direction  \n\
int32 height\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::PedestrianObj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::PedestrianObj_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::PedestrianObj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
    stream.next(m.centerX);
    stream.next(m.centerY);
    stream.next(m.radius);
    stream.next(m.speed);
    stream.next(m.direction);
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PedestrianObj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::PedestrianObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::PedestrianObj_<ContainerAllocator> & v) 
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "centerX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.centerX);
    s << indent << "centerY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.centerY);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_PEDESTRIANOBJ_H


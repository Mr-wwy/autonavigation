/* Auto-generated by genmsg_cpp for file /home/abc/ros_autonavigation_ws/src/autonavigation/msg/MissionManage.msg */
#ifndef AUTONAVIGATION_MESSAGE_MISSIONMANAGE_H
#define AUTONAVIGATION_MESSAGE_MISSIONMANAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct MissionManage_ {
  typedef MissionManage_<ContainerAllocator> Type;

  MissionManage_()
  : current_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , reserve1(0)
  , reserve2(0)
  , reserve3(0)
  , reserve4(0)
  , reserve5(0)
  , reserve6(0)
  , reserve7(0)
  , reserve8(0)
  {
  }

  MissionManage_(const ContainerAllocator& _alloc)
  : current_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , reserve1(0)
  , reserve2(0)
  , reserve3(0)
  , reserve4(0)
  , reserve5(0)
  , reserve6(0)
  , reserve7(0)
  , reserve8(0)
  {
  }

  typedef uint32_t _current_key_type;
  uint32_t current_key;

  typedef uint32_t _gps_week_type;
  uint32_t gps_week;

  typedef uint64_t _gps_millisecond_type;
  uint64_t gps_millisecond;

  typedef uint8_t _reserve1_type;
  uint8_t reserve1;

  typedef uint8_t _reserve2_type;
  uint8_t reserve2;

  typedef uint8_t _reserve3_type;
  uint8_t reserve3;

  typedef uint8_t _reserve4_type;
  uint8_t reserve4;

  typedef uint8_t _reserve5_type;
  uint8_t reserve5;

  typedef uint8_t _reserve6_type;
  uint8_t reserve6;

  typedef uint8_t _reserve7_type;
  uint8_t reserve7;

  typedef uint8_t _reserve8_type;
  uint8_t reserve8;


  typedef boost::shared_ptr< ::autonavigation::MissionManage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::MissionManage_<ContainerAllocator>  const> ConstPtr;
}; // struct MissionManage
typedef  ::autonavigation::MissionManage_<std::allocator<void> > MissionManage;

typedef boost::shared_ptr< ::autonavigation::MissionManage> MissionManagePtr;
typedef boost::shared_ptr< ::autonavigation::MissionManage const> MissionManageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::MissionManage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::MissionManage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::MissionManage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::MissionManage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::MissionManage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6b03ffe4a0683b6ce7c6780ec3601c5";
  }

  static const char* value(const  ::autonavigation::MissionManage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe6b03ffe4a0683b6ULL;
  static const uint64_t static_value2 = 0xce7c6780ec3601c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::MissionManage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/MissionManage";
  }

  static const char* value(const  ::autonavigation::MissionManage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::MissionManage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32       current_key        #当前使用和显示载车的id\n\
uint32       gps_week           #GPS周，时间零点为1980年1月6日零点，每1024周为一个循环周期\n\
uint64       gps_millisecond    #GPS毫秒，以周的零点开始的毫秒数\n\
uint8        reserve1           #预留\n\
uint8        reserve2\n\
uint8        reserve3\n\
uint8        reserve4\n\
uint8        reserve5\n\
uint8        reserve6\n\
uint8        reserve7\n\
uint8        reserve8\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::MissionManage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::MissionManage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::MissionManage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_key);
    stream.next(m.gps_week);
    stream.next(m.gps_millisecond);
    stream.next(m.reserve1);
    stream.next(m.reserve2);
    stream.next(m.reserve3);
    stream.next(m.reserve4);
    stream.next(m.reserve5);
    stream.next(m.reserve6);
    stream.next(m.reserve7);
    stream.next(m.reserve8);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MissionManage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::MissionManage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::MissionManage_<ContainerAllocator> & v) 
  {
    s << indent << "current_key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.current_key);
    s << indent << "gps_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "reserve1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve1);
    s << indent << "reserve2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve2);
    s << indent << "reserve3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve3);
    s << indent << "reserve4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve4);
    s << indent << "reserve5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve5);
    s << indent << "reserve6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve6);
    s << indent << "reserve7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve7);
    s << indent << "reserve8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve8);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_MISSIONMANAGE_H


/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/VehicleObj.msg */
#ifndef AUTONAVIGATION_MESSAGE_VEHICLEOBJ_H
#define AUTONAVIGATION_MESSAGE_VEHICLEOBJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Polygon.h"

namespace autonavigation
{
template <class ContainerAllocator>
struct VehicleObj_ {
  typedef VehicleObj_<ContainerAllocator> Type;

  VehicleObj_()
  : ID(0)
  , centerX(0)
  , centerY(0)
  , speed(0)
  , speedDirection(0)
  , height(0)
  , vehclass(0)
  , vehPolygon()
  , vertexNumber(0)
  , vertexX()
  , vertexY()
  {
  }

  VehicleObj_(const ContainerAllocator& _alloc)
  : ID(0)
  , centerX(0)
  , centerY(0)
  , speed(0)
  , speedDirection(0)
  , height(0)
  , vehclass(0)
  , vehPolygon(_alloc)
  , vertexNumber(0)
  , vertexX(_alloc)
  , vertexY(_alloc)
  {
  }

  typedef int32_t _ID_type;
  int32_t ID;

  typedef int32_t _centerX_type;
  int32_t centerX;

  typedef int32_t _centerY_type;
  int32_t centerY;

  typedef int32_t _speed_type;
  int32_t speed;

  typedef int32_t _speedDirection_type;
  int32_t speedDirection;

  typedef int32_t _height_type;
  int32_t height;

  typedef int32_t _vehclass_type;
  int32_t vehclass;

  typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _vehPolygon_type;
   ::geometry_msgs::Polygon_<ContainerAllocator>  vehPolygon;

  typedef int32_t _vertexNumber_type;
  int32_t vertexNumber;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _vertexX_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  vertexX;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _vertexY_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  vertexY;


  typedef boost::shared_ptr< ::autonavigation::VehicleObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VehicleObj_<ContainerAllocator>  const> ConstPtr;
}; // struct VehicleObj
typedef  ::autonavigation::VehicleObj_<std::allocator<void> > VehicleObj;

typedef boost::shared_ptr< ::autonavigation::VehicleObj> VehicleObjPtr;
typedef boost::shared_ptr< ::autonavigation::VehicleObj const> VehicleObjConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VehicleObj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VehicleObj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VehicleObj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VehicleObj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VehicleObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e49aa5a1ea7ecd453e5d85d1f462a10f";
  }

  static const char* value(const  ::autonavigation::VehicleObj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe49aa5a1ea7ecd45ULL;
  static const uint64_t static_value2 = 0x3e5d85d1f462a10fULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VehicleObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VehicleObj";
  }

  static const char* value(const  ::autonavigation::VehicleObj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VehicleObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#ID num\n\
int32 ID       \n\
# position, cm\n\
int32 centerX\n\
int32 centerY\n\
# cm/s\n\
int32 speed        \n\
# 0.01degree   \n\
int32 speedDirection  \n\
int32 height         \n\
# car, truck, bicycle, big obj, small obj, unknown obj \n\
int32 vehclass     \n\
\n\
geometry_msgs/Polygon vehPolygon      \n\
\n\
int32   vertexNumber\n\
int32[] vertexX\n\
int32[] vertexY\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::autonavigation::VehicleObj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VehicleObj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
    stream.next(m.centerX);
    stream.next(m.centerY);
    stream.next(m.speed);
    stream.next(m.speedDirection);
    stream.next(m.height);
    stream.next(m.vehclass);
    stream.next(m.vehPolygon);
    stream.next(m.vertexNumber);
    stream.next(m.vertexX);
    stream.next(m.vertexY);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VehicleObj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VehicleObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VehicleObj_<ContainerAllocator> & v) 
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "centerX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.centerX);
    s << indent << "centerY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.centerY);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "speedDirection: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speedDirection);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "vehclass: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vehclass);
    s << indent << "vehPolygon: ";
s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.vehPolygon);
    s << indent << "vertexNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vertexNumber);
    s << indent << "vertexX[]" << std::endl;
    for (size_t i = 0; i < v.vertexX.size(); ++i)
    {
      s << indent << "  vertexX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.vertexX[i]);
    }
    s << indent << "vertexY[]" << std::endl;
    for (size_t i = 0; i < v.vertexY.size(); ++i)
    {
      s << indent << "  vertexY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.vertexY[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VEHICLEOBJ_H


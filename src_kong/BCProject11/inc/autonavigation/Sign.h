/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/Sign.msg */
#ifndef AUTONAVIGATION_MESSAGE_SIGN_H
#define AUTONAVIGATION_MESSAGE_SIGN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct Sign_ {
  typedef Sign_<ContainerAllocator> Type;

  Sign_()
  : pos_flag(0)
  , x(0)
  , y(0)
  , sign_type(0)
  {
  }

  Sign_(const ContainerAllocator& _alloc)
  : pos_flag(0)
  , x(0)
  , y(0)
  , sign_type(0)
  {
  }

  typedef uint8_t _pos_flag_type;
  uint8_t pos_flag;

  typedef int32_t _x_type;
  int32_t x;

  typedef int32_t _y_type;
  int32_t y;

  typedef uint8_t _sign_type_type;
  uint8_t sign_type;


  typedef boost::shared_ptr< ::autonavigation::Sign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::Sign_<ContainerAllocator>  const> ConstPtr;
}; // struct Sign
typedef  ::autonavigation::Sign_<std::allocator<void> > Sign;

typedef boost::shared_ptr< ::autonavigation::Sign> SignPtr;
typedef boost::shared_ptr< ::autonavigation::Sign const> SignConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::Sign_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::Sign_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::Sign_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::Sign_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::Sign_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3513bee1140afeb245ce4576130c04b8";
  }

  static const char* value(const  ::autonavigation::Sign_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3513bee1140afeb2ULL;
  static const uint64_t static_value2 = 0x45ce4576130c04b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::Sign_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/Sign";
  }

  static const char* value(const  ::autonavigation::Sign_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::Sign_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 pos_flag       #  交通标志位置信息 \n\
int32 x              #  x坐标，厘米为单位\n\
int32 y              #  y坐标，厘米为单位\n\
uint8 sign_type      #  交通标志类型信息\n\
\n\
\n\
#\n\
# pos_flag\n\
#  0: 没有位置信息\n\
#  1: 位置信息有效\n\
\n\
# sign_type:\n\
#  0：无路标        \n\
#  1：禁止左转\n\
#  2：禁止右转\n\
#  3：禁止直行\n\
#  4：禁止向左和向右\n\
#  5：禁止向左和直行\n\
#  6：禁止向右和直行\n\
#  7：禁止驶入\n\
#  8：停车\n\
#  9： 前方学校 （减速）       \n\
#  10：注意行人 （减速）       \n\
#  11：路面不平 （减速）      \n\
#  12：路面施工 （减速）\n\
#  13：直行\n\
#  14：向左转\n\
#  15：向右转\n\
#  16：直行和左转\n\
#  17：直行和右转\n\
#  18：向左和向右\n\
#  19：靠右行驶        \n\
#  20：靠左行驶        \n\
#  21：鸣喇叭 ------- 无    \n\
#  22：环岛行驶 ------- 无     \n\
#  23：人行横道        \n\
#  24：允许掉头        \n\
#  25：停车位          \n\
#  26：禁止掉头  \n\
#  27：限速10公里 （减速）\n\
#  28：解除限速10公里 ------- 无\n\
#  29：限速15公里\n\
#  30：限速20公里\n\
#  31：限速25公里\n\
#  32: 三角修车标志\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::Sign_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::Sign_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::Sign_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos_flag);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.sign_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Sign_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::Sign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::Sign_<ContainerAllocator> & v) 
  {
    s << indent << "pos_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_flag);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sign_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_SIGN_H


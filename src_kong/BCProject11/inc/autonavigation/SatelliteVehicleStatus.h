/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/SatelliteVehicleStatus.msg */
#ifndef AUTONAVIGATION_MESSAGE_SATELLITEVEHICLESTATUS_H
#define AUTONAVIGATION_MESSAGE_SATELLITEVEHICLESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct SatelliteVehicleStatus_ {
  typedef SatelliteVehicleStatus_<ContainerAllocator> Type;

  SatelliteVehicleStatus_()
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , longitude(0.0)
  , latitude(0.0)
  , gaussX(0)
  , gaussY(0)
  , azimuth(0)
  , travel_distance(0)
  , remain_time(0)
  , steer(0)
  , fuel(0)
  , shift(0)
  , voltage(0)
  , throttle(0)
  , brake(0)
  , engine_speed(0)
  , vehicle_speed(0)
  , control_status(0)
  , handbrake(0)
  , engine_status(0)
  , controllable1(0)
  , reserve1(0)
  , reserve2(0)
  , reserve3(0)
  {
  }

  SatelliteVehicleStatus_(const ContainerAllocator& _alloc)
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , longitude(0.0)
  , latitude(0.0)
  , gaussX(0)
  , gaussY(0)
  , azimuth(0)
  , travel_distance(0)
  , remain_time(0)
  , steer(0)
  , fuel(0)
  , shift(0)
  , voltage(0)
  , throttle(0)
  , brake(0)
  , engine_speed(0)
  , vehicle_speed(0)
  , control_status(0)
  , handbrake(0)
  , engine_status(0)
  , controllable1(0)
  , reserve1(0)
  , reserve2(0)
  , reserve3(0)
  {
  }

  typedef uint32_t _unique_key_type;
  uint32_t unique_key;

  typedef uint32_t _gps_week_type;
  uint32_t gps_week;

  typedef uint64_t _gps_millisecond_type;
  uint64_t gps_millisecond;

  typedef double _longitude_type;
  double longitude;

  typedef double _latitude_type;
  double latitude;

  typedef int64_t _gaussX_type;
  int64_t gaussX;

  typedef int64_t _gaussY_type;
  int64_t gaussY;

  typedef int32_t _azimuth_type;
  int32_t azimuth;

  typedef uint32_t _travel_distance_type;
  uint32_t travel_distance;

  typedef int32_t _remain_time_type;
  int32_t remain_time;

  typedef int16_t _steer_type;
  int16_t steer;

  typedef uint8_t _fuel_type;
  uint8_t fuel;

  typedef uint8_t _shift_type;
  uint8_t shift;

  typedef uint8_t _voltage_type;
  uint8_t voltage;

  typedef uint8_t _throttle_type;
  uint8_t throttle;

  typedef uint8_t _brake_type;
  uint8_t brake;

  typedef uint8_t _engine_speed_type;
  uint8_t engine_speed;

  typedef uint8_t _vehicle_speed_type;
  uint8_t vehicle_speed;

  typedef uint8_t _control_status_type;
  uint8_t control_status;

  typedef uint8_t _handbrake_type;
  uint8_t handbrake;

  typedef uint8_t _engine_status_type;
  uint8_t engine_status;

  typedef uint8_t _controllable1_type;
  uint8_t controllable1;

  typedef uint8_t _reserve1_type;
  uint8_t reserve1;

  typedef uint8_t _reserve2_type;
  uint8_t reserve2;

  typedef uint8_t _reserve3_type;
  uint8_t reserve3;


  typedef boost::shared_ptr< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct SatelliteVehicleStatus
typedef  ::autonavigation::SatelliteVehicleStatus_<std::allocator<void> > SatelliteVehicleStatus;

typedef boost::shared_ptr< ::autonavigation::SatelliteVehicleStatus> SatelliteVehicleStatusPtr;
typedef boost::shared_ptr< ::autonavigation::SatelliteVehicleStatus const> SatelliteVehicleStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c54d083367b6c5736ad6547a58a68963";
  }

  static const char* value(const  ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc54d083367b6c573ULL;
  static const uint64_t static_value2 = 0x6ad6547a58a68963ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/SatelliteVehicleStatus";
  }

  static const char* value(const  ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#对应结构体Autonavigation_Satellite_Vehicle_Status\n\
\n\
uint32     unique_key           #自主行驶载车唯一标识\n\
uint32     gps_week             #GPS周\n\
uint64     gps_millisecond      #GPS毫秒,以周的零点开始的毫秒数\n\
float64    longitude            #经度，单位为度\n\
float64    latitude             #纬度，单位为度\n\
int64      gaussX               #高斯坐标X\n\
int64      gaussY               #高斯坐标Y\n\
int32      azimuth              #航向角，单位0.01度，向东为0，逆时针0～36000\n\
uint32     travel_distance      #T0时刻开始后，前进的里程，单位米\n\
int32      remain_time          #距离T0时刻还有多少时间，单位毫秒\n\
int16      steer                #单位0.01度，前轮转角，左转为正\n\
uint8      fuel                 #剩余油量，百分比\n\
uint8      shift                #档位\n\
uint8      voltage              #电压\n\
uint8      throttle             #当前使用油门量，百分比\n\
uint8      brake                #当前使用刹车量，百分比\n\
uint8      engine_speed         #单位100转/分钟，发动机转速\n\
uint8      vehicle_speed        #单位km/h，汽车时速\n\
uint8      control_status       #控制状态\n\
uint8      handbrake            #手刹状态\n\
uint8      engine_status        #发动机点火状态\n\
uint8      controllable1        #Bit8：方向盘 Bit7：油门 Bit6：刹车 Bit5：档位 Bit4：手刹 Bit3：点火 Bit2：熄火 Bit1：预留 相应位为1表示受方舱控制 \n\
\n\
uint8      reserve1             #预留\n\
uint8      reserve2 \n\
uint8      reserve3 \n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.unique_key);
    stream.next(m.gps_week);
    stream.next(m.gps_millisecond);
    stream.next(m.longitude);
    stream.next(m.latitude);
    stream.next(m.gaussX);
    stream.next(m.gaussY);
    stream.next(m.azimuth);
    stream.next(m.travel_distance);
    stream.next(m.remain_time);
    stream.next(m.steer);
    stream.next(m.fuel);
    stream.next(m.shift);
    stream.next(m.voltage);
    stream.next(m.throttle);
    stream.next(m.brake);
    stream.next(m.engine_speed);
    stream.next(m.vehicle_speed);
    stream.next(m.control_status);
    stream.next(m.handbrake);
    stream.next(m.engine_status);
    stream.next(m.controllable1);
    stream.next(m.reserve1);
    stream.next(m.reserve2);
    stream.next(m.reserve3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SatelliteVehicleStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::SatelliteVehicleStatus_<ContainerAllocator> & v) 
  {
    s << indent << "unique_key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.unique_key);
    s << indent << "gps_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "gaussX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gaussX);
    s << indent << "gaussY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gaussY);
    s << indent << "azimuth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.azimuth);
    s << indent << "travel_distance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.travel_distance);
    s << indent << "remain_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remain_time);
    s << indent << "steer: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steer);
    s << indent << "fuel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fuel);
    s << indent << "shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shift);
    s << indent << "voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "throttle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "engine_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_speed);
    s << indent << "vehicle_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "control_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_status);
    s << indent << "handbrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handbrake);
    s << indent << "engine_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_status);
    s << indent << "controllable1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.controllable1);
    s << indent << "reserve1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve1);
    s << indent << "reserve2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve2);
    s << indent << "reserve3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_SATELLITEVEHICLESTATUS_H


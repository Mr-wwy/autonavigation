/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/Ping.msg */
#ifndef AUTONAVIGATION_MESSAGE_PING_H
#define AUTONAVIGATION_MESSAGE_PING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct Ping_ {
  typedef Ping_<ContainerAllocator> Type;

  Ping_()
  : rtt(0)
  , ip()
  , hostname()
  {
  }

  Ping_(const ContainerAllocator& _alloc)
  : rtt(0)
  , ip(_alloc)
  , hostname(_alloc)
  {
  }

  typedef int16_t _rtt_type;
  int16_t rtt;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ip;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  hostname;


  typedef boost::shared_ptr< ::autonavigation::Ping_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::Ping_<ContainerAllocator>  const> ConstPtr;
}; // struct Ping
typedef  ::autonavigation::Ping_<std::allocator<void> > Ping;

typedef boost::shared_ptr< ::autonavigation::Ping> PingPtr;
typedef boost::shared_ptr< ::autonavigation::Ping const> PingConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::Ping_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::Ping_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::Ping_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::Ping_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::Ping_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75aba3b103915cf20d8819537e224ba3";
  }

  static const char* value(const  ::autonavigation::Ping_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x75aba3b103915cf2ULL;
  static const uint64_t static_value2 = 0x0d8819537e224ba3ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::Ping_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/Ping";
  }

  static const char* value(const  ::autonavigation::Ping_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::Ping_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#ping发送网络延迟\n\
int16 rtt #网络延迟\n\
string ip #ip\n\
string hostname #主机名\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::Ping_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::Ping_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rtt);
    stream.next(m.ip);
    stream.next(m.hostname);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Ping_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::Ping_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::Ping_<ContainerAllocator> & v) 
  {
    s << indent << "rtt: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rtt);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_PING_H


/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/RadarRawTarget.msg */
#ifndef AUTONAVIGATION_MESSAGE_RADARRAWTARGET_H
#define AUTONAVIGATION_MESSAGE_RADARRAWTARGET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct RadarRawTarget_ {
  typedef RadarRawTarget_<ContainerAllocator> Type;

  RadarRawTarget_()
  : id(0)
  , range(0.0)
  , rangeRate(0.0)
  , angle(0.0)
  , width(0.0)
  {
  }

  RadarRawTarget_(const ContainerAllocator& _alloc)
  : id(0)
  , range(0.0)
  , rangeRate(0.0)
  , angle(0.0)
  , width(0.0)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef double _range_type;
  double range;

  typedef double _rangeRate_type;
  double rangeRate;

  typedef double _angle_type;
  double angle;

  typedef double _width_type;
  double width;


  typedef boost::shared_ptr< ::autonavigation::RadarRawTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::RadarRawTarget_<ContainerAllocator>  const> ConstPtr;
}; // struct RadarRawTarget
typedef  ::autonavigation::RadarRawTarget_<std::allocator<void> > RadarRawTarget;

typedef boost::shared_ptr< ::autonavigation::RadarRawTarget> RadarRawTargetPtr;
typedef boost::shared_ptr< ::autonavigation::RadarRawTarget const> RadarRawTargetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::RadarRawTarget_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::RadarRawTarget_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RadarRawTarget_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RadarRawTarget_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::RadarRawTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6601e9dfcbbb3d8780ce081d501f1bd8";
  }

  static const char* value(const  ::autonavigation::RadarRawTarget_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6601e9dfcbbb3d87ULL;
  static const uint64_t static_value2 = 0x80ce081d501f1bd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::RadarRawTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/RadarRawTarget";
  }

  static const char* value(const  ::autonavigation::RadarRawTarget_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::RadarRawTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32   id\n\
float64 range\n\
float64 rangeRate\n\
float64 angle\n\
float64 width\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::RadarRawTarget_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::RadarRawTarget_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::RadarRawTarget_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.range);
    stream.next(m.rangeRate);
    stream.next(m.angle);
    stream.next(m.width);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RadarRawTarget_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::RadarRawTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::RadarRawTarget_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    s << indent << "rangeRate: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRate);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_RADARRAWTARGET_H


/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/LocalCoordinate.msg */
#ifndef AUTONAVIGATION_MESSAGE_LOCALCOORDINATE_H
#define AUTONAVIGATION_MESSAGE_LOCALCOORDINATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct LocalCoordinate_ {
  typedef LocalCoordinate_<ContainerAllocator> Type;

  LocalCoordinate_()
  : z_x(0)
  , z_y(0)
  , g_x(0)
  , g_y(0)
  , heading(0)
  , pitch(0)
  , roll(0)
  , height(0)
  , class_id(0)
  {
  }

  LocalCoordinate_(const ContainerAllocator& _alloc)
  : z_x(0)
  , z_y(0)
  , g_x(0)
  , g_y(0)
  , heading(0)
  , pitch(0)
  , roll(0)
  , height(0)
  , class_id(0)
  {
  }

  typedef int32_t _z_x_type;
  int32_t z_x;

  typedef int32_t _z_y_type;
  int32_t z_y;

  typedef int32_t _g_x_type;
  int32_t g_x;

  typedef int32_t _g_y_type;
  int32_t g_y;

  typedef int32_t _heading_type;
  int32_t heading;

  typedef int32_t _pitch_type;
  int32_t pitch;

  typedef int32_t _roll_type;
  int32_t roll;

  typedef int32_t _height_type;
  int32_t height;

  typedef uint8_t _class_id_type;
  uint8_t class_id;


  typedef boost::shared_ptr< ::autonavigation::LocalCoordinate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::LocalCoordinate_<ContainerAllocator>  const> ConstPtr;
}; // struct LocalCoordinate
typedef  ::autonavigation::LocalCoordinate_<std::allocator<void> > LocalCoordinate;

typedef boost::shared_ptr< ::autonavigation::LocalCoordinate> LocalCoordinatePtr;
typedef boost::shared_ptr< ::autonavigation::LocalCoordinate const> LocalCoordinateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::LocalCoordinate_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::LocalCoordinate_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LocalCoordinate_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LocalCoordinate_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::LocalCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d3bcfb0404f035917578c8fa5ddf9675";
  }

  static const char* value(const  ::autonavigation::LocalCoordinate_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd3bcfb0404f03591ULL;
  static const uint64_t static_value2 = 0x7578c8fa5ddf9675ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::LocalCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/LocalCoordinate";
  }

  static const char* value(const  ::autonavigation::LocalCoordinate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::LocalCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 z_x\n\
int32 z_y\n\
int32 g_x\n\
int32 g_y\n\
int32 heading\n\
int32 pitch\n\
int32 roll\n\
int32 height\n\
uint8 class_id\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::LocalCoordinate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::LocalCoordinate_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::LocalCoordinate_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.z_x);
    stream.next(m.z_y);
    stream.next(m.g_x);
    stream.next(m.g_y);
    stream.next(m.heading);
    stream.next(m.pitch);
    stream.next(m.roll);
    stream.next(m.height);
    stream.next(m.class_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalCoordinate_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::LocalCoordinate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::LocalCoordinate_<ContainerAllocator> & v) 
  {
    s << indent << "z_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z_x);
    s << indent << "z_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z_y);
    s << indent << "g_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g_x);
    s << indent << "g_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g_y);
    s << indent << "heading: ";
    Printer<int32_t>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roll);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "class_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.class_id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_LOCALCOORDINATE_H


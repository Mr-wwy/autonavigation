/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/VisObs.msg */
#ifndef AUTONAVIGATION_MESSAGE_VISOBS_H
#define AUTONAVIGATION_MESSAGE_VISOBS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct VisObs_ {
  typedef VisObs_<ContainerAllocator> Type;

  VisObs_()
  : CAN_VIS_OBS_COUNT(0)
  , CAN_VIS_OBS_ANGLE_RATE(0.0)
  , CAN_VIS_OBS_ANGLE_CENTROID(0.0)
  , CAN_VIS_OBS_RANGE_RATE(0.0)
  , CAN_VIS_OBS_RANGE(0.0)
  , CAN_VIS_OBS_LATERAL_RATE(0.0)
  , CAN_VIS_OBS_MANEUVER_STATE(0)
  , CAN_VIS_OBS_DETECTION_STATUS(0)
  , CAN_VIS_OBS_MOTION_TYPE(0)
  , CAN_VIS_OBS_CROSSING_STATUS(0)
  , CAN_VIS_OBS_ID(0)
  , CAN_VIS_OBS_LOW_CONFIDENCE(0)
  , CAN_VIS_OBS_LANE_NUMBER(0)
  , CAN_VIS_OBS_TURN_INDICATOR(0)
  , CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR(0)
  , CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF(0)
  , CAN_VIS_OBS_OBJECT_IN_PATH(0)
  , CAN_VIS_OBS_HIGH_DECELERATION(0)
  , CAN_VIS_OBS_FCW_STATUS(0)
  , CAN_VIS_OBS_TTC_WITHOUT_ACC(0.0)
  , CAN_VIS_OBS_ME_AWS(0)
  , CAN_VIS_OBS_CIPO(0)
  , CAN_VIS_OBS_TTC_WITH_ACC(0.0)
  , CAN_VIS_OBS_TTC_WITH_ACC_CONF(0.0)
  , CAN_VIS_OBS_CLASSIFICATION(0)
  , CAN_RADAR_TARGET_MATCH_COASTED(0)
  , CAN_VIS_OBS_VISION_RANGE(0.0)
  , CAN_RADAR_TARGET_MATCH_INDEX_1(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_2(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_3(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_4(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_1(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_2(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_3(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_4(0)
  , CAN_VIS_OBS_WIDTH(0.0)
  , CAN_VIS_OBS_VISION_ANGLE_RATE(0.0)
  , CAN_VIS_OBS_VISION_ANGLE_CENTROID(0.0)
  , CAN_VIS_OBS_VISION_RANGE_RATE(0.0)
  , CAN_VIS_OBS_VISION_LATERAL_RATE(0.0)
  , CAN_VIS_OBS_VISION_WIDTH(0.0)
  , CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_RANGE_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_FCW_CALC_STATUS(0)
  , CAN_VIS_OBS_PREDICTED_TTC(0.0)
  , CAN_VIS_OBS_PREDICTED_LAT_POS(0.0)
  , CAN_OBJECT_HIGH_DECEL_FLAG(0)
  , CAN_VIS_HALF_BODY_DETECTION_FLAG(0)
  {
  }

  VisObs_(const ContainerAllocator& _alloc)
  : CAN_VIS_OBS_COUNT(0)
  , CAN_VIS_OBS_ANGLE_RATE(0.0)
  , CAN_VIS_OBS_ANGLE_CENTROID(0.0)
  , CAN_VIS_OBS_RANGE_RATE(0.0)
  , CAN_VIS_OBS_RANGE(0.0)
  , CAN_VIS_OBS_LATERAL_RATE(0.0)
  , CAN_VIS_OBS_MANEUVER_STATE(0)
  , CAN_VIS_OBS_DETECTION_STATUS(0)
  , CAN_VIS_OBS_MOTION_TYPE(0)
  , CAN_VIS_OBS_CROSSING_STATUS(0)
  , CAN_VIS_OBS_ID(0)
  , CAN_VIS_OBS_LOW_CONFIDENCE(0)
  , CAN_VIS_OBS_LANE_NUMBER(0)
  , CAN_VIS_OBS_TURN_INDICATOR(0)
  , CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR(0)
  , CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF(0)
  , CAN_VIS_OBS_OBJECT_IN_PATH(0)
  , CAN_VIS_OBS_HIGH_DECELERATION(0)
  , CAN_VIS_OBS_FCW_STATUS(0)
  , CAN_VIS_OBS_TTC_WITHOUT_ACC(0.0)
  , CAN_VIS_OBS_ME_AWS(0)
  , CAN_VIS_OBS_CIPO(0)
  , CAN_VIS_OBS_TTC_WITH_ACC(0.0)
  , CAN_VIS_OBS_TTC_WITH_ACC_CONF(0.0)
  , CAN_VIS_OBS_CLASSIFICATION(0)
  , CAN_RADAR_TARGET_MATCH_COASTED(0)
  , CAN_VIS_OBS_VISION_RANGE(0.0)
  , CAN_RADAR_TARGET_MATCH_INDEX_1(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_2(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_3(0)
  , CAN_RADAR_TARGET_MATCH_INDEX_4(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_1(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_2(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_3(0)
  , CAN_RADAR_TGT_MATCH_CONFIDENCE_4(0)
  , CAN_VIS_OBS_WIDTH(0.0)
  , CAN_VIS_OBS_VISION_ANGLE_RATE(0.0)
  , CAN_VIS_OBS_VISION_ANGLE_CENTROID(0.0)
  , CAN_VIS_OBS_VISION_RANGE_RATE(0.0)
  , CAN_VIS_OBS_VISION_LATERAL_RATE(0.0)
  , CAN_VIS_OBS_VISION_WIDTH(0.0)
  , CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_RANGE_FUNC_ACT_EST(0.0)
  , CAN_VIS_OBS_FCW_CALC_STATUS(0)
  , CAN_VIS_OBS_PREDICTED_TTC(0.0)
  , CAN_VIS_OBS_PREDICTED_LAT_POS(0.0)
  , CAN_OBJECT_HIGH_DECEL_FLAG(0)
  , CAN_VIS_HALF_BODY_DETECTION_FLAG(0)
  {
  }

  typedef uint8_t _CAN_VIS_OBS_COUNT_type;
  uint8_t CAN_VIS_OBS_COUNT;

  typedef float _CAN_VIS_OBS_ANGLE_RATE_type;
  float CAN_VIS_OBS_ANGLE_RATE;

  typedef float _CAN_VIS_OBS_ANGLE_CENTROID_type;
  float CAN_VIS_OBS_ANGLE_CENTROID;

  typedef float _CAN_VIS_OBS_RANGE_RATE_type;
  float CAN_VIS_OBS_RANGE_RATE;

  typedef float _CAN_VIS_OBS_RANGE_type;
  float CAN_VIS_OBS_RANGE;

  typedef float _CAN_VIS_OBS_LATERAL_RATE_type;
  float CAN_VIS_OBS_LATERAL_RATE;

  typedef int8_t _CAN_VIS_OBS_MANEUVER_STATE_type;
  int8_t CAN_VIS_OBS_MANEUVER_STATE;

  typedef uint8_t _CAN_VIS_OBS_DETECTION_STATUS_type;
  uint8_t CAN_VIS_OBS_DETECTION_STATUS;

  typedef uint8_t _CAN_VIS_OBS_MOTION_TYPE_type;
  uint8_t CAN_VIS_OBS_MOTION_TYPE;

  typedef uint8_t _CAN_VIS_OBS_CROSSING_STATUS_type;
  uint8_t CAN_VIS_OBS_CROSSING_STATUS;

  typedef uint8_t _CAN_VIS_OBS_ID_type;
  uint8_t CAN_VIS_OBS_ID;

  typedef uint8_t _CAN_VIS_OBS_LOW_CONFIDENCE_type;
  uint8_t CAN_VIS_OBS_LOW_CONFIDENCE;

  typedef int8_t _CAN_VIS_OBS_LANE_NUMBER_type;
  int8_t CAN_VIS_OBS_LANE_NUMBER;

  typedef uint8_t _CAN_VIS_OBS_TURN_INDICATOR_type;
  uint8_t CAN_VIS_OBS_TURN_INDICATOR;

  typedef uint8_t _CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR_type;
  uint8_t CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR;

  typedef uint8_t _CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF_type;
  uint8_t CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF;

  typedef uint8_t _CAN_VIS_OBS_OBJECT_IN_PATH_type;
  uint8_t CAN_VIS_OBS_OBJECT_IN_PATH;

  typedef uint8_t _CAN_VIS_OBS_HIGH_DECELERATION_type;
  uint8_t CAN_VIS_OBS_HIGH_DECELERATION;

  typedef uint8_t _CAN_VIS_OBS_FCW_STATUS_type;
  uint8_t CAN_VIS_OBS_FCW_STATUS;

  typedef float _CAN_VIS_OBS_TTC_WITHOUT_ACC_type;
  float CAN_VIS_OBS_TTC_WITHOUT_ACC;

  typedef uint8_t _CAN_VIS_OBS_ME_AWS_type;
  uint8_t CAN_VIS_OBS_ME_AWS;

  typedef uint8_t _CAN_VIS_OBS_CIPO_type;
  uint8_t CAN_VIS_OBS_CIPO;

  typedef float _CAN_VIS_OBS_TTC_WITH_ACC_type;
  float CAN_VIS_OBS_TTC_WITH_ACC;

  typedef float _CAN_VIS_OBS_TTC_WITH_ACC_CONF_type;
  float CAN_VIS_OBS_TTC_WITH_ACC_CONF;

  typedef uint8_t _CAN_VIS_OBS_CLASSIFICATION_type;
  uint8_t CAN_VIS_OBS_CLASSIFICATION;

  typedef uint8_t _CAN_RADAR_TARGET_MATCH_COASTED_type;
  uint8_t CAN_RADAR_TARGET_MATCH_COASTED;

  typedef float _CAN_VIS_OBS_VISION_RANGE_type;
  float CAN_VIS_OBS_VISION_RANGE;

  typedef uint8_t _CAN_RADAR_TARGET_MATCH_INDEX_1_type;
  uint8_t CAN_RADAR_TARGET_MATCH_INDEX_1;

  typedef uint8_t _CAN_RADAR_TARGET_MATCH_INDEX_2_type;
  uint8_t CAN_RADAR_TARGET_MATCH_INDEX_2;

  typedef uint8_t _CAN_RADAR_TARGET_MATCH_INDEX_3_type;
  uint8_t CAN_RADAR_TARGET_MATCH_INDEX_3;

  typedef uint8_t _CAN_RADAR_TARGET_MATCH_INDEX_4_type;
  uint8_t CAN_RADAR_TARGET_MATCH_INDEX_4;

  typedef uint8_t _CAN_RADAR_TGT_MATCH_CONFIDENCE_1_type;
  uint8_t CAN_RADAR_TGT_MATCH_CONFIDENCE_1;

  typedef uint8_t _CAN_RADAR_TGT_MATCH_CONFIDENCE_2_type;
  uint8_t CAN_RADAR_TGT_MATCH_CONFIDENCE_2;

  typedef uint8_t _CAN_RADAR_TGT_MATCH_CONFIDENCE_3_type;
  uint8_t CAN_RADAR_TGT_MATCH_CONFIDENCE_3;

  typedef uint8_t _CAN_RADAR_TGT_MATCH_CONFIDENCE_4_type;
  uint8_t CAN_RADAR_TGT_MATCH_CONFIDENCE_4;

  typedef float _CAN_VIS_OBS_WIDTH_type;
  float CAN_VIS_OBS_WIDTH;

  typedef float _CAN_VIS_OBS_VISION_ANGLE_RATE_type;
  float CAN_VIS_OBS_VISION_ANGLE_RATE;

  typedef float _CAN_VIS_OBS_VISION_ANGLE_CENTROID_type;
  float CAN_VIS_OBS_VISION_ANGLE_CENTROID;

  typedef float _CAN_VIS_OBS_VISION_RANGE_RATE_type;
  float CAN_VIS_OBS_VISION_RANGE_RATE;

  typedef float _CAN_VIS_OBS_VISION_LATERAL_RATE_type;
  float CAN_VIS_OBS_VISION_LATERAL_RATE;

  typedef float _CAN_VIS_OBS_VISION_WIDTH_type;
  float CAN_VIS_OBS_VISION_WIDTH;

  typedef float _CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST_type;
  float CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST;

  typedef float _CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST_type;
  float CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST;

  typedef float _CAN_VIS_OBS_RANGE_FUNC_ACT_EST_type;
  float CAN_VIS_OBS_RANGE_FUNC_ACT_EST;

  typedef uint8_t _CAN_VIS_OBS_FCW_CALC_STATUS_type;
  uint8_t CAN_VIS_OBS_FCW_CALC_STATUS;

  typedef float _CAN_VIS_OBS_PREDICTED_TTC_type;
  float CAN_VIS_OBS_PREDICTED_TTC;

  typedef float _CAN_VIS_OBS_PREDICTED_LAT_POS_type;
  float CAN_VIS_OBS_PREDICTED_LAT_POS;

  typedef uint8_t _CAN_OBJECT_HIGH_DECEL_FLAG_type;
  uint8_t CAN_OBJECT_HIGH_DECEL_FLAG;

  typedef uint8_t _CAN_VIS_HALF_BODY_DETECTION_FLAG_type;
  uint8_t CAN_VIS_HALF_BODY_DETECTION_FLAG;


  typedef boost::shared_ptr< ::autonavigation::VisObs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VisObs_<ContainerAllocator>  const> ConstPtr;
}; // struct VisObs
typedef  ::autonavigation::VisObs_<std::allocator<void> > VisObs;

typedef boost::shared_ptr< ::autonavigation::VisObs> VisObsPtr;
typedef boost::shared_ptr< ::autonavigation::VisObs const> VisObsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VisObs_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VisObs_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VisObs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VisObs_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VisObs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e8a43127f0607f3c6725c1cce9ca0c3c";
  }

  static const char* value(const  ::autonavigation::VisObs_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe8a43127f0607f3cULL;
  static const uint64_t static_value2 = 0x6725c1cce9ca0c3cULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VisObs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VisObs";
  }

  static const char* value(const  ::autonavigation::VisObs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VisObs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#VISION_OBSTACLE_MSG1\n\
uint8            CAN_VIS_OBS_COUNT\n\
float32          CAN_VIS_OBS_ANGLE_RATE\n\
float32          CAN_VIS_OBS_ANGLE_CENTROID\n\
float32          CAN_VIS_OBS_RANGE_RATE\n\
float32          CAN_VIS_OBS_RANGE \n\
float32          CAN_VIS_OBS_LATERAL_RATE\n\
\n\
#VISION_OBSTACLE_MSG2\n\
int8             CAN_VIS_OBS_MANEUVER_STATE\n\
uint8            CAN_VIS_OBS_DETECTION_STATUS\n\
uint8            CAN_VIS_OBS_MOTION_TYPE\n\
uint8            CAN_VIS_OBS_CROSSING_STATUS\n\
uint8            CAN_VIS_OBS_ID\n\
uint8            CAN_VIS_OBS_LOW_CONFIDENCE\n\
int8             CAN_VIS_OBS_LANE_NUMBER\n\
uint8            CAN_VIS_OBS_TURN_INDICATOR\n\
uint8            CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR\n\
uint8            CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF\n\
uint8            CAN_VIS_OBS_OBJECT_IN_PATH\n\
uint8            CAN_VIS_OBS_HIGH_DECELERATION\n\
uint8            CAN_VIS_OBS_FCW_STATUS\n\
float32          CAN_VIS_OBS_TTC_WITHOUT_ACC\n\
uint8            CAN_VIS_OBS_ME_AWS\n\
uint8            CAN_VIS_OBS_CIPO\n\
float32          CAN_VIS_OBS_TTC_WITH_ACC\n\
float32          CAN_VIS_OBS_TTC_WITH_ACC_CONF\n\
uint8            CAN_VIS_OBS_CLASSIFICATION\n\
\n\
#VISION_OBSTACLE_MSG3\n\
uint8            CAN_RADAR_TARGET_MATCH_COASTED\n\
float32          CAN_VIS_OBS_VISION_RANGE\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_1\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_2\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_3\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_4\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_1\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_2\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_3\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_4\n\
float32          CAN_VIS_OBS_WIDTH\n\
\n\
\n\
#VISION_OBSTACLE_MSG4\n\
float32          CAN_VIS_OBS_VISION_ANGLE_RATE\n\
float32          CAN_VIS_OBS_VISION_ANGLE_CENTROID\n\
float32          CAN_VIS_OBS_VISION_RANGE_RATE\n\
float32          CAN_VIS_OBS_VISION_LATERAL_RATE\n\
float32          CAN_VIS_OBS_VISION_WIDTH\n\
\n\
#VISION_OBSTACLE_MSG5\n\
float32          CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST\n\
float32          CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST\n\
float32          CAN_VIS_OBS_RANGE_FUNC_ACT_EST\n\
uint8            CAN_VIS_OBS_FCW_CALC_STATUS\n\
float32          CAN_VIS_OBS_PREDICTED_TTC\n\
float32          CAN_VIS_OBS_PREDICTED_LAT_POS\n\
uint8            CAN_OBJECT_HIGH_DECEL_FLAG\n\
uint8            CAN_VIS_HALF_BODY_DETECTION_FLAG\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::VisObs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::VisObs_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VisObs_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.CAN_VIS_OBS_COUNT);
    stream.next(m.CAN_VIS_OBS_ANGLE_RATE);
    stream.next(m.CAN_VIS_OBS_ANGLE_CENTROID);
    stream.next(m.CAN_VIS_OBS_RANGE_RATE);
    stream.next(m.CAN_VIS_OBS_RANGE);
    stream.next(m.CAN_VIS_OBS_LATERAL_RATE);
    stream.next(m.CAN_VIS_OBS_MANEUVER_STATE);
    stream.next(m.CAN_VIS_OBS_DETECTION_STATUS);
    stream.next(m.CAN_VIS_OBS_MOTION_TYPE);
    stream.next(m.CAN_VIS_OBS_CROSSING_STATUS);
    stream.next(m.CAN_VIS_OBS_ID);
    stream.next(m.CAN_VIS_OBS_LOW_CONFIDENCE);
    stream.next(m.CAN_VIS_OBS_LANE_NUMBER);
    stream.next(m.CAN_VIS_OBS_TURN_INDICATOR);
    stream.next(m.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR);
    stream.next(m.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF);
    stream.next(m.CAN_VIS_OBS_OBJECT_IN_PATH);
    stream.next(m.CAN_VIS_OBS_HIGH_DECELERATION);
    stream.next(m.CAN_VIS_OBS_FCW_STATUS);
    stream.next(m.CAN_VIS_OBS_TTC_WITHOUT_ACC);
    stream.next(m.CAN_VIS_OBS_ME_AWS);
    stream.next(m.CAN_VIS_OBS_CIPO);
    stream.next(m.CAN_VIS_OBS_TTC_WITH_ACC);
    stream.next(m.CAN_VIS_OBS_TTC_WITH_ACC_CONF);
    stream.next(m.CAN_VIS_OBS_CLASSIFICATION);
    stream.next(m.CAN_RADAR_TARGET_MATCH_COASTED);
    stream.next(m.CAN_VIS_OBS_VISION_RANGE);
    stream.next(m.CAN_RADAR_TARGET_MATCH_INDEX_1);
    stream.next(m.CAN_RADAR_TARGET_MATCH_INDEX_2);
    stream.next(m.CAN_RADAR_TARGET_MATCH_INDEX_3);
    stream.next(m.CAN_RADAR_TARGET_MATCH_INDEX_4);
    stream.next(m.CAN_RADAR_TGT_MATCH_CONFIDENCE_1);
    stream.next(m.CAN_RADAR_TGT_MATCH_CONFIDENCE_2);
    stream.next(m.CAN_RADAR_TGT_MATCH_CONFIDENCE_3);
    stream.next(m.CAN_RADAR_TGT_MATCH_CONFIDENCE_4);
    stream.next(m.CAN_VIS_OBS_WIDTH);
    stream.next(m.CAN_VIS_OBS_VISION_ANGLE_RATE);
    stream.next(m.CAN_VIS_OBS_VISION_ANGLE_CENTROID);
    stream.next(m.CAN_VIS_OBS_VISION_RANGE_RATE);
    stream.next(m.CAN_VIS_OBS_VISION_LATERAL_RATE);
    stream.next(m.CAN_VIS_OBS_VISION_WIDTH);
    stream.next(m.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST);
    stream.next(m.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST);
    stream.next(m.CAN_VIS_OBS_RANGE_FUNC_ACT_EST);
    stream.next(m.CAN_VIS_OBS_FCW_CALC_STATUS);
    stream.next(m.CAN_VIS_OBS_PREDICTED_TTC);
    stream.next(m.CAN_VIS_OBS_PREDICTED_LAT_POS);
    stream.next(m.CAN_OBJECT_HIGH_DECEL_FLAG);
    stream.next(m.CAN_VIS_HALF_BODY_DETECTION_FLAG);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VisObs_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VisObs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VisObs_<ContainerAllocator> & v) 
  {
    s << indent << "CAN_VIS_OBS_COUNT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_COUNT);
    s << indent << "CAN_VIS_OBS_ANGLE_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_ANGLE_RATE);
    s << indent << "CAN_VIS_OBS_ANGLE_CENTROID: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_ANGLE_CENTROID);
    s << indent << "CAN_VIS_OBS_RANGE_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_RANGE_RATE);
    s << indent << "CAN_VIS_OBS_RANGE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_RANGE);
    s << indent << "CAN_VIS_OBS_LATERAL_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_LATERAL_RATE);
    s << indent << "CAN_VIS_OBS_MANEUVER_STATE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_MANEUVER_STATE);
    s << indent << "CAN_VIS_OBS_DETECTION_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_DETECTION_STATUS);
    s << indent << "CAN_VIS_OBS_MOTION_TYPE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_MOTION_TYPE);
    s << indent << "CAN_VIS_OBS_CROSSING_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_CROSSING_STATUS);
    s << indent << "CAN_VIS_OBS_ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_ID);
    s << indent << "CAN_VIS_OBS_LOW_CONFIDENCE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_LOW_CONFIDENCE);
    s << indent << "CAN_VIS_OBS_LANE_NUMBER: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_LANE_NUMBER);
    s << indent << "CAN_VIS_OBS_TURN_INDICATOR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_TURN_INDICATOR);
    s << indent << "CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR);
    s << indent << "CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF);
    s << indent << "CAN_VIS_OBS_OBJECT_IN_PATH: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_OBJECT_IN_PATH);
    s << indent << "CAN_VIS_OBS_HIGH_DECELERATION: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_HIGH_DECELERATION);
    s << indent << "CAN_VIS_OBS_FCW_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_FCW_STATUS);
    s << indent << "CAN_VIS_OBS_TTC_WITHOUT_ACC: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_WITHOUT_ACC);
    s << indent << "CAN_VIS_OBS_ME_AWS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_ME_AWS);
    s << indent << "CAN_VIS_OBS_CIPO: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_CIPO);
    s << indent << "CAN_VIS_OBS_TTC_WITH_ACC: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_WITH_ACC);
    s << indent << "CAN_VIS_OBS_TTC_WITH_ACC_CONF: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_WITH_ACC_CONF);
    s << indent << "CAN_VIS_OBS_CLASSIFICATION: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_CLASSIFICATION);
    s << indent << "CAN_RADAR_TARGET_MATCH_COASTED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TARGET_MATCH_COASTED);
    s << indent << "CAN_VIS_OBS_VISION_RANGE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_RANGE);
    s << indent << "CAN_RADAR_TARGET_MATCH_INDEX_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TARGET_MATCH_INDEX_1);
    s << indent << "CAN_RADAR_TARGET_MATCH_INDEX_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TARGET_MATCH_INDEX_2);
    s << indent << "CAN_RADAR_TARGET_MATCH_INDEX_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TARGET_MATCH_INDEX_3);
    s << indent << "CAN_RADAR_TARGET_MATCH_INDEX_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TARGET_MATCH_INDEX_4);
    s << indent << "CAN_RADAR_TGT_MATCH_CONFIDENCE_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TGT_MATCH_CONFIDENCE_1);
    s << indent << "CAN_RADAR_TGT_MATCH_CONFIDENCE_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TGT_MATCH_CONFIDENCE_2);
    s << indent << "CAN_RADAR_TGT_MATCH_CONFIDENCE_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TGT_MATCH_CONFIDENCE_3);
    s << indent << "CAN_RADAR_TGT_MATCH_CONFIDENCE_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_RADAR_TGT_MATCH_CONFIDENCE_4);
    s << indent << "CAN_VIS_OBS_WIDTH: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_WIDTH);
    s << indent << "CAN_VIS_OBS_VISION_ANGLE_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_ANGLE_RATE);
    s << indent << "CAN_VIS_OBS_VISION_ANGLE_CENTROID: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_ANGLE_CENTROID);
    s << indent << "CAN_VIS_OBS_VISION_RANGE_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_RANGE_RATE);
    s << indent << "CAN_VIS_OBS_VISION_LATERAL_RATE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_LATERAL_RATE);
    s << indent << "CAN_VIS_OBS_VISION_WIDTH: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_VISION_WIDTH);
    s << indent << "CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST);
    s << indent << "CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST);
    s << indent << "CAN_VIS_OBS_RANGE_FUNC_ACT_EST: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_RANGE_FUNC_ACT_EST);
    s << indent << "CAN_VIS_OBS_FCW_CALC_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_OBS_FCW_CALC_STATUS);
    s << indent << "CAN_VIS_OBS_PREDICTED_TTC: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_PREDICTED_TTC);
    s << indent << "CAN_VIS_OBS_PREDICTED_LAT_POS: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_VIS_OBS_PREDICTED_LAT_POS);
    s << indent << "CAN_OBJECT_HIGH_DECEL_FLAG: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_OBJECT_HIGH_DECEL_FLAG);
    s << indent << "CAN_VIS_HALF_BODY_DETECTION_FLAG: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_VIS_HALF_BODY_DETECTION_FLAG);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VISOBS_H


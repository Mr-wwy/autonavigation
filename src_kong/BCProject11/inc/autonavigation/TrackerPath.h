/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/TrackerPath.msg */
#ifndef AUTONAVIGATION_MESSAGE_TRACKERPATH_H
#define AUTONAVIGATION_MESSAGE_TRACKERPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct TrackerPath_ {
  typedef TrackerPath_<ContainerAllocator> Type;

  TrackerPath_()
  : x()
  , y()
  , leftx()
  , lefty()
  , rightx()
  , righty()
  , pointnum(0)
  , startindex(0)
  , endindex(0)
  , selectindex(0)
  {
    x.assign(0);
    y.assign(0);
    leftx.assign(0);
    lefty.assign(0);
    rightx.assign(0);
    righty.assign(0);
  }

  TrackerPath_(const ContainerAllocator& _alloc)
  : x()
  , y()
  , leftx()
  , lefty()
  , rightx()
  , righty()
  , pointnum(0)
  , startindex(0)
  , endindex(0)
  , selectindex(0)
  {
    x.assign(0);
    y.assign(0);
    leftx.assign(0);
    lefty.assign(0);
    rightx.assign(0);
    righty.assign(0);
  }

  typedef boost::array<int32_t, 50>  _x_type;
  boost::array<int32_t, 50>  x;

  typedef boost::array<int32_t, 50>  _y_type;
  boost::array<int32_t, 50>  y;

  typedef boost::array<int32_t, 50>  _leftx_type;
  boost::array<int32_t, 50>  leftx;

  typedef boost::array<int32_t, 50>  _lefty_type;
  boost::array<int32_t, 50>  lefty;

  typedef boost::array<int32_t, 50>  _rightx_type;
  boost::array<int32_t, 50>  rightx;

  typedef boost::array<int32_t, 50>  _righty_type;
  boost::array<int32_t, 50>  righty;

  typedef int32_t _pointnum_type;
  int32_t pointnum;

  typedef int32_t _startindex_type;
  int32_t startindex;

  typedef int32_t _endindex_type;
  int32_t endindex;

  typedef int32_t _selectindex_type;
  int32_t selectindex;


  typedef boost::shared_ptr< ::autonavigation::TrackerPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::TrackerPath_<ContainerAllocator>  const> ConstPtr;
}; // struct TrackerPath
typedef  ::autonavigation::TrackerPath_<std::allocator<void> > TrackerPath;

typedef boost::shared_ptr< ::autonavigation::TrackerPath> TrackerPathPtr;
typedef boost::shared_ptr< ::autonavigation::TrackerPath const> TrackerPathConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::TrackerPath_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::TrackerPath_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::TrackerPath_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::TrackerPath_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::TrackerPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89158e0ae4bb1d51fd9a992783240c5c";
  }

  static const char* value(const  ::autonavigation::TrackerPath_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x89158e0ae4bb1d51ULL;
  static const uint64_t static_value2 = 0xfd9a992783240c5cULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::TrackerPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/TrackerPath";
  }

  static const char* value(const  ::autonavigation::TrackerPath_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::TrackerPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[50] x\n\
int32[50] y\n\
int32[50] leftx\n\
int32[50] lefty\n\
int32[50] rightx\n\
int32[50] righty\n\
int32       pointnum\n\
int32       startindex\n\
int32       endindex\n\
int32       selectindex\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::TrackerPath_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::TrackerPath_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::TrackerPath_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.leftx);
    stream.next(m.lefty);
    stream.next(m.rightx);
    stream.next(m.righty);
    stream.next(m.pointnum);
    stream.next(m.startindex);
    stream.next(m.endindex);
    stream.next(m.selectindex);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrackerPath_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::TrackerPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::TrackerPath_<ContainerAllocator> & v) 
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "leftx[]" << std::endl;
    for (size_t i = 0; i < v.leftx.size(); ++i)
    {
      s << indent << "  leftx[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.leftx[i]);
    }
    s << indent << "lefty[]" << std::endl;
    for (size_t i = 0; i < v.lefty.size(); ++i)
    {
      s << indent << "  lefty[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.lefty[i]);
    }
    s << indent << "rightx[]" << std::endl;
    for (size_t i = 0; i < v.rightx.size(); ++i)
    {
      s << indent << "  rightx[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rightx[i]);
    }
    s << indent << "righty[]" << std::endl;
    for (size_t i = 0; i < v.righty.size(); ++i)
    {
      s << indent << "  righty[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.righty[i]);
    }
    s << indent << "pointnum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pointnum);
    s << indent << "startindex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.startindex);
    s << indent << "endindex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.endindex);
    s << indent << "selectindex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.selectindex);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_TRACKERPATH_H


/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/IFVData.msg */
#ifndef AUTONAVIGATION_MESSAGE_IFVDATA_H
#define AUTONAVIGATION_MESSAGE_IFVDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "autonavigation/LocalPose.h"
#include "autonavigation/GpsPosition.h"
#include "autonavigation/VisObs.h"

namespace autonavigation
{
template <class ContainerAllocator>
struct IFVData_ {
  typedef IFVData_<ContainerAllocator> Type;

  IFVData_()
  : head()
  , localPose()
  , gpsPos()
  , LKA_LANE_OFFSET_LEFT(0.0)
  , LKA_LANE_DET_CONFIDENCE_LEFT(0)
  , LKA_LANE_BOUNDARY_TYPE_LEFT(0)
  , LKA_LEFT_MODEL_DEGREE(0)
  , LKA_CURVATURE_LEFT(0.0)
  , LKA_CURVATURE_DERIVATIVE_LEFT(0.0)
  , LKA_HEADING_ANGLE_LEFT(0.0)
  , LKA_YELLOW_LANE_MARKER_LEFT(0)
  , LKA_VIEW_RANGE_LEFT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_LEFT(0)
  , LKA_LANE_OFFSET_RIGHT(0.0)
  , LKA_LANE_DET_CONFIDENCE_RIGHT(0)
  , LKA_LANE_BOUNDARY_TYPE_RIGHT(0)
  , LKA_RIGHT_MODEL_DEGREE(0)
  , LKA_CURVATURE_RIGHT(0.0)
  , LKA_CURVATURE_DERIVATIVE_RIGHT(0.0)
  , LKA_HEADING_ANGLE_RIGHT(0.0)
  , LKA_YELLOW_LANE_MARKER_RIGHT(0)
  , LKA_VIEW_RANGE_RIGHT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_RIGHT(0)
  , LKA_LANE_OFFSET_NEXT_LEFT(0.0)
  , LKA_LANE_DET_CONFIDENCE_NEXT_LEFT(0)
  , LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT(0)
  , LKA_NEXT_LEFT_MODEL_DEGREE(0)
  , LKA_CURVATURE_NEXT_LEFT(0.0)
  , LKA_CURVATURE_DERIVATIVE_NEXT_LEFT(0.0)
  , LKA_HEADING_ANGLE_NEXT_LEFT(0.0)
  , LKA_YELLOW_LANE_MARKER_NEXT_LEFT(0)
  , LKA_VIEW_RANGE_NEXT_LEFT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT(0)
  , LKA_LANE_OFFSET_NEXT_RIGHT(0.0)
  , LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT(0)
  , LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT(0)
  , LKA_NEXT_RIGHT_MODEL_DEGREE(0)
  , LKA_CURVATURE_NEXT_RIGHT(0.0)
  , LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT(0.0)
  , LKA_HEADING_ANGLE_NEXT_RIGHT(0.0)
  , LKA_YELLOW_LANE_MARKER_NEXT_RIGHT(0)
  , LKA_VIEW_RANGE_NEXT_RIGHT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT(0)
  , CAN_NO_OF_VIS_OBS_OUTPUT(0)
  , CAN_VIS_OBS()
  {
  }

  IFVData_(const ContainerAllocator& _alloc)
  : head(_alloc)
  , localPose(_alloc)
  , gpsPos(_alloc)
  , LKA_LANE_OFFSET_LEFT(0.0)
  , LKA_LANE_DET_CONFIDENCE_LEFT(0)
  , LKA_LANE_BOUNDARY_TYPE_LEFT(0)
  , LKA_LEFT_MODEL_DEGREE(0)
  , LKA_CURVATURE_LEFT(0.0)
  , LKA_CURVATURE_DERIVATIVE_LEFT(0.0)
  , LKA_HEADING_ANGLE_LEFT(0.0)
  , LKA_YELLOW_LANE_MARKER_LEFT(0)
  , LKA_VIEW_RANGE_LEFT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_LEFT(0)
  , LKA_LANE_OFFSET_RIGHT(0.0)
  , LKA_LANE_DET_CONFIDENCE_RIGHT(0)
  , LKA_LANE_BOUNDARY_TYPE_RIGHT(0)
  , LKA_RIGHT_MODEL_DEGREE(0)
  , LKA_CURVATURE_RIGHT(0.0)
  , LKA_CURVATURE_DERIVATIVE_RIGHT(0.0)
  , LKA_HEADING_ANGLE_RIGHT(0.0)
  , LKA_YELLOW_LANE_MARKER_RIGHT(0)
  , LKA_VIEW_RANGE_RIGHT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_RIGHT(0)
  , LKA_LANE_OFFSET_NEXT_LEFT(0.0)
  , LKA_LANE_DET_CONFIDENCE_NEXT_LEFT(0)
  , LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT(0)
  , LKA_NEXT_LEFT_MODEL_DEGREE(0)
  , LKA_CURVATURE_NEXT_LEFT(0.0)
  , LKA_CURVATURE_DERIVATIVE_NEXT_LEFT(0.0)
  , LKA_HEADING_ANGLE_NEXT_LEFT(0.0)
  , LKA_YELLOW_LANE_MARKER_NEXT_LEFT(0)
  , LKA_VIEW_RANGE_NEXT_LEFT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT(0)
  , LKA_LANE_OFFSET_NEXT_RIGHT(0.0)
  , LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT(0)
  , LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT(0)
  , LKA_NEXT_RIGHT_MODEL_DEGREE(0)
  , LKA_CURVATURE_NEXT_RIGHT(0.0)
  , LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT(0.0)
  , LKA_HEADING_ANGLE_NEXT_RIGHT(0.0)
  , LKA_YELLOW_LANE_MARKER_NEXT_RIGHT(0)
  , LKA_VIEW_RANGE_NEXT_RIGHT(0.0)
  , LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT(0)
  , CAN_NO_OF_VIS_OBS_OUTPUT(0)
  , CAN_VIS_OBS(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _head_type;
   ::std_msgs::Header_<ContainerAllocator>  head;

  typedef  ::autonavigation::LocalPose_<ContainerAllocator>  _localPose_type;
   ::autonavigation::LocalPose_<ContainerAllocator>  localPose;

  typedef  ::autonavigation::GpsPosition_<ContainerAllocator>  _gpsPos_type;
   ::autonavigation::GpsPosition_<ContainerAllocator>  gpsPos;

  typedef float _LKA_LANE_OFFSET_LEFT_type;
  float LKA_LANE_OFFSET_LEFT;

  typedef int8_t _LKA_LANE_DET_CONFIDENCE_LEFT_type;
  int8_t LKA_LANE_DET_CONFIDENCE_LEFT;

  typedef uint8_t _LKA_LANE_BOUNDARY_TYPE_LEFT_type;
  uint8_t LKA_LANE_BOUNDARY_TYPE_LEFT;

  typedef int8_t _LKA_LEFT_MODEL_DEGREE_type;
  int8_t LKA_LEFT_MODEL_DEGREE;

  typedef float _LKA_CURVATURE_LEFT_type;
  float LKA_CURVATURE_LEFT;

  typedef double _LKA_CURVATURE_DERIVATIVE_LEFT_type;
  double LKA_CURVATURE_DERIVATIVE_LEFT;

  typedef float _LKA_HEADING_ANGLE_LEFT_type;
  float LKA_HEADING_ANGLE_LEFT;

  typedef uint8_t _LKA_YELLOW_LANE_MARKER_LEFT_type;
  uint8_t LKA_YELLOW_LANE_MARKER_LEFT;

  typedef float _LKA_VIEW_RANGE_LEFT_type;
  float LKA_VIEW_RANGE_LEFT;

  typedef uint8_t _LKA_VIEW_RANGE_AVAILABILITY_LEFT_type;
  uint8_t LKA_VIEW_RANGE_AVAILABILITY_LEFT;

  typedef float _LKA_LANE_OFFSET_RIGHT_type;
  float LKA_LANE_OFFSET_RIGHT;

  typedef int8_t _LKA_LANE_DET_CONFIDENCE_RIGHT_type;
  int8_t LKA_LANE_DET_CONFIDENCE_RIGHT;

  typedef uint8_t _LKA_LANE_BOUNDARY_TYPE_RIGHT_type;
  uint8_t LKA_LANE_BOUNDARY_TYPE_RIGHT;

  typedef int8_t _LKA_RIGHT_MODEL_DEGREE_type;
  int8_t LKA_RIGHT_MODEL_DEGREE;

  typedef float _LKA_CURVATURE_RIGHT_type;
  float LKA_CURVATURE_RIGHT;

  typedef double _LKA_CURVATURE_DERIVATIVE_RIGHT_type;
  double LKA_CURVATURE_DERIVATIVE_RIGHT;

  typedef float _LKA_HEADING_ANGLE_RIGHT_type;
  float LKA_HEADING_ANGLE_RIGHT;

  typedef uint8_t _LKA_YELLOW_LANE_MARKER_RIGHT_type;
  uint8_t LKA_YELLOW_LANE_MARKER_RIGHT;

  typedef float _LKA_VIEW_RANGE_RIGHT_type;
  float LKA_VIEW_RANGE_RIGHT;

  typedef uint8_t _LKA_VIEW_RANGE_AVAILABILITY_RIGHT_type;
  uint8_t LKA_VIEW_RANGE_AVAILABILITY_RIGHT;

  typedef float _LKA_LANE_OFFSET_NEXT_LEFT_type;
  float LKA_LANE_OFFSET_NEXT_LEFT;

  typedef int8_t _LKA_LANE_DET_CONFIDENCE_NEXT_LEFT_type;
  int8_t LKA_LANE_DET_CONFIDENCE_NEXT_LEFT;

  typedef uint8_t _LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT_type;
  uint8_t LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT;

  typedef int8_t _LKA_NEXT_LEFT_MODEL_DEGREE_type;
  int8_t LKA_NEXT_LEFT_MODEL_DEGREE;

  typedef float _LKA_CURVATURE_NEXT_LEFT_type;
  float LKA_CURVATURE_NEXT_LEFT;

  typedef double _LKA_CURVATURE_DERIVATIVE_NEXT_LEFT_type;
  double LKA_CURVATURE_DERIVATIVE_NEXT_LEFT;

  typedef float _LKA_HEADING_ANGLE_NEXT_LEFT_type;
  float LKA_HEADING_ANGLE_NEXT_LEFT;

  typedef uint8_t _LKA_YELLOW_LANE_MARKER_NEXT_LEFT_type;
  uint8_t LKA_YELLOW_LANE_MARKER_NEXT_LEFT;

  typedef float _LKA_VIEW_RANGE_NEXT_LEFT_type;
  float LKA_VIEW_RANGE_NEXT_LEFT;

  typedef uint8_t _LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT_type;
  uint8_t LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT;

  typedef float _LKA_LANE_OFFSET_NEXT_RIGHT_type;
  float LKA_LANE_OFFSET_NEXT_RIGHT;

  typedef int8_t _LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT_type;
  int8_t LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT;

  typedef uint8_t _LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT_type;
  uint8_t LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT;

  typedef int8_t _LKA_NEXT_RIGHT_MODEL_DEGREE_type;
  int8_t LKA_NEXT_RIGHT_MODEL_DEGREE;

  typedef float _LKA_CURVATURE_NEXT_RIGHT_type;
  float LKA_CURVATURE_NEXT_RIGHT;

  typedef double _LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT_type;
  double LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT;

  typedef float _LKA_HEADING_ANGLE_NEXT_RIGHT_type;
  float LKA_HEADING_ANGLE_NEXT_RIGHT;

  typedef uint8_t _LKA_YELLOW_LANE_MARKER_NEXT_RIGHT_type;
  uint8_t LKA_YELLOW_LANE_MARKER_NEXT_RIGHT;

  typedef float _LKA_VIEW_RANGE_NEXT_RIGHT_type;
  float LKA_VIEW_RANGE_NEXT_RIGHT;

  typedef uint8_t _LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT_type;
  uint8_t LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT;

  typedef uint8_t _CAN_NO_OF_VIS_OBS_OUTPUT_type;
  uint8_t CAN_NO_OF_VIS_OBS_OUTPUT;

  typedef std::vector< ::autonavigation::VisObs_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::VisObs_<ContainerAllocator> >::other >  _CAN_VIS_OBS_type;
  std::vector< ::autonavigation::VisObs_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::VisObs_<ContainerAllocator> >::other >  CAN_VIS_OBS;


  typedef boost::shared_ptr< ::autonavigation::IFVData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::IFVData_<ContainerAllocator>  const> ConstPtr;
}; // struct IFVData
typedef  ::autonavigation::IFVData_<std::allocator<void> > IFVData;

typedef boost::shared_ptr< ::autonavigation::IFVData> IFVDataPtr;
typedef boost::shared_ptr< ::autonavigation::IFVData const> IFVDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::IFVData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::IFVData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::IFVData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::IFVData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::IFVData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e582aced99348ba7bbdf747ed5cb5dab";
  }

  static const char* value(const  ::autonavigation::IFVData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe582aced99348ba7ULL;
  static const uint64_t static_value2 = 0xbbdf747ed5cb5dabULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::IFVData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/IFVData";
  }

  static const char* value(const  ::autonavigation::IFVData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::IFVData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header      head\n\
LocalPose   localPose\n\
GpsPosition gpsPos\n\
\n\
\n\
#左车道线\n\
float32     LKA_LANE_OFFSET_LEFT                 #LNTRK_HOST_STATE_MSG_1::CAN_LANE_OFFSET_LEFT\n\
int8        LKA_LANE_DET_CONFIDENCE_LEFT         #LNTRK_HOST_STATE_MSG_1::CAN_LANE_DET_CONFIDENCE_LEFT\n\
uint8       LKA_LANE_BOUNDARY_TYPE_LEFT          #LNTRK_HOST_STATE_MSG_2::CAN_LANE_BOUNDARY_TYPE_LEFT\n\
int8        LKA_LEFT_MODEL_DEGREE                #LNTRK_HOST_STATE_MSG_2::CAN_LKA_LEFT_MODEL_DEGREE\n\
float32     LKA_CURVATURE_LEFT                   #VFP_LKA_LANE_LEFT::CAN_LKA_CURVATURE_LEFT\n\
float64     LKA_CURVATURE_DERIVATIVE_LEFT        #VFP_LKA_LANE_LEFT::CAN_LKA_CURVATURE_DERIVATIVE_LEFT\n\
float32     LKA_HEADING_ANGLE_LEFT               #VFP_LKA_LANE_LEFT::CAN_LKA_HEADING_ANGLE_LEFT\n\
uint8       LKA_YELLOW_LANE_MARKER_LEFT          #VFP_LKA_LANE_LEFT::CAN_LKA_YELLOW_LANE_MARKER_LEFT\n\
float32     LKA_VIEW_RANGE_LEFT                  #VFP_LKA_LANE_LEFT::CAN_LKA_VIEW_RANGE_LEFT\n\
uint8       LKA_VIEW_RANGE_AVAILABILITY_LEFT     #VFP_LKA_LANE_LEFT::CAN_LKA_VIEW_RANGE_AVAILABILITY_LEFT\n\
\n\
#右车道线\n\
float32     LKA_LANE_OFFSET_RIGHT                #LNTRK_HOST_STATE_MSG_1::CAN_LANE_OFFSET_RIGHT\n\
int8        LKA_LANE_DET_CONFIDENCE_RIGHT        #LNTRK_HOST_STATE_MSG_1::CAN_LANE_DET_CONFIDENCE_RIGHT\n\
uint8       LKA_LANE_BOUNDARY_TYPE_RIGHT         #LNTRK_HOST_STATE_MSG_2::CAN_LANE_BOUNDARY_TYPE_RIGHT\n\
int8        LKA_RIGHT_MODEL_DEGREE               #LNTRK_HOST_STATE_MSG_2::CAN_LKA_RIGHT_MODEL_DEGREE\n\
float32     LKA_CURVATURE_RIGHT                  #VFP_LKA_LANE_RIGHT::CAN_LKA_CURVATURE_RIGHT\n\
float64     LKA_CURVATURE_DERIVATIVE_RIGHT       #VFP_LKA_LANE_RIGHT::CAN_LKA_CURVATURE_DERIVATIVE_RIGHT\n\
float32     LKA_HEADING_ANGLE_RIGHT              #VFP_LKA_LANE_RIGHT::CAN_LKA_HEADING_ANGLE_RIGHT\n\
uint8       LKA_YELLOW_LANE_MARKER_RIGHT         #VFP_LKA_LANE_RIGHT::CAN_LKA_YELLOW_LANE_MARKER_RIGHT\n\
float32     LKA_VIEW_RANGE_RIGHT                 #VFP_LKA_LANE_RIGHT::CAN_LKA_VIEW_RANGE_RIGHT\n\
uint8       LKA_VIEW_RANGE_AVAILABILITY_RIGHT    #VFP_LKA_LANE_RIGHT::CAN_LKA_VIEW_RANGE_AVAILABILITY_RIGHT\n\
\n\
#左车道线2\n\
float32     LKA_LANE_OFFSET_NEXT_LEFT\n\
int8        LKA_LANE_DET_CONFIDENCE_NEXT_LEFT\n\
uint8       LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT\n\
int8        LKA_NEXT_LEFT_MODEL_DEGREE\n\
float32     LKA_CURVATURE_NEXT_LEFT\n\
float64     LKA_CURVATURE_DERIVATIVE_NEXT_LEFT\n\
float32     LKA_HEADING_ANGLE_NEXT_LEFT\n\
uint8       LKA_YELLOW_LANE_MARKER_NEXT_LEFT\n\
float32     LKA_VIEW_RANGE_NEXT_LEFT\n\
uint8       LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT\n\
\n\
#右车道线2\n\
float32     LKA_LANE_OFFSET_NEXT_RIGHT\n\
int8        LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT\n\
uint8       LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT\n\
int8        LKA_NEXT_RIGHT_MODEL_DEGREE\n\
float32     LKA_CURVATURE_NEXT_RIGHT\n\
float64     LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT\n\
float32     LKA_HEADING_ANGLE_NEXT_RIGHT\n\
uint8       LKA_YELLOW_LANE_MARKER_NEXT_RIGHT\n\
float32     LKA_VIEW_RANGE_NEXT_RIGHT\n\
uint8       LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT\n\
\n\
\n\
#物体\n\
uint8       CAN_NO_OF_VIS_OBS_OUTPUT             #VFP_SYS_STATUS_MSG2::CAN_NO_OF_VIS_OBS_OUTPUT\n\
VisObs[]    CAN_VIS_OBS\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: autonavigation/LocalPose\n\
#LocalPose msg\n\
\n\
float64 time			  \n\
#centimeter  \n\
int32 dr_x\n\
int32 dr_y\n\
int32 dr_z\n\
#0.01degree\n\
int32 dr_heading\n\
int32 dr_roll\n\
int32 dr_pitch		    \n\
\n\
#left_front wheel speed,cm/s\n\
int32 lf_speed\n\
#right_front wheel speed,cm/s		    \n\
int32 rf_speed\n\
#left_rear wheel speed,cm/s		    \n\
int32 lr_speed\n\
#right_rear wheel speed,cm/s		    \n\
int32 rr_speed		    \n\
\n\
#imu三轴陀螺速度 0.01degree/s\n\
int32 rot_x\n\
int32 rot_y                      \n\
int32 rot_z                      \n\
#imu三轴加速度  0.01m/s^2\n\
int32 acc_x                      \n\
int32 acc_y                      \n\
int32 acc_z                      \n\
\n\
int32 batteryState\n\
int32 batteryEnergy           #0-100\n\
\n\
#-3000(right)~3000(left) degree  0.01degree/s\n\
int32 steer   \n\
#0(zero)~100(full)                  \n\
int32 brake                 \n\
#0(zero)~100(full)     \n\
int32 fuel      \n\
#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3                 \n\
int8  trans                      \n\
int8  VehicleState\n\
#DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2\n\
int8  mode                       \n\
#dr运行状态\n\
int8 drStatus\n\
#错误状态		    \n\
int8 errorStatus		    \n\
int8 emergency_flag\n\
int8 hardswitch_on\n\
\n\
\n\
================================================================================\n\
MSG: autonavigation/GpsPosition\n\
#gps info is updated\n\
char          gps_flag               \n\
uint32        gps_week\n\
#millisecond in a week\n\
float64       gps_millisecond   \n\
#经纬度，单位为度     \n\
float64	      longitude		      \n\
float64	      laltitude\n\
#高斯投影位置,cm\n\
float64	      gaussX		      \n\
float64       gaussY\n\
#height,     cm\n\
float64         height  \n\
#欧拉角，单位为0.01度                \n\
int32         pitch                   \n\
int32         roll\n\
#欧拉角，单位为0.01度,向东为零度，逆时针0-360                    \n\
int32         azimuth                 \n\
\n\
#north速度，单位为cm/s\n\
int32         northVelocity           \n\
int32         eastVelocity\n\
int32         upVelocity\n\
#系统运行状态\n\
int32         positionStatus	      \n\
\n\
#imu三轴陀螺速度 0.01degree/s\n\
int32	        rot_x                      \n\
int32           rot_y                      \n\
int32           rot_z                      \n\
\n\
#imu三轴加速度  0.01m/s^2\n\
int32           acc_x                      \n\
int32           acc_y                      \n\
int32           acc_z                      \n\
	\n\
\n\
================================================================================\n\
MSG: autonavigation/VisObs\n\
#VISION_OBSTACLE_MSG1\n\
uint8            CAN_VIS_OBS_COUNT\n\
float32          CAN_VIS_OBS_ANGLE_RATE\n\
float32          CAN_VIS_OBS_ANGLE_CENTROID\n\
float32          CAN_VIS_OBS_RANGE_RATE\n\
float32          CAN_VIS_OBS_RANGE \n\
float32          CAN_VIS_OBS_LATERAL_RATE\n\
\n\
#VISION_OBSTACLE_MSG2\n\
int8             CAN_VIS_OBS_MANEUVER_STATE\n\
uint8            CAN_VIS_OBS_DETECTION_STATUS\n\
uint8            CAN_VIS_OBS_MOTION_TYPE\n\
uint8            CAN_VIS_OBS_CROSSING_STATUS\n\
uint8            CAN_VIS_OBS_ID\n\
uint8            CAN_VIS_OBS_LOW_CONFIDENCE\n\
int8             CAN_VIS_OBS_LANE_NUMBER\n\
uint8            CAN_VIS_OBS_TURN_INDICATOR\n\
uint8            CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR\n\
uint8            CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF\n\
uint8            CAN_VIS_OBS_OBJECT_IN_PATH\n\
uint8            CAN_VIS_OBS_HIGH_DECELERATION\n\
uint8            CAN_VIS_OBS_FCW_STATUS\n\
float32          CAN_VIS_OBS_TTC_WITHOUT_ACC\n\
uint8            CAN_VIS_OBS_ME_AWS\n\
uint8            CAN_VIS_OBS_CIPO\n\
float32          CAN_VIS_OBS_TTC_WITH_ACC\n\
float32          CAN_VIS_OBS_TTC_WITH_ACC_CONF\n\
uint8            CAN_VIS_OBS_CLASSIFICATION\n\
\n\
#VISION_OBSTACLE_MSG3\n\
uint8            CAN_RADAR_TARGET_MATCH_COASTED\n\
float32          CAN_VIS_OBS_VISION_RANGE\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_1\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_2\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_3\n\
uint8            CAN_RADAR_TARGET_MATCH_INDEX_4\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_1\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_2\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_3\n\
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_4\n\
float32          CAN_VIS_OBS_WIDTH\n\
\n\
\n\
#VISION_OBSTACLE_MSG4\n\
float32          CAN_VIS_OBS_VISION_ANGLE_RATE\n\
float32          CAN_VIS_OBS_VISION_ANGLE_CENTROID\n\
float32          CAN_VIS_OBS_VISION_RANGE_RATE\n\
float32          CAN_VIS_OBS_VISION_LATERAL_RATE\n\
float32          CAN_VIS_OBS_VISION_WIDTH\n\
\n\
#VISION_OBSTACLE_MSG5\n\
float32          CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST\n\
float32          CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST\n\
float32          CAN_VIS_OBS_RANGE_FUNC_ACT_EST\n\
uint8            CAN_VIS_OBS_FCW_CALC_STATUS\n\
float32          CAN_VIS_OBS_PREDICTED_TTC\n\
float32          CAN_VIS_OBS_PREDICTED_LAT_POS\n\
uint8            CAN_OBJECT_HIGH_DECEL_FLAG\n\
uint8            CAN_VIS_HALF_BODY_DETECTION_FLAG\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::IFVData_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::IFVData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.head);
    stream.next(m.localPose);
    stream.next(m.gpsPos);
    stream.next(m.LKA_LANE_OFFSET_LEFT);
    stream.next(m.LKA_LANE_DET_CONFIDENCE_LEFT);
    stream.next(m.LKA_LANE_BOUNDARY_TYPE_LEFT);
    stream.next(m.LKA_LEFT_MODEL_DEGREE);
    stream.next(m.LKA_CURVATURE_LEFT);
    stream.next(m.LKA_CURVATURE_DERIVATIVE_LEFT);
    stream.next(m.LKA_HEADING_ANGLE_LEFT);
    stream.next(m.LKA_YELLOW_LANE_MARKER_LEFT);
    stream.next(m.LKA_VIEW_RANGE_LEFT);
    stream.next(m.LKA_VIEW_RANGE_AVAILABILITY_LEFT);
    stream.next(m.LKA_LANE_OFFSET_RIGHT);
    stream.next(m.LKA_LANE_DET_CONFIDENCE_RIGHT);
    stream.next(m.LKA_LANE_BOUNDARY_TYPE_RIGHT);
    stream.next(m.LKA_RIGHT_MODEL_DEGREE);
    stream.next(m.LKA_CURVATURE_RIGHT);
    stream.next(m.LKA_CURVATURE_DERIVATIVE_RIGHT);
    stream.next(m.LKA_HEADING_ANGLE_RIGHT);
    stream.next(m.LKA_YELLOW_LANE_MARKER_RIGHT);
    stream.next(m.LKA_VIEW_RANGE_RIGHT);
    stream.next(m.LKA_VIEW_RANGE_AVAILABILITY_RIGHT);
    stream.next(m.LKA_LANE_OFFSET_NEXT_LEFT);
    stream.next(m.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT);
    stream.next(m.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT);
    stream.next(m.LKA_NEXT_LEFT_MODEL_DEGREE);
    stream.next(m.LKA_CURVATURE_NEXT_LEFT);
    stream.next(m.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT);
    stream.next(m.LKA_HEADING_ANGLE_NEXT_LEFT);
    stream.next(m.LKA_YELLOW_LANE_MARKER_NEXT_LEFT);
    stream.next(m.LKA_VIEW_RANGE_NEXT_LEFT);
    stream.next(m.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT);
    stream.next(m.LKA_LANE_OFFSET_NEXT_RIGHT);
    stream.next(m.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT);
    stream.next(m.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT);
    stream.next(m.LKA_NEXT_RIGHT_MODEL_DEGREE);
    stream.next(m.LKA_CURVATURE_NEXT_RIGHT);
    stream.next(m.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT);
    stream.next(m.LKA_HEADING_ANGLE_NEXT_RIGHT);
    stream.next(m.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT);
    stream.next(m.LKA_VIEW_RANGE_NEXT_RIGHT);
    stream.next(m.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT);
    stream.next(m.CAN_NO_OF_VIS_OBS_OUTPUT);
    stream.next(m.CAN_VIS_OBS);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IFVData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::IFVData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::IFVData_<ContainerAllocator> & v) 
  {
    s << indent << "head: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.head);
    s << indent << "localPose: ";
s << std::endl;
    Printer< ::autonavigation::LocalPose_<ContainerAllocator> >::stream(s, indent + "  ", v.localPose);
    s << indent << "gpsPos: ";
s << std::endl;
    Printer< ::autonavigation::GpsPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsPos);
    s << indent << "LKA_LANE_OFFSET_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_LANE_OFFSET_LEFT);
    s << indent << "LKA_LANE_DET_CONFIDENCE_LEFT: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_LANE_DET_CONFIDENCE_LEFT);
    s << indent << "LKA_LANE_BOUNDARY_TYPE_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_LANE_BOUNDARY_TYPE_LEFT);
    s << indent << "LKA_LEFT_MODEL_DEGREE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_LEFT_MODEL_DEGREE);
    s << indent << "LKA_CURVATURE_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_CURVATURE_LEFT);
    s << indent << "LKA_CURVATURE_DERIVATIVE_LEFT: ";
    Printer<double>::stream(s, indent + "  ", v.LKA_CURVATURE_DERIVATIVE_LEFT);
    s << indent << "LKA_HEADING_ANGLE_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_HEADING_ANGLE_LEFT);
    s << indent << "LKA_YELLOW_LANE_MARKER_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_YELLOW_LANE_MARKER_LEFT);
    s << indent << "LKA_VIEW_RANGE_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_LEFT);
    s << indent << "LKA_VIEW_RANGE_AVAILABILITY_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_AVAILABILITY_LEFT);
    s << indent << "LKA_LANE_OFFSET_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_LANE_OFFSET_RIGHT);
    s << indent << "LKA_LANE_DET_CONFIDENCE_RIGHT: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_LANE_DET_CONFIDENCE_RIGHT);
    s << indent << "LKA_LANE_BOUNDARY_TYPE_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_LANE_BOUNDARY_TYPE_RIGHT);
    s << indent << "LKA_RIGHT_MODEL_DEGREE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_RIGHT_MODEL_DEGREE);
    s << indent << "LKA_CURVATURE_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_CURVATURE_RIGHT);
    s << indent << "LKA_CURVATURE_DERIVATIVE_RIGHT: ";
    Printer<double>::stream(s, indent + "  ", v.LKA_CURVATURE_DERIVATIVE_RIGHT);
    s << indent << "LKA_HEADING_ANGLE_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_HEADING_ANGLE_RIGHT);
    s << indent << "LKA_YELLOW_LANE_MARKER_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_YELLOW_LANE_MARKER_RIGHT);
    s << indent << "LKA_VIEW_RANGE_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_RIGHT);
    s << indent << "LKA_VIEW_RANGE_AVAILABILITY_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_AVAILABILITY_RIGHT);
    s << indent << "LKA_LANE_OFFSET_NEXT_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_LANE_OFFSET_NEXT_LEFT);
    s << indent << "LKA_LANE_DET_CONFIDENCE_NEXT_LEFT: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT);
    s << indent << "LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT);
    s << indent << "LKA_NEXT_LEFT_MODEL_DEGREE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_NEXT_LEFT_MODEL_DEGREE);
    s << indent << "LKA_CURVATURE_NEXT_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_CURVATURE_NEXT_LEFT);
    s << indent << "LKA_CURVATURE_DERIVATIVE_NEXT_LEFT: ";
    Printer<double>::stream(s, indent + "  ", v.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT);
    s << indent << "LKA_HEADING_ANGLE_NEXT_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_HEADING_ANGLE_NEXT_LEFT);
    s << indent << "LKA_YELLOW_LANE_MARKER_NEXT_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_YELLOW_LANE_MARKER_NEXT_LEFT);
    s << indent << "LKA_VIEW_RANGE_NEXT_LEFT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_NEXT_LEFT);
    s << indent << "LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT);
    s << indent << "LKA_LANE_OFFSET_NEXT_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_LANE_OFFSET_NEXT_RIGHT);
    s << indent << "LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT);
    s << indent << "LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT);
    s << indent << "LKA_NEXT_RIGHT_MODEL_DEGREE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LKA_NEXT_RIGHT_MODEL_DEGREE);
    s << indent << "LKA_CURVATURE_NEXT_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_CURVATURE_NEXT_RIGHT);
    s << indent << "LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT: ";
    Printer<double>::stream(s, indent + "  ", v.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT);
    s << indent << "LKA_HEADING_ANGLE_NEXT_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_HEADING_ANGLE_NEXT_RIGHT);
    s << indent << "LKA_YELLOW_LANE_MARKER_NEXT_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT);
    s << indent << "LKA_VIEW_RANGE_NEXT_RIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_NEXT_RIGHT);
    s << indent << "LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT);
    s << indent << "CAN_NO_OF_VIS_OBS_OUTPUT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_NO_OF_VIS_OBS_OUTPUT);
    s << indent << "CAN_VIS_OBS[]" << std::endl;
    for (size_t i = 0; i < v.CAN_VIS_OBS.size(); ++i)
    {
      s << indent << "  CAN_VIS_OBS[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autonavigation::VisObs_<ContainerAllocator> >::stream(s, indent + "    ", v.CAN_VIS_OBS[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_IFVDATA_H


/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/GlobalPoint.msg */
#ifndef AUTONAVIGATION_MESSAGE_GLOBALPOINT_H
#define AUTONAVIGATION_MESSAGE_GLOBALPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct GlobalPoint_ {
  typedef GlobalPoint_<ContainerAllocator> Type;

  GlobalPoint_()
  : x(0.0)
  , y(0.0)
  , envType(0)
  , actType(0)
  , curveRadius(0)
  , maxSpeed(0)
  , slope(0)
  , pointId(0)
  {
  }

  GlobalPoint_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , envType(0)
  , actType(0)
  , curveRadius(0)
  , maxSpeed(0)
  , slope(0)
  , pointId(0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef int32_t _envType_type;
  int32_t envType;

  typedef int32_t _actType_type;
  int32_t actType;

  typedef int32_t _curveRadius_type;
  int32_t curveRadius;

  typedef int32_t _maxSpeed_type;
  int32_t maxSpeed;

  typedef int32_t _slope_type;
  int32_t slope;

  typedef int32_t _pointId_type;
  int32_t pointId;


  typedef boost::shared_ptr< ::autonavigation::GlobalPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::GlobalPoint_<ContainerAllocator>  const> ConstPtr;
}; // struct GlobalPoint
typedef  ::autonavigation::GlobalPoint_<std::allocator<void> > GlobalPoint;

typedef boost::shared_ptr< ::autonavigation::GlobalPoint> GlobalPointPtr;
typedef boost::shared_ptr< ::autonavigation::GlobalPoint const> GlobalPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::GlobalPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::GlobalPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::GlobalPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::GlobalPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::GlobalPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "52ea414ee4525ca16ed4c3da37e048ae";
  }

  static const char* value(const  ::autonavigation::GlobalPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x52ea414ee4525ca1ULL;
  static const uint64_t static_value2 = 0x6ed4c3da37e048aeULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::GlobalPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/GlobalPoint";
  }

  static const char* value(const  ::autonavigation::GlobalPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::GlobalPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "    float64  x\n\
    float64  y\n\
    int32     envType        #环境描述（停止线，斑马线，行人，交通灯类型）\n\
    int32     actType        #车辆行为描述（停车及持续时间，超车，换道）\n\
    int32     curveRadius    #曲率\n\
    int32     maxSpeed       #限速\n\
    int32     slope          #坡度\n\
    int32     pointId        #全局id号\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::GlobalPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::GlobalPoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::GlobalPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.envType);
    stream.next(m.actType);
    stream.next(m.curveRadius);
    stream.next(m.maxSpeed);
    stream.next(m.slope);
    stream.next(m.pointId);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GlobalPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::GlobalPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::GlobalPoint_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "envType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.envType);
    s << indent << "actType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actType);
    s << indent << "curveRadius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curveRadius);
    s << indent << "maxSpeed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.maxSpeed);
    s << indent << "slope: ";
    Printer<int32_t>::stream(s, indent + "  ", v.slope);
    s << indent << "pointId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pointId);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_GLOBALPOINT_H


/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/FarStaticObj.msg */
#ifndef AUTONAVIGATION_MESSAGE_FARSTATICOBJ_H
#define AUTONAVIGATION_MESSAGE_FARSTATICOBJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct FarStaticObj_ {
  typedef FarStaticObj_<ContainerAllocator> Type;

  FarStaticObj_()
  : VertexNumber(0)
  , ConvexX()
  , ConvexY()
  , CenterX(0)
  , CenterY(0)
  {
  }

  FarStaticObj_(const ContainerAllocator& _alloc)
  : VertexNumber(0)
  , ConvexX(_alloc)
  , ConvexY(_alloc)
  , CenterX(0)
  , CenterY(0)
  {
  }

  typedef int32_t _VertexNumber_type;
  int32_t VertexNumber;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ConvexX_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  ConvexX;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ConvexY_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  ConvexY;

  typedef int32_t _CenterX_type;
  int32_t CenterX;

  typedef int32_t _CenterY_type;
  int32_t CenterY;


  typedef boost::shared_ptr< ::autonavigation::FarStaticObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::FarStaticObj_<ContainerAllocator>  const> ConstPtr;
}; // struct FarStaticObj
typedef  ::autonavigation::FarStaticObj_<std::allocator<void> > FarStaticObj;

typedef boost::shared_ptr< ::autonavigation::FarStaticObj> FarStaticObjPtr;
typedef boost::shared_ptr< ::autonavigation::FarStaticObj const> FarStaticObjConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::FarStaticObj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::FarStaticObj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::FarStaticObj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::FarStaticObj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::FarStaticObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "13cd45b11ab8ad4733c742b8974031cc";
  }

  static const char* value(const  ::autonavigation::FarStaticObj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x13cd45b11ab8ad47ULL;
  static const uint64_t static_value2 = 0x33c742b8974031ccULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::FarStaticObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/FarStaticObj";
  }

  static const char* value(const  ::autonavigation::FarStaticObj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::FarStaticObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 VertexNumber\n\
int32[] ConvexX  # do not need many vertex points\n\
int32[] ConvexY\n\
int32 CenterX\n\
int32 CenterY\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::FarStaticObj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::FarStaticObj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.VertexNumber);
    stream.next(m.ConvexX);
    stream.next(m.ConvexY);
    stream.next(m.CenterX);
    stream.next(m.CenterY);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FarStaticObj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::FarStaticObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::FarStaticObj_<ContainerAllocator> & v) 
  {
    s << indent << "VertexNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VertexNumber);
    s << indent << "ConvexX[]" << std::endl;
    for (size_t i = 0; i < v.ConvexX.size(); ++i)
    {
      s << indent << "  ConvexX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConvexX[i]);
    }
    s << indent << "ConvexY[]" << std::endl;
    for (size_t i = 0; i < v.ConvexY.size(); ++i)
    {
      s << indent << "  ConvexY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConvexY[i]);
    }
    s << indent << "CenterX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CenterX);
    s << indent << "CenterY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CenterY);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_FARSTATICOBJ_H


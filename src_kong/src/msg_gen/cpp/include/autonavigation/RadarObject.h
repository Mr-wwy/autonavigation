/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/RadarObject.msg */
#ifndef AUTONAVIGATION_MESSAGE_RADAROBJECT_H
#define AUTONAVIGATION_MESSAGE_RADAROBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct RadarObject_ {
  typedef RadarObject_<ContainerAllocator> Type;

  RadarObject_()
  : Range(0.0)
  , RangeRate(0.0)
  , Angle(0.0)
  , PosX(0.0)
  , PosY(0.0)
  , Speed(0.0)
  , SpeedX(0.0)
  , SpeedY(0.0)
  , Width(0.0)
  , Length(0.0)
  , Used(0)
  , exist(0)
  {
  }

  RadarObject_(const ContainerAllocator& _alloc)
  : Range(0.0)
  , RangeRate(0.0)
  , Angle(0.0)
  , PosX(0.0)
  , PosY(0.0)
  , Speed(0.0)
  , SpeedX(0.0)
  , SpeedY(0.0)
  , Width(0.0)
  , Length(0.0)
  , Used(0)
  , exist(0)
  {
  }

  typedef double _Range_type;
  double Range;

  typedef double _RangeRate_type;
  double RangeRate;

  typedef double _Angle_type;
  double Angle;

  typedef double _PosX_type;
  double PosX;

  typedef double _PosY_type;
  double PosY;

  typedef double _Speed_type;
  double Speed;

  typedef double _SpeedX_type;
  double SpeedX;

  typedef double _SpeedY_type;
  double SpeedY;

  typedef double _Width_type;
  double Width;

  typedef double _Length_type;
  double Length;

  typedef int32_t _Used_type;
  int32_t Used;

  typedef int32_t _exist_type;
  int32_t exist;


  typedef boost::shared_ptr< ::autonavigation::RadarObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::RadarObject_<ContainerAllocator>  const> ConstPtr;
}; // struct RadarObject
typedef  ::autonavigation::RadarObject_<std::allocator<void> > RadarObject;

typedef boost::shared_ptr< ::autonavigation::RadarObject> RadarObjectPtr;
typedef boost::shared_ptr< ::autonavigation::RadarObject const> RadarObjectConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::RadarObject_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::RadarObject_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RadarObject_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RadarObject_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::RadarObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "990f6008a0f1e90d45f985a0d38242f3";
  }

  static const char* value(const  ::autonavigation::RadarObject_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x990f6008a0f1e90dULL;
  static const uint64_t static_value2 = 0x45f985a0d38242f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::RadarObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/RadarObject";
  }

  static const char* value(const  ::autonavigation::RadarObject_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::RadarObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 Range\n\
float64 RangeRate\n\
float64 Angle\n\
float64 PosX\n\
float64 PosY\n\
float64 Speed\n\
float64 SpeedX\n\
float64 SpeedY\n\
float64 Width\n\
float64 Length\n\
int32   Used\n\
int32   exist\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::RadarObject_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::RadarObject_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::RadarObject_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Range);
    stream.next(m.RangeRate);
    stream.next(m.Angle);
    stream.next(m.PosX);
    stream.next(m.PosY);
    stream.next(m.Speed);
    stream.next(m.SpeedX);
    stream.next(m.SpeedY);
    stream.next(m.Width);
    stream.next(m.Length);
    stream.next(m.Used);
    stream.next(m.exist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RadarObject_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::RadarObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::RadarObject_<ContainerAllocator> & v) 
  {
    s << indent << "Range: ";
    Printer<double>::stream(s, indent + "  ", v.Range);
    s << indent << "RangeRate: ";
    Printer<double>::stream(s, indent + "  ", v.RangeRate);
    s << indent << "Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Angle);
    s << indent << "PosX: ";
    Printer<double>::stream(s, indent + "  ", v.PosX);
    s << indent << "PosY: ";
    Printer<double>::stream(s, indent + "  ", v.PosY);
    s << indent << "Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Speed);
    s << indent << "SpeedX: ";
    Printer<double>::stream(s, indent + "  ", v.SpeedX);
    s << indent << "SpeedY: ";
    Printer<double>::stream(s, indent + "  ", v.SpeedY);
    s << indent << "Width: ";
    Printer<double>::stream(s, indent + "  ", v.Width);
    s << indent << "Length: ";
    Printer<double>::stream(s, indent + "  ", v.Length);
    s << indent << "Used: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Used);
    s << indent << "exist: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_RADAROBJECT_H


/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/ControlCommand.msg */
#ifndef AUTONAVIGATION_MESSAGE_CONTROLCOMMAND_H
#define AUTONAVIGATION_MESSAGE_CONTROLCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct ControlCommand_ {
  typedef ControlCommand_<ContainerAllocator> Type;

  ControlCommand_()
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , cmd_millisecond(0)
  , cmd_steer(0)
  , cmd_velocity(0)
  , cmd_curvature(0)
  , cmd_force_start(0)
  , cmd_task_mode(0)
  , cmd_hand_brake(0)
  , cmd_throttle(0)
  , cmd_brake(0)
  , cmd_shift(0)
  , cmd_ignition(0)
  , cmd_light(0)
  , cmd_reset(0)
  , cmd_reserve2(0)
  , cmd_reserve3(0)
  {
  }

  ControlCommand_(const ContainerAllocator& _alloc)
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , cmd_millisecond(0)
  , cmd_steer(0)
  , cmd_velocity(0)
  , cmd_curvature(0)
  , cmd_force_start(0)
  , cmd_task_mode(0)
  , cmd_hand_brake(0)
  , cmd_throttle(0)
  , cmd_brake(0)
  , cmd_shift(0)
  , cmd_ignition(0)
  , cmd_light(0)
  , cmd_reset(0)
  , cmd_reserve2(0)
  , cmd_reserve3(0)
  {
  }

  typedef uint32_t _unique_key_type;
  uint32_t unique_key;

  typedef uint32_t _gps_week_type;
  uint32_t gps_week;

  typedef uint64_t _gps_millisecond_type;
  uint64_t gps_millisecond;

  typedef uint64_t _cmd_millisecond_type;
  uint64_t cmd_millisecond;

  typedef int16_t _cmd_steer_type;
  int16_t cmd_steer;

  typedef uint16_t _cmd_velocity_type;
  uint16_t cmd_velocity;

  typedef int8_t _cmd_curvature_type;
  int8_t cmd_curvature;

  typedef uint8_t _cmd_force_start_type;
  uint8_t cmd_force_start;

  typedef uint8_t _cmd_task_mode_type;
  uint8_t cmd_task_mode;

  typedef uint8_t _cmd_hand_brake_type;
  uint8_t cmd_hand_brake;

  typedef uint8_t _cmd_throttle_type;
  uint8_t cmd_throttle;

  typedef uint8_t _cmd_brake_type;
  uint8_t cmd_brake;

  typedef uint8_t _cmd_shift_type;
  uint8_t cmd_shift;

  typedef uint8_t _cmd_ignition_type;
  uint8_t cmd_ignition;

  typedef uint8_t _cmd_light_type;
  uint8_t cmd_light;

  typedef uint8_t _cmd_reset_type;
  uint8_t cmd_reset;

  typedef uint8_t _cmd_reserve2_type;
  uint8_t cmd_reserve2;

  typedef uint8_t _cmd_reserve3_type;
  uint8_t cmd_reserve3;


  typedef boost::shared_ptr< ::autonavigation::ControlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::ControlCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct ControlCommand
typedef  ::autonavigation::ControlCommand_<std::allocator<void> > ControlCommand;

typedef boost::shared_ptr< ::autonavigation::ControlCommand> ControlCommandPtr;
typedef boost::shared_ptr< ::autonavigation::ControlCommand const> ControlCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::ControlCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::ControlCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::ControlCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::ControlCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::ControlCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb8863d18189796aa503b7d213a2f475";
  }

  static const char* value(const  ::autonavigation::ControlCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb8863d18189796aULL;
  static const uint64_t static_value2 = 0xa503b7d213a2f475ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::ControlCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/ControlCommand";
  }

  static const char* value(const  ::autonavigation::ControlCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::ControlCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#对应结构体Autonavigation_Control_Command\n\
\n\
uint32     unique_key          #自主行驶载车唯一标识，用于区分载车的id\n\
uint32     gps_week            #GPS周\n\
uint64     gps_millisecond     #取GPS周的毫秒级时间\n\
uint64     cmd_millisecond     #T0 时间\n\
int16      cmd_steer           #单位0.01度，前轮转角，左转为正\n\
uint16     cmd_velocity        #期望速度cm/s\n\
int8       cmd_curvature       #单位0.005，期望曲率\n\
uint8      cmd_force_start     #1：强制开始发车\n\
uint8      cmd_task_mode       #任务模式1：遥控模式2：自主模式\n\
uint8      cmd_hand_brake      #0：松开手刹, 1：拉紧手刹\n\
uint8      cmd_throttle        #油门量命令，百分比\n\
uint8      cmd_brake           #刹车量命令，百分比\n\
uint8      cmd_shift           #换档命令\n\
uint8      cmd_ignition        #0：熄火1：点火\n\
uint8      cmd_light           #灯光\n\
uint8      cmd_reset           #复位\n\
uint8      cmd_reserve2        #预留\n\
uint8      cmd_reserve3 \n\
\n\
";
  }

  static const char* value(const  ::autonavigation::ControlCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::ControlCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::ControlCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.unique_key);
    stream.next(m.gps_week);
    stream.next(m.gps_millisecond);
    stream.next(m.cmd_millisecond);
    stream.next(m.cmd_steer);
    stream.next(m.cmd_velocity);
    stream.next(m.cmd_curvature);
    stream.next(m.cmd_force_start);
    stream.next(m.cmd_task_mode);
    stream.next(m.cmd_hand_brake);
    stream.next(m.cmd_throttle);
    stream.next(m.cmd_brake);
    stream.next(m.cmd_shift);
    stream.next(m.cmd_ignition);
    stream.next(m.cmd_light);
    stream.next(m.cmd_reset);
    stream.next(m.cmd_reserve2);
    stream.next(m.cmd_reserve3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::ControlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::ControlCommand_<ContainerAllocator> & v) 
  {
    s << indent << "unique_key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.unique_key);
    s << indent << "gps_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "cmd_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.cmd_millisecond);
    s << indent << "cmd_steer: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cmd_steer);
    s << indent << "cmd_velocity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cmd_velocity);
    s << indent << "cmd_curvature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd_curvature);
    s << indent << "cmd_force_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_force_start);
    s << indent << "cmd_task_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_task_mode);
    s << indent << "cmd_hand_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_hand_brake);
    s << indent << "cmd_throttle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_throttle);
    s << indent << "cmd_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_brake);
    s << indent << "cmd_shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_shift);
    s << indent << "cmd_ignition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_ignition);
    s << indent << "cmd_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_light);
    s << indent << "cmd_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reset);
    s << indent << "cmd_reserve2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reserve2);
    s << indent << "cmd_reserve3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reserve3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_CONTROLCOMMAND_H


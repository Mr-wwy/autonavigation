/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/RemoteCmd.msg */
#ifndef AUTONAVIGATION_MESSAGE_REMOTECMD_H
#define AUTONAVIGATION_MESSAGE_REMOTECMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct RemoteCmd_ {
  typedef RemoteCmd_<ContainerAllocator> Type;

  RemoteCmd_()
  : RemoteMode(0)
  , RemoteSteerEnable(0)
  , RemoteBrakeFuelEnable(0)
  , RemoteSteerAngle(0.0)
  , RemoteSpeed(0.0)
  , RemoteTransPos(0)
  {
  }

  RemoteCmd_(const ContainerAllocator& _alloc)
  : RemoteMode(0)
  , RemoteSteerEnable(0)
  , RemoteBrakeFuelEnable(0)
  , RemoteSteerAngle(0.0)
  , RemoteSpeed(0.0)
  , RemoteTransPos(0)
  {
  }

  typedef int32_t _RemoteMode_type;
  int32_t RemoteMode;

  typedef int32_t _RemoteSteerEnable_type;
  int32_t RemoteSteerEnable;

  typedef int32_t _RemoteBrakeFuelEnable_type;
  int32_t RemoteBrakeFuelEnable;

  typedef float _RemoteSteerAngle_type;
  float RemoteSteerAngle;

  typedef float _RemoteSpeed_type;
  float RemoteSpeed;

  typedef int32_t _RemoteTransPos_type;
  int32_t RemoteTransPos;


  typedef boost::shared_ptr< ::autonavigation::RemoteCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::RemoteCmd_<ContainerAllocator>  const> ConstPtr;
}; // struct RemoteCmd
typedef  ::autonavigation::RemoteCmd_<std::allocator<void> > RemoteCmd;

typedef boost::shared_ptr< ::autonavigation::RemoteCmd> RemoteCmdPtr;
typedef boost::shared_ptr< ::autonavigation::RemoteCmd const> RemoteCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::RemoteCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::RemoteCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RemoteCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::RemoteCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::RemoteCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "653101b3557f16a0d9f858f840aed2dc";
  }

  static const char* value(const  ::autonavigation::RemoteCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x653101b3557f16a0ULL;
  static const uint64_t static_value2 = 0xd9f858f840aed2dcULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::RemoteCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/RemoteCmd";
  }

  static const char* value(const  ::autonavigation::RemoteCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::RemoteCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 RemoteMode\n\
int32 RemoteSteerEnable\n\
int32 RemoteBrakeFuelEnable\n\
float32 RemoteSteerAngle\n\
float32 RemoteSpeed\n\
int32 RemoteTransPos\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::RemoteCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::RemoteCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::RemoteCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.RemoteMode);
    stream.next(m.RemoteSteerEnable);
    stream.next(m.RemoteBrakeFuelEnable);
    stream.next(m.RemoteSteerAngle);
    stream.next(m.RemoteSpeed);
    stream.next(m.RemoteTransPos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RemoteCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::RemoteCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::RemoteCmd_<ContainerAllocator> & v) 
  {
    s << indent << "RemoteMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RemoteMode);
    s << indent << "RemoteSteerEnable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RemoteSteerEnable);
    s << indent << "RemoteBrakeFuelEnable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RemoteBrakeFuelEnable);
    s << indent << "RemoteSteerAngle: ";
    Printer<float>::stream(s, indent + "  ", v.RemoteSteerAngle);
    s << indent << "RemoteSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.RemoteSpeed);
    s << indent << "RemoteTransPos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RemoteTransPos);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_REMOTECMD_H


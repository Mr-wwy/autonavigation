/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/LaneObj.msg */
#ifndef AUTONAVIGATION_MESSAGE_LANEOBJ_H
#define AUTONAVIGATION_MESSAGE_LANEOBJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace autonavigation
{
template <class ContainerAllocator>
struct LaneObj_ {
  typedef LaneObj_<ContainerAllocator> Type;

  LaneObj_()
  : ID(0)
  , laneSeq(0)
  , laneType(0)
  , laneProb(0)
  , lanePtNum(0)
  , lanePoint()
  {
  }

  LaneObj_(const ContainerAllocator& _alloc)
  : ID(0)
  , laneSeq(0)
  , laneType(0)
  , laneProb(0)
  , lanePtNum(0)
  , lanePoint(_alloc)
  {
  }

  typedef int32_t _ID_type;
  int32_t ID;

  typedef int32_t _laneSeq_type;
  int32_t laneSeq;

  typedef int32_t _laneType_type;
  int32_t laneType;

  typedef int32_t _laneProb_type;
  int32_t laneProb;

  typedef int32_t _lanePtNum_type;
  int32_t lanePtNum;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _lanePoint_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  lanePoint;


  typedef boost::shared_ptr< ::autonavigation::LaneObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::LaneObj_<ContainerAllocator>  const> ConstPtr;
}; // struct LaneObj
typedef  ::autonavigation::LaneObj_<std::allocator<void> > LaneObj;

typedef boost::shared_ptr< ::autonavigation::LaneObj> LaneObjPtr;
typedef boost::shared_ptr< ::autonavigation::LaneObj const> LaneObjConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::LaneObj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::LaneObj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LaneObj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LaneObj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::LaneObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cabfe48ec928bd9380ceaec0c24a1c07";
  }

  static const char* value(const  ::autonavigation::LaneObj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcabfe48ec928bd93ULL;
  static const uint64_t static_value2 = 0x80ceaec0c24a1c07ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::LaneObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/LaneObj";
  }

  static const char* value(const  ::autonavigation::LaneObj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::LaneObj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 ID\n\
int32 laneSeq                # 0,1,-1,2,-2,-3,3, from left to right\n\
int32 laneType               # 0: white real, 1:yellow real, 2: white dotted, 3: yellow dotted, 4: predicted\n\
int32 laneProb               # 0-100, probability\n\
int32 lanePtNum\n\
geometry_msgs/Point[]  lanePoint\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::LaneObj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::LaneObj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
    stream.next(m.laneSeq);
    stream.next(m.laneType);
    stream.next(m.laneProb);
    stream.next(m.lanePtNum);
    stream.next(m.lanePoint);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LaneObj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::LaneObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::LaneObj_<ContainerAllocator> & v) 
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "laneSeq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laneSeq);
    s << indent << "laneType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laneType);
    s << indent << "laneProb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laneProb);
    s << indent << "lanePtNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lanePtNum);
    s << indent << "lanePoint[]" << std::endl;
    for (size_t i = 0; i < v.lanePoint.size(); ++i)
    {
      s << indent << "  lanePoint[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.lanePoint[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_LANEOBJ_H


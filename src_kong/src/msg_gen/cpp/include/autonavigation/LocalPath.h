/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/LocalPath.msg */
#ifndef AUTONAVIGATION_MESSAGE_LOCALPATH_H
#define AUTONAVIGATION_MESSAGE_LOCALPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "autonavigation/LocalPose.h"
#include "autonavigation/GpsPosition.h"
#include "autonavigation/LocalCoordinate.h"
#include "autonavigation/WayPoint.h"
#include "autonavigation/PathProperty.h"
#include "autonavigation/VehicleObj.h"
#include "autonavigation/WayPoint.h"

namespace autonavigation
{
template <class ContainerAllocator>
struct LocalPath_ {
  typedef LocalPath_<ContainerAllocator> Type;

  LocalPath_()
  : head()
  , localPose()
  , gpsPos()
  , plan_data_id(0)
  , plan_frame()
  , planOutputMode(0)
  , is_ok(0)
  , effective_point_num(0)
  , path()
  , path_property()
  , vehicle_command(0)
  , sys_state(0)
  , plan_state(0)
  , speed(0)
  , vehicle2Flo()
  , point2Stop()
  , expVelocity(0.0)
  , expCurvature(0.0)
  {
  }

  LocalPath_(const ContainerAllocator& _alloc)
  : head(_alloc)
  , localPose(_alloc)
  , gpsPos(_alloc)
  , plan_data_id(0)
  , plan_frame(_alloc)
  , planOutputMode(0)
  , is_ok(0)
  , effective_point_num(0)
  , path(_alloc)
  , path_property(_alloc)
  , vehicle_command(0)
  , sys_state(0)
  , plan_state(0)
  , speed(0)
  , vehicle2Flo(_alloc)
  , point2Stop(_alloc)
  , expVelocity(0.0)
  , expCurvature(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _head_type;
   ::std_msgs::Header_<ContainerAllocator>  head;

  typedef  ::autonavigation::LocalPose_<ContainerAllocator>  _localPose_type;
   ::autonavigation::LocalPose_<ContainerAllocator>  localPose;

  typedef  ::autonavigation::GpsPosition_<ContainerAllocator>  _gpsPos_type;
   ::autonavigation::GpsPosition_<ContainerAllocator>  gpsPos;

  typedef uint32_t _plan_data_id_type;
  uint32_t plan_data_id;

  typedef  ::autonavigation::LocalCoordinate_<ContainerAllocator>  _plan_frame_type;
   ::autonavigation::LocalCoordinate_<ContainerAllocator>  plan_frame;

  typedef uint16_t _planOutputMode_type;
  uint16_t planOutputMode;

  typedef uint16_t _is_ok_type;
  uint16_t is_ok;

  typedef uint16_t _effective_point_num_type;
  uint16_t effective_point_num;

  typedef std::vector< ::autonavigation::WayPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::WayPoint_<ContainerAllocator> >::other >  _path_type;
  std::vector< ::autonavigation::WayPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::WayPoint_<ContainerAllocator> >::other >  path;

  typedef std::vector< ::autonavigation::PathProperty_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::PathProperty_<ContainerAllocator> >::other >  _path_property_type;
  std::vector< ::autonavigation::PathProperty_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autonavigation::PathProperty_<ContainerAllocator> >::other >  path_property;

  typedef uint16_t _vehicle_command_type;
  uint16_t vehicle_command;

  typedef uint16_t _sys_state_type;
  uint16_t sys_state;

  typedef uint16_t _plan_state_type;
  uint16_t plan_state;

  typedef int32_t _speed_type;
  int32_t speed;

  typedef  ::autonavigation::VehicleObj_<ContainerAllocator>  _vehicle2Flo_type;
   ::autonavigation::VehicleObj_<ContainerAllocator>  vehicle2Flo;

  typedef  ::autonavigation::WayPoint_<ContainerAllocator>  _point2Stop_type;
   ::autonavigation::WayPoint_<ContainerAllocator>  point2Stop;

  typedef double _expVelocity_type;
  double expVelocity;

  typedef double _expCurvature_type;
  double expCurvature;

  enum { COMMAND_ES = 200 };
  enum { COMMAND_ST = 201 };
  enum { COMMAND_AD_SPEED = 202 };
  enum { COMMAND_AD_DISTANCE = 203 };
  enum { COMMAND_AD_POINT = 204 };
  enum { COMMAND_BK_SPEED = 205 };
  enum { COMMAND_BK_POINT = 206 };
  enum { COMMAND_IG = 207 };
  enum { COMMAND_FO = 208 };
  enum { SYS_STATE_RS = 100 };
  enum { SYS_STATE_RO = 101 };
  enum { SYS_STATE_RT = 102 };
  enum { SYS_STATE_RB = 103 };
  enum { SYS_STATE_CN = 104 };
  enum { SYS_STATE_CO = 105 };
  enum { SYS_STATE_SG = 106 };
  enum { SYS_STATE_HS = 107 };
  enum { SYS_STATE_HF = 108 };
  enum { SYS_STATE_HT = 109 };
  enum { SYS_STATE_HB = 110 };
  enum { SYS_STATE_RD = 111 };
  enum { SYS_STATE_IT = 112 };
  enum { SYS_STATE_MC = 113 };
  enum { SYS_STATE_MR = 114 };
  enum { SYS_STATE_EM = 115 };
  enum { SYS_STATE_SP = 116 };
  enum { SYS_STATE_FI = 117 };
  enum { PLAN_STATE_PR = 50 };
  enum { PLAN_STATE_NP = 51 };
  enum { PLAN_STATE_GT = 52 };
  enum { PLAN_STATE_PB = 53 };
  enum { PLAN_STATE_RR = 54 };
  enum { PLAN_STATE_WT = 55 };
  enum { PLAN_STATE_EC = 56 };
  enum { PLAN_STATE_REPLAN = 57 };
  enum { PLAN_STATE_NORMAL_PLAN = 58 };

  typedef boost::shared_ptr< ::autonavigation::LocalPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::LocalPath_<ContainerAllocator>  const> ConstPtr;
}; // struct LocalPath
typedef  ::autonavigation::LocalPath_<std::allocator<void> > LocalPath;

typedef boost::shared_ptr< ::autonavigation::LocalPath> LocalPathPtr;
typedef boost::shared_ptr< ::autonavigation::LocalPath const> LocalPathConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::LocalPath_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::LocalPath_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LocalPath_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::LocalPath_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::LocalPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5ad35f8909fe526985007d91d5de2b5";
  }

  static const char* value(const  ::autonavigation::LocalPath_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf5ad35f8909fe526ULL;
  static const uint64_t static_value2 = 0x985007d91d5de2b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::LocalPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/LocalPath";
  }

  static const char* value(const  ::autonavigation::LocalPath_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::LocalPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "######下面为一系列宏定义#########\n\
\n\
# command to vehicle\n\
#ES:紧急停车；ST：停车；AD_SPEED:前进速度跟踪；AD_DISTANCE:前进定距跟踪；AD_POINT:前进定点停车；\n\
#BK_SPEED:后退速度跟踪；BK_DISTANCE:后退定距跟踪；IG：点火；FO：熄火。\n\
\n\
uint16 COMMAND_ES=200\n\
uint16 COMMAND_ST=201\n\
uint16 COMMAND_AD_SPEED=202\n\
uint16 COMMAND_AD_DISTANCE=203\n\
uint16 COMMAND_AD_POINT=204\n\
uint16 COMMAND_BK_SPEED=205\n\
uint16 COMMAND_BK_POINT=206\n\
uint16 COMMAND_IG=207\n\
uint16 COMMAND_FO=208\n\
\n\
#系统状态\n\
#RS-直道; RO-避障；RT-弯道；RB-分叉；\n\
#HS-高速直道；HF-高速尾随；HT-高速弯道；HB-高速分叉；\n\
#CN-越野；CO-越野避障\n\
#MC-遥控；MR-遥控侦察\n\
#IT-初始化；EM-异常; FI-终点停车 RD-准就绪 SP-停车\n\
#SG-笔直直行\n\
uint16 SYS_STATE_RS=100\n\
uint16 SYS_STATE_RO=101\n\
uint16 SYS_STATE_RT=102\n\
uint16 SYS_STATE_RB=103\n\
uint16 SYS_STATE_CN=104\n\
uint16 SYS_STATE_CO=105\n\
uint16 SYS_STATE_SG=106\n\
uint16 SYS_STATE_HS=107\n\
uint16 SYS_STATE_HF=108\n\
uint16 SYS_STATE_HT=109\n\
uint16 SYS_STATE_HB=110\n\
uint16 SYS_STATE_RD=111\n\
uint16 SYS_STATE_IT=112\n\
uint16 SYS_STATE_MC=113\n\
uint16 SYS_STATE_MR=114\n\
uint16 SYS_STATE_EM=115\n\
uint16 SYS_STATE_SP=116\n\
uint16 SYS_STATE_FI=117\n\
\n\
# plan state #\n\
#PR-得到规划路径    NP-没有道路可通行     EC-紧急情况\n\
#GT-到达目标点       PB－上一次的道路      RR-使用参考路\n\
# WT-waiting       REPLAN 重规划       NORMAL_PLAN\n\
uint16 PLAN_STATE_PR=50\n\
uint16 PLAN_STATE_NP=51\n\
uint16 PLAN_STATE_GT=52\n\
uint16 PLAN_STATE_PB=53\n\
uint16 PLAN_STATE_RR=54\n\
uint16 PLAN_STATE_WT=55\n\
uint16 PLAN_STATE_EC=56\n\
uint16 PLAN_STATE_REPLAN=57\n\
uint16 PLAN_STATE_NORMAL_PLAN=58\n\
\n\
####宏定义结束############\n\
\n\
##########################\n\
####规划输出消息主体#######\n\
##########################\n\
\n\
Header      head\n\
LocalPose   localPose\n\
GpsPosition gpsPos\n\
\n\
uint32		        plan_data_id 		                #局部路径规划帧号\n\
LocalCoordinate         plan_frame				#冻结坐标 \n\
uint16                  planOutputMode                          #规划输出模式，0-输出路径，1-输出期望速度和曲率                          \n\
uint16		        is_ok					#路径数据有效标志：0 - 无效 1 - 有效\n\
uint16		        effective_point_num	                #局部路径规划的有效点数目\n\
WayPoint[]	        path	       	                        #局部路径规划点集,ros的Point32类型，单位厘米\n\
PathProperty[]	        path_property\n\
uint16                  vehicle_command		                #系统事件,规划给控制的命令，如点火，\n\
uint16           	sys_state\n\
uint16  	        plan_state				#系统状态  \n\
int32		        speed                                   #速度: 公里/小时\n\
VehicleObj              vehicle2Flo\n\
WayPoint                point2Stop\n\
float64                 expVelocity                             #期望速度，值域0.0~100.0，单位是m/s，double类型\n\
float64                 expCurvature                            #期望曲率，单位是1/m,满足右手规则\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: autonavigation/LocalPose\n\
#LocalPose msg\n\
\n\
float64 time			  \n\
#centimeter  \n\
int32 dr_x\n\
int32 dr_y\n\
int32 dr_z\n\
#0.01degree\n\
int32 dr_heading\n\
int32 dr_roll\n\
int32 dr_pitch		    \n\
\n\
#left_front wheel speed,cm/s\n\
int32 lf_speed\n\
#right_front wheel speed,cm/s		    \n\
int32 rf_speed\n\
#left_rear wheel speed,cm/s		    \n\
int32 lr_speed\n\
#right_rear wheel speed,cm/s		    \n\
int32 rr_speed		    \n\
\n\
#imu三轴陀螺速度 0.01degree/s\n\
int32 rot_x\n\
int32 rot_y                      \n\
int32 rot_z                      \n\
#imu三轴加速度  0.01m/s^2\n\
int32 acc_x                      \n\
int32 acc_y                      \n\
int32 acc_z                      \n\
\n\
int32 batteryState\n\
int32 batteryEnergy           #0-100\n\
\n\
#-3000(right)~3000(left) degree  0.01degree/s\n\
int32 steer   \n\
#0(zero)~100(full)                  \n\
int32 brake                 \n\
#0(zero)~100(full)     \n\
int32 fuel      \n\
#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3                 \n\
int8  trans                      \n\
int8  VehicleState\n\
#DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2\n\
int8  mode                       \n\
#dr运行状态\n\
int8 drStatus\n\
#错误状态		    \n\
int8 errorStatus		    \n\
int8 emergency_flag\n\
int8 hardswitch_on\n\
\n\
\n\
================================================================================\n\
MSG: autonavigation/GpsPosition\n\
#gps info is updated\n\
char          gps_flag               \n\
uint32        gps_week\n\
#millisecond in a week\n\
float64       gps_millisecond   \n\
#经纬度，单位为度     \n\
float64	      longitude		      \n\
float64	      laltitude\n\
#高斯投影位置,cm\n\
float64	      gaussX		      \n\
float64       gaussY\n\
#height,     cm\n\
float64         height  \n\
#欧拉角，单位为0.01度                \n\
int32         pitch                   \n\
int32         roll\n\
#欧拉角，单位为0.01度,向东为零度，逆时针0-360                    \n\
int32         azimuth                 \n\
\n\
#north速度，单位为cm/s\n\
int32         northVelocity           \n\
int32         eastVelocity\n\
int32         upVelocity\n\
#系统运行状态\n\
int32         positionStatus	      \n\
\n\
#imu三轴陀螺速度 0.01degree/s\n\
int32	        rot_x                      \n\
int32           rot_y                      \n\
int32           rot_z                      \n\
\n\
#imu三轴加速度  0.01m/s^2\n\
int32           acc_x                      \n\
int32           acc_y                      \n\
int32           acc_z                      \n\
	\n\
\n\
================================================================================\n\
MSG: autonavigation/LocalCoordinate\n\
int32 z_x\n\
int32 z_y\n\
int32 g_x\n\
int32 g_y\n\
int32 heading\n\
int32 pitch\n\
int32 roll\n\
int32 height\n\
uint8 class_id\n\
\n\
\n\
================================================================================\n\
MSG: autonavigation/WayPoint\n\
int32 x\n\
int32 y\n\
int32 z\n\
\n\
================================================================================\n\
MSG: autonavigation/PathProperty\n\
WayPoint left_boundary\n\
WayPoint right_boundary\n\
int32    direction\n\
\n\
\n\
================================================================================\n\
MSG: autonavigation/VehicleObj\n\
#ID num\n\
int32 ID       \n\
# position, cm\n\
int32 centerX\n\
int32 centerY\n\
# cm/s\n\
int32 speed        \n\
# 0.01degree   \n\
int32 speedDirection  \n\
int32 height         \n\
# car, truck, bicycle, big obj, small obj, unknown obj \n\
int32 vehclass     \n\
\n\
geometry_msgs/Polygon vehPolygon      \n\
\n\
int32   vertexNumber\n\
int32[] vertexX\n\
int32[] vertexY\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::autonavigation::LocalPath_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::LocalPath_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.head);
    stream.next(m.localPose);
    stream.next(m.gpsPos);
    stream.next(m.plan_data_id);
    stream.next(m.plan_frame);
    stream.next(m.planOutputMode);
    stream.next(m.is_ok);
    stream.next(m.effective_point_num);
    stream.next(m.path);
    stream.next(m.path_property);
    stream.next(m.vehicle_command);
    stream.next(m.sys_state);
    stream.next(m.plan_state);
    stream.next(m.speed);
    stream.next(m.vehicle2Flo);
    stream.next(m.point2Stop);
    stream.next(m.expVelocity);
    stream.next(m.expCurvature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalPath_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::LocalPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::LocalPath_<ContainerAllocator> & v) 
  {
    s << indent << "head: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.head);
    s << indent << "localPose: ";
s << std::endl;
    Printer< ::autonavigation::LocalPose_<ContainerAllocator> >::stream(s, indent + "  ", v.localPose);
    s << indent << "gpsPos: ";
s << std::endl;
    Printer< ::autonavigation::GpsPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsPos);
    s << indent << "plan_data_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.plan_data_id);
    s << indent << "plan_frame: ";
s << std::endl;
    Printer< ::autonavigation::LocalCoordinate_<ContainerAllocator> >::stream(s, indent + "  ", v.plan_frame);
    s << indent << "planOutputMode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.planOutputMode);
    s << indent << "is_ok: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.is_ok);
    s << indent << "effective_point_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.effective_point_num);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autonavigation::WayPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
    s << indent << "path_property[]" << std::endl;
    for (size_t i = 0; i < v.path_property.size(); ++i)
    {
      s << indent << "  path_property[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autonavigation::PathProperty_<ContainerAllocator> >::stream(s, indent + "    ", v.path_property[i]);
    }
    s << indent << "vehicle_command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_command);
    s << indent << "sys_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sys_state);
    s << indent << "plan_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.plan_state);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "vehicle2Flo: ";
s << std::endl;
    Printer< ::autonavigation::VehicleObj_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle2Flo);
    s << indent << "point2Stop: ";
s << std::endl;
    Printer< ::autonavigation::WayPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.point2Stop);
    s << indent << "expVelocity: ";
    Printer<double>::stream(s, indent + "  ", v.expVelocity);
    s << indent << "expCurvature: ";
    Printer<double>::stream(s, indent + "  ", v.expCurvature);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_LOCALPATH_H


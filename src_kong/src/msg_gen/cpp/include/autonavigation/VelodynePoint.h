/* Auto-generated by genmsg_cpp for file /home/wangyi/rosros_autonavigation_ws/src/autonavigation/msg/VelodynePoint.msg */
#ifndef AUTONAVIGATION_MESSAGE_VELODYNEPOINT_H
#define AUTONAVIGATION_MESSAGE_VELODYNEPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct VelodynePoint_ {
  typedef VelodynePoint_<ContainerAllocator> Type;

  VelodynePoint_()
  : x(0)
  , y(0)
  , z(0)
  , intensity(0)
  , angleH(0)
  , angleV(0)
  , ring(0)
  {
  }

  VelodynePoint_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  , z(0)
  , intensity(0)
  , angleH(0)
  , angleV(0)
  , ring(0)
  {
  }

  typedef int16_t _x_type;
  int16_t x;

  typedef int16_t _y_type;
  int16_t y;

  typedef int16_t _z_type;
  int16_t z;

  typedef uint16_t _intensity_type;
  uint16_t intensity;

  typedef uint16_t _angleH_type;
  uint16_t angleH;

  typedef uint16_t _angleV_type;
  uint16_t angleV;

  typedef uint8_t _ring_type;
  uint8_t ring;


  typedef boost::shared_ptr< ::autonavigation::VelodynePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::VelodynePoint_<ContainerAllocator>  const> ConstPtr;
}; // struct VelodynePoint
typedef  ::autonavigation::VelodynePoint_<std::allocator<void> > VelodynePoint;

typedef boost::shared_ptr< ::autonavigation::VelodynePoint> VelodynePointPtr;
typedef boost::shared_ptr< ::autonavigation::VelodynePoint const> VelodynePointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::VelodynePoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::VelodynePoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodynePoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::VelodynePoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::VelodynePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eca643a58d79f0bdd4c26b9939e886c8";
  }

  static const char* value(const  ::autonavigation::VelodynePoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeca643a58d79f0bdULL;
  static const uint64_t static_value2 = 0xd4c26b9939e886c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::VelodynePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/VelodynePoint";
  }

  static const char* value(const  ::autonavigation::VelodynePoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::VelodynePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# velodyne point \n\
\n\
int16  x             #cm\n\
int16  y            \n\
int16  z\n\
uint16  intensity     #0-255\n\
uint16  angleH        #0.01degree\n\
uint16  angleV        #0.01degree\n\
uint8   ring\n\
\n\
\n\
";
  }

  static const char* value(const  ::autonavigation::VelodynePoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::VelodynePoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::VelodynePoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.intensity);
    stream.next(m.angleH);
    stream.next(m.angleV);
    stream.next(m.ring);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelodynePoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::VelodynePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::VelodynePoint_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
    s << indent << "intensity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.intensity);
    s << indent << "angleH: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.angleH);
    s << indent << "angleV: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.angleV);
    s << indent << "ring: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ring);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_VELODYNEPOINT_H


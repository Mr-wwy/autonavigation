/* Auto-generated by genmsg_cpp for file /home/base/ros_autonavigation_ws/src/autonavigation/msg/SetT0.msg */
#ifndef AUTONAVIGATION_MESSAGE_SETT0_H
#define AUTONAVIGATION_MESSAGE_SETT0_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autonavigation
{
template <class ContainerAllocator>
struct SetT0_ {
  typedef SetT0_<ContainerAllocator> Type;

  SetT0_()
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , cmd_millisecond(0)
  , cmd_reserve1(0)
  , cmd_reserve2(0)
  , cmd_reserve3(0)
  {
  }

  SetT0_(const ContainerAllocator& _alloc)
  : unique_key(0)
  , gps_week(0)
  , gps_millisecond(0)
  , cmd_millisecond(0)
  , cmd_reserve1(0)
  , cmd_reserve2(0)
  , cmd_reserve3(0)
  {
  }

  typedef uint32_t _unique_key_type;
  uint32_t unique_key;

  typedef uint32_t _gps_week_type;
  uint32_t gps_week;

  typedef uint64_t _gps_millisecond_type;
  uint64_t gps_millisecond;

  typedef uint64_t _cmd_millisecond_type;
  uint64_t cmd_millisecond;

  typedef uint8_t _cmd_reserve1_type;
  uint8_t cmd_reserve1;

  typedef uint8_t _cmd_reserve2_type;
  uint8_t cmd_reserve2;

  typedef uint8_t _cmd_reserve3_type;
  uint8_t cmd_reserve3;


  typedef boost::shared_ptr< ::autonavigation::SetT0_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonavigation::SetT0_<ContainerAllocator>  const> ConstPtr;
}; // struct SetT0
typedef  ::autonavigation::SetT0_<std::allocator<void> > SetT0;

typedef boost::shared_ptr< ::autonavigation::SetT0> SetT0Ptr;
typedef boost::shared_ptr< ::autonavigation::SetT0 const> SetT0ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autonavigation::SetT0_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autonavigation::SetT0_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autonavigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autonavigation::SetT0_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autonavigation::SetT0_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autonavigation::SetT0_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9ae7495e5be2c0bedf8ce7469cc06a96";
  }

  static const char* value(const  ::autonavigation::SetT0_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9ae7495e5be2c0beULL;
  static const uint64_t static_value2 = 0xdf8ce7469cc06a96ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonavigation::SetT0_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autonavigation/SetT0";
  }

  static const char* value(const  ::autonavigation::SetT0_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autonavigation::SetT0_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#\n\
\n\
uint32     unique_key          #自主行驶载车唯一标识，用于区分载车的id\n\
uint32     gps_week            #GPS周\n\
uint64     gps_millisecond     #取GPS周的毫秒级时间\n\
uint64     cmd_millisecond     #T0 时间\n\
uint8      cmd_reserve1        #预留\n\
uint8      cmd_reserve2        #预留\n\
uint8      cmd_reserve3 \n\
\n\
";
  }

  static const char* value(const  ::autonavigation::SetT0_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autonavigation::SetT0_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autonavigation::SetT0_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.unique_key);
    stream.next(m.gps_week);
    stream.next(m.gps_millisecond);
    stream.next(m.cmd_millisecond);
    stream.next(m.cmd_reserve1);
    stream.next(m.cmd_reserve2);
    stream.next(m.cmd_reserve3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetT0_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonavigation::SetT0_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autonavigation::SetT0_<ContainerAllocator> & v) 
  {
    s << indent << "unique_key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.unique_key);
    s << indent << "gps_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "cmd_millisecond: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.cmd_millisecond);
    s << indent << "cmd_reserve1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reserve1);
    s << indent << "cmd_reserve2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reserve2);
    s << indent << "cmd_reserve3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_reserve3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAVIGATION_MESSAGE_SETT0_H


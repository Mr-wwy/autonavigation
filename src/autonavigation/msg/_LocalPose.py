# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/LocalPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocalPose(genpy.Message):
  _md5sum = "c9d9e5e43ed9aff0048c010992c53a52"
  _type = "autonavigation/LocalPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#LocalPose msg

float64 time			  
#centimeter  
int32 dr_x
int32 dr_y
int32 dr_z
#0.01degree
int32 dr_heading
int32 dr_roll
int32 dr_pitch		    

#left_front wheel speed,cm/s
int32 lf_speed
#right_front wheel speed,cm/s		    
int32 rf_speed
#left_rear wheel speed,cm/s		    
int32 lr_speed
#right_rear wheel speed,cm/s		    
int32 rr_speed		    

#imu三轴陀螺速度 0.01degree/s
int32 rot_x
int32 rot_y                      
int32 rot_z                      
#imu三轴加速度  0.01m/s^2
int32 acc_x                      
int32 acc_y                      
int32 acc_z                      

int32 batteryState
int32 batteryEnergy           #0-100

#-3000(right)~3000(left) degree  0.01degree/s
int32 steer   
#0(zero)~100(full)                  
int32 brake                 
#0(zero)~100(full)     
int32 fuel      
#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3                 
int8  trans                      
int8  VehicleState
#DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2
int8  mode                       
#dr运行状态
int8 drStatus
#错误状态		    
int8 errorStatus		    
int8 emergency_flag
int8 hardswitch_on

"""
  __slots__ = ['time','dr_x','dr_y','dr_z','dr_heading','dr_roll','dr_pitch','lf_speed','rf_speed','lr_speed','rr_speed','rot_x','rot_y','rot_z','acc_x','acc_y','acc_z','batteryState','batteryEnergy','steer','brake','fuel','trans','VehicleState','mode','drStatus','errorStatus','emergency_flag','hardswitch_on']
  _slot_types = ['float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,dr_x,dr_y,dr_z,dr_heading,dr_roll,dr_pitch,lf_speed,rf_speed,lr_speed,rr_speed,rot_x,rot_y,rot_z,acc_x,acc_y,acc_z,batteryState,batteryEnergy,steer,brake,fuel,trans,VehicleState,mode,drStatus,errorStatus,emergency_flag,hardswitch_on

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.dr_x is None:
        self.dr_x = 0
      if self.dr_y is None:
        self.dr_y = 0
      if self.dr_z is None:
        self.dr_z = 0
      if self.dr_heading is None:
        self.dr_heading = 0
      if self.dr_roll is None:
        self.dr_roll = 0
      if self.dr_pitch is None:
        self.dr_pitch = 0
      if self.lf_speed is None:
        self.lf_speed = 0
      if self.rf_speed is None:
        self.rf_speed = 0
      if self.lr_speed is None:
        self.lr_speed = 0
      if self.rr_speed is None:
        self.rr_speed = 0
      if self.rot_x is None:
        self.rot_x = 0
      if self.rot_y is None:
        self.rot_y = 0
      if self.rot_z is None:
        self.rot_z = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
      if self.batteryState is None:
        self.batteryState = 0
      if self.batteryEnergy is None:
        self.batteryEnergy = 0
      if self.steer is None:
        self.steer = 0
      if self.brake is None:
        self.brake = 0
      if self.fuel is None:
        self.fuel = 0
      if self.trans is None:
        self.trans = 0
      if self.VehicleState is None:
        self.VehicleState = 0
      if self.mode is None:
        self.mode = 0
      if self.drStatus is None:
        self.drStatus = 0
      if self.errorStatus is None:
        self.errorStatus = 0
      if self.emergency_flag is None:
        self.emergency_flag = 0
      if self.hardswitch_on is None:
        self.hardswitch_on = 0
    else:
      self.time = 0.
      self.dr_x = 0
      self.dr_y = 0
      self.dr_z = 0
      self.dr_heading = 0
      self.dr_roll = 0
      self.dr_pitch = 0
      self.lf_speed = 0
      self.rf_speed = 0
      self.lr_speed = 0
      self.rr_speed = 0
      self.rot_x = 0
      self.rot_y = 0
      self.rot_z = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0
      self.batteryState = 0
      self.batteryEnergy = 0
      self.steer = 0
      self.brake = 0
      self.fuel = 0
      self.trans = 0
      self.VehicleState = 0
      self.mode = 0
      self.drStatus = 0
      self.errorStatus = 0
      self.emergency_flag = 0
      self.hardswitch_on = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d21i7b.pack(_x.time, _x.dr_x, _x.dr_y, _x.dr_z, _x.dr_heading, _x.dr_roll, _x.dr_pitch, _x.lf_speed, _x.rf_speed, _x.lr_speed, _x.rr_speed, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.batteryState, _x.batteryEnergy, _x.steer, _x.brake, _x.fuel, _x.trans, _x.VehicleState, _x.mode, _x.drStatus, _x.errorStatus, _x.emergency_flag, _x.hardswitch_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 99
      (_x.time, _x.dr_x, _x.dr_y, _x.dr_z, _x.dr_heading, _x.dr_roll, _x.dr_pitch, _x.lf_speed, _x.rf_speed, _x.lr_speed, _x.rr_speed, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.batteryState, _x.batteryEnergy, _x.steer, _x.brake, _x.fuel, _x.trans, _x.VehicleState, _x.mode, _x.drStatus, _x.errorStatus, _x.emergency_flag, _x.hardswitch_on,) = _struct_d21i7b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d21i7b.pack(_x.time, _x.dr_x, _x.dr_y, _x.dr_z, _x.dr_heading, _x.dr_roll, _x.dr_pitch, _x.lf_speed, _x.rf_speed, _x.lr_speed, _x.rr_speed, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.batteryState, _x.batteryEnergy, _x.steer, _x.brake, _x.fuel, _x.trans, _x.VehicleState, _x.mode, _x.drStatus, _x.errorStatus, _x.emergency_flag, _x.hardswitch_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 99
      (_x.time, _x.dr_x, _x.dr_y, _x.dr_z, _x.dr_heading, _x.dr_roll, _x.dr_pitch, _x.lf_speed, _x.rf_speed, _x.lr_speed, _x.rr_speed, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.batteryState, _x.batteryEnergy, _x.steer, _x.brake, _x.fuel, _x.trans, _x.VehicleState, _x.mode, _x.drStatus, _x.errorStatus, _x.emergency_flag, _x.hardswitch_on,) = _struct_d21i7b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d21i7b = struct.Struct("<d21i7b")

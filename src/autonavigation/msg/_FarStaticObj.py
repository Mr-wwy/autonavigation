# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/FarStaticObj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FarStaticObj(genpy.Message):
  _md5sum = "13cd45b11ab8ad4733c742b8974031cc"
  _type = "autonavigation/FarStaticObj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 VertexNumber
int32[] ConvexX  # do not need many vertex points
int32[] ConvexY
int32 CenterX
int32 CenterY

"""
  __slots__ = ['VertexNumber','ConvexX','ConvexY','CenterX','CenterY']
  _slot_types = ['int32','int32[]','int32[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VertexNumber,ConvexX,ConvexY,CenterX,CenterY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FarStaticObj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.VertexNumber is None:
        self.VertexNumber = 0
      if self.ConvexX is None:
        self.ConvexX = []
      if self.ConvexY is None:
        self.ConvexY = []
      if self.CenterX is None:
        self.CenterX = 0
      if self.CenterY is None:
        self.CenterY = 0
    else:
      self.VertexNumber = 0
      self.ConvexX = []
      self.ConvexY = []
      self.CenterX = 0
      self.CenterY = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.VertexNumber))
      length = len(self.ConvexX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.ConvexX))
      length = len(self.ConvexY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.ConvexY))
      _x = self
      buff.write(_struct_2i.pack(_x.CenterX, _x.CenterY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.VertexNumber,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ConvexX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ConvexY = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.CenterX, _x.CenterY,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.VertexNumber))
      length = len(self.ConvexX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ConvexX.tostring())
      length = len(self.ConvexY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ConvexY.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.CenterX, _x.CenterY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.VertexNumber,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ConvexX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ConvexY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.CenterX, _x.CenterY,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_2i = struct.Struct("<2i")

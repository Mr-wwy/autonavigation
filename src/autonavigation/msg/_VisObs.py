# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/VisObs.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VisObs(genpy.Message):
  _md5sum = "e8a43127f0607f3c6725c1cce9ca0c3c"
  _type = "autonavigation/VisObs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#VISION_OBSTACLE_MSG1
uint8            CAN_VIS_OBS_COUNT
float32          CAN_VIS_OBS_ANGLE_RATE
float32          CAN_VIS_OBS_ANGLE_CENTROID
float32          CAN_VIS_OBS_RANGE_RATE
float32          CAN_VIS_OBS_RANGE 
float32          CAN_VIS_OBS_LATERAL_RATE

#VISION_OBSTACLE_MSG2
int8             CAN_VIS_OBS_MANEUVER_STATE
uint8            CAN_VIS_OBS_DETECTION_STATUS
uint8            CAN_VIS_OBS_MOTION_TYPE
uint8            CAN_VIS_OBS_CROSSING_STATUS
uint8            CAN_VIS_OBS_ID
uint8            CAN_VIS_OBS_LOW_CONFIDENCE
int8             CAN_VIS_OBS_LANE_NUMBER
uint8            CAN_VIS_OBS_TURN_INDICATOR
uint8            CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR
uint8            CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF
uint8            CAN_VIS_OBS_OBJECT_IN_PATH
uint8            CAN_VIS_OBS_HIGH_DECELERATION
uint8            CAN_VIS_OBS_FCW_STATUS
float32          CAN_VIS_OBS_TTC_WITHOUT_ACC
uint8            CAN_VIS_OBS_ME_AWS
uint8            CAN_VIS_OBS_CIPO
float32          CAN_VIS_OBS_TTC_WITH_ACC
float32          CAN_VIS_OBS_TTC_WITH_ACC_CONF
uint8            CAN_VIS_OBS_CLASSIFICATION

#VISION_OBSTACLE_MSG3
uint8            CAN_RADAR_TARGET_MATCH_COASTED
float32          CAN_VIS_OBS_VISION_RANGE
uint8            CAN_RADAR_TARGET_MATCH_INDEX_1
uint8            CAN_RADAR_TARGET_MATCH_INDEX_2
uint8            CAN_RADAR_TARGET_MATCH_INDEX_3
uint8            CAN_RADAR_TARGET_MATCH_INDEX_4
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_1
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_2
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_3
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_4
float32          CAN_VIS_OBS_WIDTH


#VISION_OBSTACLE_MSG4
float32          CAN_VIS_OBS_VISION_ANGLE_RATE
float32          CAN_VIS_OBS_VISION_ANGLE_CENTROID
float32          CAN_VIS_OBS_VISION_RANGE_RATE
float32          CAN_VIS_OBS_VISION_LATERAL_RATE
float32          CAN_VIS_OBS_VISION_WIDTH

#VISION_OBSTACLE_MSG5
float32          CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST
float32          CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST
float32          CAN_VIS_OBS_RANGE_FUNC_ACT_EST
uint8            CAN_VIS_OBS_FCW_CALC_STATUS
float32          CAN_VIS_OBS_PREDICTED_TTC
float32          CAN_VIS_OBS_PREDICTED_LAT_POS
uint8            CAN_OBJECT_HIGH_DECEL_FLAG
uint8            CAN_VIS_HALF_BODY_DETECTION_FLAG
"""
  __slots__ = ['CAN_VIS_OBS_COUNT','CAN_VIS_OBS_ANGLE_RATE','CAN_VIS_OBS_ANGLE_CENTROID','CAN_VIS_OBS_RANGE_RATE','CAN_VIS_OBS_RANGE','CAN_VIS_OBS_LATERAL_RATE','CAN_VIS_OBS_MANEUVER_STATE','CAN_VIS_OBS_DETECTION_STATUS','CAN_VIS_OBS_MOTION_TYPE','CAN_VIS_OBS_CROSSING_STATUS','CAN_VIS_OBS_ID','CAN_VIS_OBS_LOW_CONFIDENCE','CAN_VIS_OBS_LANE_NUMBER','CAN_VIS_OBS_TURN_INDICATOR','CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR','CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF','CAN_VIS_OBS_OBJECT_IN_PATH','CAN_VIS_OBS_HIGH_DECELERATION','CAN_VIS_OBS_FCW_STATUS','CAN_VIS_OBS_TTC_WITHOUT_ACC','CAN_VIS_OBS_ME_AWS','CAN_VIS_OBS_CIPO','CAN_VIS_OBS_TTC_WITH_ACC','CAN_VIS_OBS_TTC_WITH_ACC_CONF','CAN_VIS_OBS_CLASSIFICATION','CAN_RADAR_TARGET_MATCH_COASTED','CAN_VIS_OBS_VISION_RANGE','CAN_RADAR_TARGET_MATCH_INDEX_1','CAN_RADAR_TARGET_MATCH_INDEX_2','CAN_RADAR_TARGET_MATCH_INDEX_3','CAN_RADAR_TARGET_MATCH_INDEX_4','CAN_RADAR_TGT_MATCH_CONFIDENCE_1','CAN_RADAR_TGT_MATCH_CONFIDENCE_2','CAN_RADAR_TGT_MATCH_CONFIDENCE_3','CAN_RADAR_TGT_MATCH_CONFIDENCE_4','CAN_VIS_OBS_WIDTH','CAN_VIS_OBS_VISION_ANGLE_RATE','CAN_VIS_OBS_VISION_ANGLE_CENTROID','CAN_VIS_OBS_VISION_RANGE_RATE','CAN_VIS_OBS_VISION_LATERAL_RATE','CAN_VIS_OBS_VISION_WIDTH','CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST','CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST','CAN_VIS_OBS_RANGE_FUNC_ACT_EST','CAN_VIS_OBS_FCW_CALC_STATUS','CAN_VIS_OBS_PREDICTED_TTC','CAN_VIS_OBS_PREDICTED_LAT_POS','CAN_OBJECT_HIGH_DECEL_FLAG','CAN_VIS_HALF_BODY_DETECTION_FLAG']
  _slot_types = ['uint8','float32','float32','float32','float32','float32','int8','uint8','uint8','uint8','uint8','uint8','int8','uint8','uint8','uint8','uint8','uint8','uint8','float32','uint8','uint8','float32','float32','uint8','uint8','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CAN_VIS_OBS_COUNT,CAN_VIS_OBS_ANGLE_RATE,CAN_VIS_OBS_ANGLE_CENTROID,CAN_VIS_OBS_RANGE_RATE,CAN_VIS_OBS_RANGE,CAN_VIS_OBS_LATERAL_RATE,CAN_VIS_OBS_MANEUVER_STATE,CAN_VIS_OBS_DETECTION_STATUS,CAN_VIS_OBS_MOTION_TYPE,CAN_VIS_OBS_CROSSING_STATUS,CAN_VIS_OBS_ID,CAN_VIS_OBS_LOW_CONFIDENCE,CAN_VIS_OBS_LANE_NUMBER,CAN_VIS_OBS_TURN_INDICATOR,CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR,CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF,CAN_VIS_OBS_OBJECT_IN_PATH,CAN_VIS_OBS_HIGH_DECELERATION,CAN_VIS_OBS_FCW_STATUS,CAN_VIS_OBS_TTC_WITHOUT_ACC,CAN_VIS_OBS_ME_AWS,CAN_VIS_OBS_CIPO,CAN_VIS_OBS_TTC_WITH_ACC,CAN_VIS_OBS_TTC_WITH_ACC_CONF,CAN_VIS_OBS_CLASSIFICATION,CAN_RADAR_TARGET_MATCH_COASTED,CAN_VIS_OBS_VISION_RANGE,CAN_RADAR_TARGET_MATCH_INDEX_1,CAN_RADAR_TARGET_MATCH_INDEX_2,CAN_RADAR_TARGET_MATCH_INDEX_3,CAN_RADAR_TARGET_MATCH_INDEX_4,CAN_RADAR_TGT_MATCH_CONFIDENCE_1,CAN_RADAR_TGT_MATCH_CONFIDENCE_2,CAN_RADAR_TGT_MATCH_CONFIDENCE_3,CAN_RADAR_TGT_MATCH_CONFIDENCE_4,CAN_VIS_OBS_WIDTH,CAN_VIS_OBS_VISION_ANGLE_RATE,CAN_VIS_OBS_VISION_ANGLE_CENTROID,CAN_VIS_OBS_VISION_RANGE_RATE,CAN_VIS_OBS_VISION_LATERAL_RATE,CAN_VIS_OBS_VISION_WIDTH,CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST,CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST,CAN_VIS_OBS_RANGE_FUNC_ACT_EST,CAN_VIS_OBS_FCW_CALC_STATUS,CAN_VIS_OBS_PREDICTED_TTC,CAN_VIS_OBS_PREDICTED_LAT_POS,CAN_OBJECT_HIGH_DECEL_FLAG,CAN_VIS_HALF_BODY_DETECTION_FLAG

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisObs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.CAN_VIS_OBS_COUNT is None:
        self.CAN_VIS_OBS_COUNT = 0
      if self.CAN_VIS_OBS_ANGLE_RATE is None:
        self.CAN_VIS_OBS_ANGLE_RATE = 0.
      if self.CAN_VIS_OBS_ANGLE_CENTROID is None:
        self.CAN_VIS_OBS_ANGLE_CENTROID = 0.
      if self.CAN_VIS_OBS_RANGE_RATE is None:
        self.CAN_VIS_OBS_RANGE_RATE = 0.
      if self.CAN_VIS_OBS_RANGE is None:
        self.CAN_VIS_OBS_RANGE = 0.
      if self.CAN_VIS_OBS_LATERAL_RATE is None:
        self.CAN_VIS_OBS_LATERAL_RATE = 0.
      if self.CAN_VIS_OBS_MANEUVER_STATE is None:
        self.CAN_VIS_OBS_MANEUVER_STATE = 0
      if self.CAN_VIS_OBS_DETECTION_STATUS is None:
        self.CAN_VIS_OBS_DETECTION_STATUS = 0
      if self.CAN_VIS_OBS_MOTION_TYPE is None:
        self.CAN_VIS_OBS_MOTION_TYPE = 0
      if self.CAN_VIS_OBS_CROSSING_STATUS is None:
        self.CAN_VIS_OBS_CROSSING_STATUS = 0
      if self.CAN_VIS_OBS_ID is None:
        self.CAN_VIS_OBS_ID = 0
      if self.CAN_VIS_OBS_LOW_CONFIDENCE is None:
        self.CAN_VIS_OBS_LOW_CONFIDENCE = 0
      if self.CAN_VIS_OBS_LANE_NUMBER is None:
        self.CAN_VIS_OBS_LANE_NUMBER = 0
      if self.CAN_VIS_OBS_TURN_INDICATOR is None:
        self.CAN_VIS_OBS_TURN_INDICATOR = 0
      if self.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR is None:
        self.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR = 0
      if self.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF is None:
        self.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF = 0
      if self.CAN_VIS_OBS_OBJECT_IN_PATH is None:
        self.CAN_VIS_OBS_OBJECT_IN_PATH = 0
      if self.CAN_VIS_OBS_HIGH_DECELERATION is None:
        self.CAN_VIS_OBS_HIGH_DECELERATION = 0
      if self.CAN_VIS_OBS_FCW_STATUS is None:
        self.CAN_VIS_OBS_FCW_STATUS = 0
      if self.CAN_VIS_OBS_TTC_WITHOUT_ACC is None:
        self.CAN_VIS_OBS_TTC_WITHOUT_ACC = 0.
      if self.CAN_VIS_OBS_ME_AWS is None:
        self.CAN_VIS_OBS_ME_AWS = 0
      if self.CAN_VIS_OBS_CIPO is None:
        self.CAN_VIS_OBS_CIPO = 0
      if self.CAN_VIS_OBS_TTC_WITH_ACC is None:
        self.CAN_VIS_OBS_TTC_WITH_ACC = 0.
      if self.CAN_VIS_OBS_TTC_WITH_ACC_CONF is None:
        self.CAN_VIS_OBS_TTC_WITH_ACC_CONF = 0.
      if self.CAN_VIS_OBS_CLASSIFICATION is None:
        self.CAN_VIS_OBS_CLASSIFICATION = 0
      if self.CAN_RADAR_TARGET_MATCH_COASTED is None:
        self.CAN_RADAR_TARGET_MATCH_COASTED = 0
      if self.CAN_VIS_OBS_VISION_RANGE is None:
        self.CAN_VIS_OBS_VISION_RANGE = 0.
      if self.CAN_RADAR_TARGET_MATCH_INDEX_1 is None:
        self.CAN_RADAR_TARGET_MATCH_INDEX_1 = 0
      if self.CAN_RADAR_TARGET_MATCH_INDEX_2 is None:
        self.CAN_RADAR_TARGET_MATCH_INDEX_2 = 0
      if self.CAN_RADAR_TARGET_MATCH_INDEX_3 is None:
        self.CAN_RADAR_TARGET_MATCH_INDEX_3 = 0
      if self.CAN_RADAR_TARGET_MATCH_INDEX_4 is None:
        self.CAN_RADAR_TARGET_MATCH_INDEX_4 = 0
      if self.CAN_RADAR_TGT_MATCH_CONFIDENCE_1 is None:
        self.CAN_RADAR_TGT_MATCH_CONFIDENCE_1 = 0
      if self.CAN_RADAR_TGT_MATCH_CONFIDENCE_2 is None:
        self.CAN_RADAR_TGT_MATCH_CONFIDENCE_2 = 0
      if self.CAN_RADAR_TGT_MATCH_CONFIDENCE_3 is None:
        self.CAN_RADAR_TGT_MATCH_CONFIDENCE_3 = 0
      if self.CAN_RADAR_TGT_MATCH_CONFIDENCE_4 is None:
        self.CAN_RADAR_TGT_MATCH_CONFIDENCE_4 = 0
      if self.CAN_VIS_OBS_WIDTH is None:
        self.CAN_VIS_OBS_WIDTH = 0.
      if self.CAN_VIS_OBS_VISION_ANGLE_RATE is None:
        self.CAN_VIS_OBS_VISION_ANGLE_RATE = 0.
      if self.CAN_VIS_OBS_VISION_ANGLE_CENTROID is None:
        self.CAN_VIS_OBS_VISION_ANGLE_CENTROID = 0.
      if self.CAN_VIS_OBS_VISION_RANGE_RATE is None:
        self.CAN_VIS_OBS_VISION_RANGE_RATE = 0.
      if self.CAN_VIS_OBS_VISION_LATERAL_RATE is None:
        self.CAN_VIS_OBS_VISION_LATERAL_RATE = 0.
      if self.CAN_VIS_OBS_VISION_WIDTH is None:
        self.CAN_VIS_OBS_VISION_WIDTH = 0.
      if self.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST is None:
        self.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST = 0.
      if self.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST is None:
        self.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST = 0.
      if self.CAN_VIS_OBS_RANGE_FUNC_ACT_EST is None:
        self.CAN_VIS_OBS_RANGE_FUNC_ACT_EST = 0.
      if self.CAN_VIS_OBS_FCW_CALC_STATUS is None:
        self.CAN_VIS_OBS_FCW_CALC_STATUS = 0
      if self.CAN_VIS_OBS_PREDICTED_TTC is None:
        self.CAN_VIS_OBS_PREDICTED_TTC = 0.
      if self.CAN_VIS_OBS_PREDICTED_LAT_POS is None:
        self.CAN_VIS_OBS_PREDICTED_LAT_POS = 0.
      if self.CAN_OBJECT_HIGH_DECEL_FLAG is None:
        self.CAN_OBJECT_HIGH_DECEL_FLAG = 0
      if self.CAN_VIS_HALF_BODY_DETECTION_FLAG is None:
        self.CAN_VIS_HALF_BODY_DETECTION_FLAG = 0
    else:
      self.CAN_VIS_OBS_COUNT = 0
      self.CAN_VIS_OBS_ANGLE_RATE = 0.
      self.CAN_VIS_OBS_ANGLE_CENTROID = 0.
      self.CAN_VIS_OBS_RANGE_RATE = 0.
      self.CAN_VIS_OBS_RANGE = 0.
      self.CAN_VIS_OBS_LATERAL_RATE = 0.
      self.CAN_VIS_OBS_MANEUVER_STATE = 0
      self.CAN_VIS_OBS_DETECTION_STATUS = 0
      self.CAN_VIS_OBS_MOTION_TYPE = 0
      self.CAN_VIS_OBS_CROSSING_STATUS = 0
      self.CAN_VIS_OBS_ID = 0
      self.CAN_VIS_OBS_LOW_CONFIDENCE = 0
      self.CAN_VIS_OBS_LANE_NUMBER = 0
      self.CAN_VIS_OBS_TURN_INDICATOR = 0
      self.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR = 0
      self.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF = 0
      self.CAN_VIS_OBS_OBJECT_IN_PATH = 0
      self.CAN_VIS_OBS_HIGH_DECELERATION = 0
      self.CAN_VIS_OBS_FCW_STATUS = 0
      self.CAN_VIS_OBS_TTC_WITHOUT_ACC = 0.
      self.CAN_VIS_OBS_ME_AWS = 0
      self.CAN_VIS_OBS_CIPO = 0
      self.CAN_VIS_OBS_TTC_WITH_ACC = 0.
      self.CAN_VIS_OBS_TTC_WITH_ACC_CONF = 0.
      self.CAN_VIS_OBS_CLASSIFICATION = 0
      self.CAN_RADAR_TARGET_MATCH_COASTED = 0
      self.CAN_VIS_OBS_VISION_RANGE = 0.
      self.CAN_RADAR_TARGET_MATCH_INDEX_1 = 0
      self.CAN_RADAR_TARGET_MATCH_INDEX_2 = 0
      self.CAN_RADAR_TARGET_MATCH_INDEX_3 = 0
      self.CAN_RADAR_TARGET_MATCH_INDEX_4 = 0
      self.CAN_RADAR_TGT_MATCH_CONFIDENCE_1 = 0
      self.CAN_RADAR_TGT_MATCH_CONFIDENCE_2 = 0
      self.CAN_RADAR_TGT_MATCH_CONFIDENCE_3 = 0
      self.CAN_RADAR_TGT_MATCH_CONFIDENCE_4 = 0
      self.CAN_VIS_OBS_WIDTH = 0.
      self.CAN_VIS_OBS_VISION_ANGLE_RATE = 0.
      self.CAN_VIS_OBS_VISION_ANGLE_CENTROID = 0.
      self.CAN_VIS_OBS_VISION_RANGE_RATE = 0.
      self.CAN_VIS_OBS_VISION_LATERAL_RATE = 0.
      self.CAN_VIS_OBS_VISION_WIDTH = 0.
      self.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST = 0.
      self.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST = 0.
      self.CAN_VIS_OBS_RANGE_FUNC_ACT_EST = 0.
      self.CAN_VIS_OBS_FCW_CALC_STATUS = 0
      self.CAN_VIS_OBS_PREDICTED_TTC = 0.
      self.CAN_VIS_OBS_PREDICTED_LAT_POS = 0.
      self.CAN_OBJECT_HIGH_DECEL_FLAG = 0
      self.CAN_VIS_HALF_BODY_DETECTION_FLAG = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.pack(_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 109
      (_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG,) = _struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.pack(_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 109
      (_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG,) = _struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B = struct.Struct("<B5fb5Bb6Bf2B2f2Bf8B9fB2f2B")

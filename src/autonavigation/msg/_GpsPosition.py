# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/GpsPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GpsPosition(genpy.Message):
  _md5sum = "23f605ef77c75aec90e8a95d7f54bcb5"
  _type = "autonavigation/GpsPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#gps info is updated
char          gps_flag               
uint32        gps_week
#millisecond in a week
float64       gps_millisecond   
#经纬度，单位为度     
float64	      longitude		      
float64	      laltitude
#高斯投影位置,cm
float64	      gaussX		      
float64       gaussY
#height,     cm
float64         height  
#欧拉角，单位为0.01度                
int32         pitch                   
int32         roll
#欧拉角，单位为0.01度,向东为零度，逆时针0-360                    
int32         azimuth                 

#north速度，单位为cm/s
int32         northVelocity           
int32         eastVelocity
int32         upVelocity
#系统运行状态
int32         positionStatus	      

#imu三轴陀螺速度 0.01degree/s
int32	        rot_x                      
int32           rot_y                      
int32           rot_z                      

#imu三轴加速度  0.01m/s^2
int32           acc_x                      
int32           acc_y                      
int32           acc_z                      
	
"""
  __slots__ = ['gps_flag','gps_week','gps_millisecond','longitude','laltitude','gaussX','gaussY','height','pitch','roll','azimuth','northVelocity','eastVelocity','upVelocity','positionStatus','rot_x','rot_y','rot_z','acc_x','acc_y','acc_z']
  _slot_types = ['char','uint32','float64','float64','float64','float64','float64','float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_flag,gps_week,gps_millisecond,longitude,laltitude,gaussX,gaussY,height,pitch,roll,azimuth,northVelocity,eastVelocity,upVelocity,positionStatus,rot_x,rot_y,rot_z,acc_x,acc_y,acc_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gps_flag is None:
        self.gps_flag = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecond is None:
        self.gps_millisecond = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.laltitude is None:
        self.laltitude = 0.
      if self.gaussX is None:
        self.gaussX = 0.
      if self.gaussY is None:
        self.gaussY = 0.
      if self.height is None:
        self.height = 0.
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
      if self.azimuth is None:
        self.azimuth = 0
      if self.northVelocity is None:
        self.northVelocity = 0
      if self.eastVelocity is None:
        self.eastVelocity = 0
      if self.upVelocity is None:
        self.upVelocity = 0
      if self.positionStatus is None:
        self.positionStatus = 0
      if self.rot_x is None:
        self.rot_x = 0
      if self.rot_y is None:
        self.rot_y = 0
      if self.rot_z is None:
        self.rot_z = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
    else:
      self.gps_flag = 0
      self.gps_week = 0
      self.gps_millisecond = 0.
      self.longitude = 0.
      self.laltitude = 0.
      self.gaussX = 0.
      self.gaussY = 0.
      self.height = 0.
      self.pitch = 0
      self.roll = 0
      self.azimuth = 0
      self.northVelocity = 0
      self.eastVelocity = 0
      self.upVelocity = 0
      self.positionStatus = 0
      self.rot_x = 0
      self.rot_y = 0
      self.rot_z = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI6d13i.pack(_x.gps_flag, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.laltitude, _x.gaussX, _x.gaussY, _x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.gps_flag, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.laltitude, _x.gaussX, _x.gaussY, _x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z,) = _struct_BI6d13i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI6d13i.pack(_x.gps_flag, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.laltitude, _x.gaussX, _x.gaussY, _x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.gps_flag, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.laltitude, _x.gaussX, _x.gaussY, _x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.rot_x, _x.rot_y, _x.rot_z, _x.acc_x, _x.acc_y, _x.acc_z,) = _struct_BI6d13i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI6d13i = struct.Struct("<BI6d13i")

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/TrackerPath.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrackerPath(genpy.Message):
  _md5sum = "89158e0ae4bb1d51fd9a992783240c5c"
  _type = "autonavigation/TrackerPath"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[50] x
int32[50] y
int32[50] leftx
int32[50] lefty
int32[50] rightx
int32[50] righty
int32       pointnum
int32       startindex
int32       endindex
int32       selectindex
"""
  __slots__ = ['x','y','leftx','lefty','rightx','righty','pointnum','startindex','endindex','selectindex']
  _slot_types = ['int32[50]','int32[50]','int32[50]','int32[50]','int32[50]','int32[50]','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,leftx,lefty,rightx,righty,pointnum,startindex,endindex,selectindex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackerPath, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.y is None:
        self.y = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.leftx is None:
        self.leftx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.lefty is None:
        self.lefty = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.rightx is None:
        self.rightx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.righty is None:
        self.righty = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.pointnum is None:
        self.pointnum = 0
      if self.startindex is None:
        self.startindex = 0
      if self.endindex is None:
        self.endindex = 0
      if self.selectindex is None:
        self.selectindex = 0
    else:
      self.x = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.y = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.leftx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.lefty = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.rightx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.righty = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.pointnum = 0
      self.startindex = 0
      self.endindex = 0
      self.selectindex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_50i.pack(*self.x))
      buff.write(_struct_50i.pack(*self.y))
      buff.write(_struct_50i.pack(*self.leftx))
      buff.write(_struct_50i.pack(*self.lefty))
      buff.write(_struct_50i.pack(*self.rightx))
      buff.write(_struct_50i.pack(*self.righty))
      _x = self
      buff.write(_struct_4i.pack(_x.pointnum, _x.startindex, _x.endindex, _x.selectindex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 200
      self.x = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.y = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.leftx = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.lefty = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.rightx = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.righty = _struct_50i.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.pointnum, _x.startindex, _x.endindex, _x.selectindex,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.x.tostring())
      buff.write(self.y.tostring())
      buff.write(self.leftx.tostring())
      buff.write(self.lefty.tostring())
      buff.write(self.rightx.tostring())
      buff.write(self.righty.tostring())
      _x = self
      buff.write(_struct_4i.pack(_x.pointnum, _x.startindex, _x.endindex, _x.selectindex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 200
      self.x = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.y = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.leftx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.lefty = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.rightx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.righty = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      _x = self
      start = end
      end += 16
      (_x.pointnum, _x.startindex, _x.endindex, _x.selectindex,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
_struct_50i = struct.Struct("<50i")

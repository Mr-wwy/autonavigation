# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/RoadMarking.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RoadMarking(genpy.Message):
  _md5sum = "ea0621a9ad4999a280afb0f6a81de50e"
  _type = "autonavigation/RoadMarking"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#地标的中心点
geometry_msgs/Point posCenter

#地标的四个顶点
geometry_msgs/Point pointBottomLeft
geometry_msgs/Point pointBottomRight
geometry_msgs/Point pointTopLeft
geometry_msgs/Point pointTopRight

int32 direction        # 停止线或者斑马线的方向,单位0.01度,与x轴的夹角，逆时针0-36000
int32 width            # 地标的宽度
uint8 sign_type        # 地标的类型,    type = 1,停止线；type = 2, 斑马线；type = 3,直行箭头；type = 4,左转箭头；
                       # type = 5,右转箭头；type = 6,直行左转箭头；type = 7,直行右转箭头；
                       # type = 8,左转掉头箭头；type = 9,掉头箭头；type = 10,菱形；type = 11，泊车位；



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['posCenter','pointBottomLeft','pointBottomRight','pointTopLeft','pointTopRight','direction','width','sign_type']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','int32','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       posCenter,pointBottomLeft,pointBottomRight,pointTopLeft,pointTopRight,direction,width,sign_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadMarking, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.posCenter is None:
        self.posCenter = geometry_msgs.msg.Point()
      if self.pointBottomLeft is None:
        self.pointBottomLeft = geometry_msgs.msg.Point()
      if self.pointBottomRight is None:
        self.pointBottomRight = geometry_msgs.msg.Point()
      if self.pointTopLeft is None:
        self.pointTopLeft = geometry_msgs.msg.Point()
      if self.pointTopRight is None:
        self.pointTopRight = geometry_msgs.msg.Point()
      if self.direction is None:
        self.direction = 0
      if self.width is None:
        self.width = 0
      if self.sign_type is None:
        self.sign_type = 0
    else:
      self.posCenter = geometry_msgs.msg.Point()
      self.pointBottomLeft = geometry_msgs.msg.Point()
      self.pointBottomRight = geometry_msgs.msg.Point()
      self.pointTopLeft = geometry_msgs.msg.Point()
      self.pointTopRight = geometry_msgs.msg.Point()
      self.direction = 0
      self.width = 0
      self.sign_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_15d2iB.pack(_x.posCenter.x, _x.posCenter.y, _x.posCenter.z, _x.pointBottomLeft.x, _x.pointBottomLeft.y, _x.pointBottomLeft.z, _x.pointBottomRight.x, _x.pointBottomRight.y, _x.pointBottomRight.z, _x.pointTopLeft.x, _x.pointTopLeft.y, _x.pointTopLeft.z, _x.pointTopRight.x, _x.pointTopRight.y, _x.pointTopRight.z, _x.direction, _x.width, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.posCenter is None:
        self.posCenter = geometry_msgs.msg.Point()
      if self.pointBottomLeft is None:
        self.pointBottomLeft = geometry_msgs.msg.Point()
      if self.pointBottomRight is None:
        self.pointBottomRight = geometry_msgs.msg.Point()
      if self.pointTopLeft is None:
        self.pointTopLeft = geometry_msgs.msg.Point()
      if self.pointTopRight is None:
        self.pointTopRight = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 129
      (_x.posCenter.x, _x.posCenter.y, _x.posCenter.z, _x.pointBottomLeft.x, _x.pointBottomLeft.y, _x.pointBottomLeft.z, _x.pointBottomRight.x, _x.pointBottomRight.y, _x.pointBottomRight.z, _x.pointTopLeft.x, _x.pointTopLeft.y, _x.pointTopLeft.z, _x.pointTopRight.x, _x.pointTopRight.y, _x.pointTopRight.z, _x.direction, _x.width, _x.sign_type,) = _struct_15d2iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_15d2iB.pack(_x.posCenter.x, _x.posCenter.y, _x.posCenter.z, _x.pointBottomLeft.x, _x.pointBottomLeft.y, _x.pointBottomLeft.z, _x.pointBottomRight.x, _x.pointBottomRight.y, _x.pointBottomRight.z, _x.pointTopLeft.x, _x.pointTopLeft.y, _x.pointTopLeft.z, _x.pointTopRight.x, _x.pointTopRight.y, _x.pointTopRight.z, _x.direction, _x.width, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.posCenter is None:
        self.posCenter = geometry_msgs.msg.Point()
      if self.pointBottomLeft is None:
        self.pointBottomLeft = geometry_msgs.msg.Point()
      if self.pointBottomRight is None:
        self.pointBottomRight = geometry_msgs.msg.Point()
      if self.pointTopLeft is None:
        self.pointTopLeft = geometry_msgs.msg.Point()
      if self.pointTopRight is None:
        self.pointTopRight = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 129
      (_x.posCenter.x, _x.posCenter.y, _x.posCenter.z, _x.pointBottomLeft.x, _x.pointBottomLeft.y, _x.pointBottomLeft.z, _x.pointBottomRight.x, _x.pointBottomRight.y, _x.pointBottomRight.z, _x.pointTopLeft.x, _x.pointTopLeft.y, _x.pointTopLeft.z, _x.pointTopRight.x, _x.pointTopRight.y, _x.pointTopRight.z, _x.direction, _x.width, _x.sign_type,) = _struct_15d2iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_15d2iB = struct.Struct("<15d2iB")

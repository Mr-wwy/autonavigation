# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/LaneObj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LaneObj(genpy.Message):
  _md5sum = "cabfe48ec928bd9380ceaec0c24a1c07"
  _type = "autonavigation/LaneObj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 ID
int32 laneSeq                # 0,1,-1,2,-2,-3,3, from left to right
int32 laneType               # 0: white real, 1:yellow real, 2: white dotted, 3: yellow dotted, 4: predicted
int32 laneProb               # 0-100, probability
int32 lanePtNum
geometry_msgs/Point[]  lanePoint


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['ID','laneSeq','laneType','laneProb','lanePtNum','lanePoint']
  _slot_types = ['int32','int32','int32','int32','int32','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,laneSeq,laneType,laneProb,lanePtNum,lanePoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneObj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.laneSeq is None:
        self.laneSeq = 0
      if self.laneType is None:
        self.laneType = 0
      if self.laneProb is None:
        self.laneProb = 0
      if self.lanePtNum is None:
        self.lanePtNum = 0
      if self.lanePoint is None:
        self.lanePoint = []
    else:
      self.ID = 0
      self.laneSeq = 0
      self.laneType = 0
      self.laneProb = 0
      self.lanePtNum = 0
      self.lanePoint = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum))
      length = len(self.lanePoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanePoint:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lanePoint is None:
        self.lanePoint = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanePoint = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.lanePoint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum))
      length = len(self.lanePoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanePoint:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lanePoint is None:
        self.lanePoint = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanePoint = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.lanePoint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5i = struct.Struct("<5i")
_struct_3d = struct.Struct("<3d")

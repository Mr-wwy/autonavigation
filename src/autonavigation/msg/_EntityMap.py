# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/EntityMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autonavigation.msg
import geometry_msgs.msg
import std_msgs.msg

class EntityMap(genpy.Message):
  _md5sum = "65c3b05b724f5c39ffa07415395ba91f"
  _type = "autonavigation/EntityMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Header      head
LocalPose   localPose
GpsPosition gpsPos

int32        vehicleNum
VehicleObj[] vehicles
int8[]       vehicleLane
int32        pedestrianNum
PedestrianObj[] pedestrians
int8[]       pedestrianLane

int32        laneNum
LaneObj[]    lanes
int32        currentLane

# static obstacles, 50m farther 
int32 farObjectNum
FarStaticObj[] farStaticObjects 

EntityKeyPoint[] keyPoints
int32  keyPointNum

RoadMarking[] parkSpace
int32  parkSpaceNum

int32 roadMarkingNum
RoadMarking[] roadMarkings

int32 signNum      
Sign[] signs

int32 lightNum      
Light[] lights



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autonavigation/LocalPose
#LocalPose msg

float64 time			  
#centimeter  
int32 dr_x
int32 dr_y
int32 dr_z
#0.01degree
int32 dr_heading
int32 dr_roll
int32 dr_pitch		    

#left_front wheel speed,cm/s
int32 lf_speed
#right_front wheel speed,cm/s		    
int32 rf_speed
#left_rear wheel speed,cm/s		    
int32 lr_speed
#right_rear wheel speed,cm/s		    
int32 rr_speed		    

#imu三轴陀螺速度 0.01degree/s
int32 rot_x
int32 rot_y                      
int32 rot_z                      
#imu三轴加速度  0.01m/s^2
int32 acc_x                      
int32 acc_y                      
int32 acc_z                      

int32 batteryState
int32 batteryEnergy           #0-100

#-3000(right)~3000(left) degree  0.01degree/s
int32 steer   
#0(zero)~100(full)                  
int32 brake                 
#0(zero)~100(full)     
int32 fuel      
#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3                 
int8  trans                      
int8  VehicleState
#DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2
int8  mode                       
#dr运行状态
int8 drStatus
#错误状态		    
int8 errorStatus		    
int8 emergency_flag
int8 hardswitch_on


================================================================================
MSG: autonavigation/GpsPosition
#gps info is updated
char          gps_flag               
uint32        gps_week
#millisecond in a week
float64       gps_millisecond   
#经纬度，单位为度     
float64	      longitude		      
float64	      laltitude
#高斯投影位置,cm
float64	      gaussX		      
float64       gaussY
#height,     cm
float64         height  
#欧拉角，单位为0.01度                
int32         pitch                   
int32         roll
#欧拉角，单位为0.01度,向东为零度，逆时针0-360                    
int32         azimuth                 

#north速度，单位为cm/s
int32         northVelocity           
int32         eastVelocity
int32         upVelocity
#系统运行状态
int32         positionStatus	      

#imu三轴陀螺速度 0.01degree/s
int32	        rot_x                      
int32           rot_y                      
int32           rot_z                      

#imu三轴加速度  0.01m/s^2
int32           acc_x                      
int32           acc_y                      
int32           acc_z                      
	

================================================================================
MSG: autonavigation/VehicleObj
#ID num
int32 ID       
# position, cm
int32 centerX
int32 centerY
# cm/s
int32 speed        
# 0.01degree   
int32 speedDirection  
int32 height         
# car, truck, bicycle, big obj, small obj, unknown obj 
int32 vehclass     

geometry_msgs/Polygon vehPolygon      

int32   vertexNumber
int32[] vertexX
int32[] vertexY

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: autonavigation/PedestrianObj
#ID num
int32 ID       
# position, cm
int32 centerX         
int32 centerY
#radius
int32 radius
# cm/s
int32 speed        
# 0.01degree , 0-36000 
int32 direction  
int32 height


================================================================================
MSG: autonavigation/LaneObj
int32 ID
int32 laneSeq                # 0,1,-1,2,-2,-3,3, from left to right
int32 laneType               # 0: white real, 1:yellow real, 2: white dotted, 3: yellow dotted, 4: predicted
int32 laneProb               # 0-100, probability
int32 lanePtNum
geometry_msgs/Point[]  lanePoint


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: autonavigation/FarStaticObj
int32 VertexNumber
int32[] ConvexX  # do not need many vertex points
int32[] ConvexY
int32 CenterX
int32 CenterY


================================================================================
MSG: autonavigation/EntityKeyPoint
int32 x
int32 y
int32 direction   #  0-36000，道路方向
int32 type        #  0: 当前路口， 1: 左出口点， 2：右出口点， 3： 直行出口点


================================================================================
MSG: autonavigation/RoadMarking
#地标的中心点
geometry_msgs/Point posCenter

#地标的四个顶点
geometry_msgs/Point pointBottomLeft
geometry_msgs/Point pointBottomRight
geometry_msgs/Point pointTopLeft
geometry_msgs/Point pointTopRight

int32 direction        # 停止线或者斑马线的方向,单位0.01度,与x轴的夹角，逆时针0-36000
int32 width            # 地标的宽度
uint8 sign_type        # 地标的类型,    type = 1,停止线；type = 2, 斑马线；type = 3,直行箭头；type = 4,左转箭头；
                       # type = 5,右转箭头；type = 6,直行左转箭头；type = 7,直行右转箭头；
                       # type = 8,左转掉头箭头；type = 9,掉头箭头；type = 10,菱形；type = 11，泊车位；



================================================================================
MSG: autonavigation/Sign
uint8 pos_flag       #  交通标志位置信息 
int32 x              #  x坐标，厘米为单位
int32 y              #  y坐标，厘米为单位
uint8 sign_type      #  交通标志类型信息


#
# pos_flag
#  0: 没有位置信息
#  1: 位置信息有效

# sign_type:
#  0：无路标        
#  1：禁止左转
#  2：禁止右转
#  3：禁止直行
#  4：禁止向左和向右
#  5：禁止向左和直行
#  6：禁止向右和直行
#  7：禁止驶入
#  8：停车
#  9： 前方学校 （减速）       
#  10：注意行人 （减速）       
#  11：路面不平 （减速）      
#  12：路面施工 （减速）
#  13：直行
#  14：向左转
#  15：向右转
#  16：直行和左转
#  17：直行和右转
#  18：向左和向右
#  19：靠右行驶        
#  20：靠左行驶        
#  21：鸣喇叭 ------- 无    
#  22：环岛行驶 ------- 无     
#  23：人行横道        
#  24：允许掉头        
#  25：停车位          
#  26：禁止掉头  
#  27：限速10公里 （减速）
#  28：解除限速10公里 ------- 无
#  29：限速15公里
#  30：限速20公里
#  31：限速25公里
#  32: 三角修车标志

================================================================================
MSG: autonavigation/Light
uint8 pos_flag            #位置是否起作用
int32 x
int32 y
uint8 forward_light_type  #直行灯信息
uint8 left_light_type     #左转灯信息
uint8 right_light_type    #右转灯信息
uint8 uturn_light_type    #U Turn灯信息
"""
  __slots__ = ['head','localPose','gpsPos','vehicleNum','vehicles','vehicleLane','pedestrianNum','pedestrians','pedestrianLane','laneNum','lanes','currentLane','farObjectNum','farStaticObjects','keyPoints','keyPointNum','parkSpace','parkSpaceNum','roadMarkingNum','roadMarkings','signNum','signs','lightNum','lights']
  _slot_types = ['std_msgs/Header','autonavigation/LocalPose','autonavigation/GpsPosition','int32','autonavigation/VehicleObj[]','int8[]','int32','autonavigation/PedestrianObj[]','int8[]','int32','autonavigation/LaneObj[]','int32','int32','autonavigation/FarStaticObj[]','autonavigation/EntityKeyPoint[]','int32','autonavigation/RoadMarking[]','int32','int32','autonavigation/RoadMarking[]','int32','autonavigation/Sign[]','int32','autonavigation/Light[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head,localPose,gpsPos,vehicleNum,vehicles,vehicleLane,pedestrianNum,pedestrians,pedestrianLane,laneNum,lanes,currentLane,farObjectNum,farStaticObjects,keyPoints,keyPointNum,parkSpace,parkSpaceNum,roadMarkingNum,roadMarkings,signNum,signs,lightNum,lights

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EntityMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.vehicleNum is None:
        self.vehicleNum = 0
      if self.vehicles is None:
        self.vehicles = []
      if self.vehicleLane is None:
        self.vehicleLane = []
      if self.pedestrianNum is None:
        self.pedestrianNum = 0
      if self.pedestrians is None:
        self.pedestrians = []
      if self.pedestrianLane is None:
        self.pedestrianLane = []
      if self.laneNum is None:
        self.laneNum = 0
      if self.lanes is None:
        self.lanes = []
      if self.currentLane is None:
        self.currentLane = 0
      if self.farObjectNum is None:
        self.farObjectNum = 0
      if self.farStaticObjects is None:
        self.farStaticObjects = []
      if self.keyPoints is None:
        self.keyPoints = []
      if self.keyPointNum is None:
        self.keyPointNum = 0
      if self.parkSpace is None:
        self.parkSpace = []
      if self.parkSpaceNum is None:
        self.parkSpaceNum = 0
      if self.roadMarkingNum is None:
        self.roadMarkingNum = 0
      if self.roadMarkings is None:
        self.roadMarkings = []
      if self.signNum is None:
        self.signNum = 0
      if self.signs is None:
        self.signs = []
      if self.lightNum is None:
        self.lightNum = 0
      if self.lights is None:
        self.lights = []
    else:
      self.head = std_msgs.msg.Header()
      self.localPose = autonavigation.msg.LocalPose()
      self.gpsPos = autonavigation.msg.GpsPosition()
      self.vehicleNum = 0
      self.vehicles = []
      self.vehicleLane = []
      self.pedestrianNum = 0
      self.pedestrians = []
      self.pedestrianLane = []
      self.laneNum = 0
      self.lanes = []
      self.currentLane = 0
      self.farObjectNum = 0
      self.farStaticObjects = []
      self.keyPoints = []
      self.keyPointNum = 0
      self.parkSpace = []
      self.parkSpaceNum = 0
      self.roadMarkingNum = 0
      self.roadMarkings = []
      self.signNum = 0
      self.signs = []
      self.lightNum = 0
      self.lights = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs))
      _x = self.head.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d21i7bBI6d14i.pack(_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.vehicleNum))
      length = len(self.vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicles:
        _x = val1
        buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass))
        _v1 = val1.vehPolygon
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          _x = val3
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_i.pack(val1.vertexNumber))
        length = len(val1.vertexX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.vertexX))
        length = len(val1.vertexY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.vertexY))
      length = len(self.vehicleLane)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.vehicleLane))
      buff.write(_struct_i.pack(self.pedestrianNum))
      length = len(self.pedestrians)
      buff.write(_struct_I.pack(length))
      for val1 in self.pedestrians:
        _x = val1
        buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.radius, _x.speed, _x.direction, _x.height))
      length = len(self.pedestrianLane)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.pedestrianLane))
      buff.write(_struct_i.pack(self.laneNum))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_struct_5i.pack(_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum))
        length = len(val1.lanePoint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanePoint:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_2i.pack(_x.currentLane, _x.farObjectNum))
      length = len(self.farStaticObjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.farStaticObjects:
        buff.write(_struct_i.pack(val1.VertexNumber))
        length = len(val1.ConvexX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.ConvexX))
        length = len(val1.ConvexY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.ConvexY))
        _x = val1
        buff.write(_struct_2i.pack(_x.CenterX, _x.CenterY))
      length = len(self.keyPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyPoints:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.direction, _x.type))
      buff.write(_struct_i.pack(self.keyPointNum))
      length = len(self.parkSpace)
      buff.write(_struct_I.pack(length))
      for val1 in self.parkSpace:
        _v2 = val1.posCenter
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = val1.pointBottomLeft
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.pointBottomRight
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.pointTopLeft
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.pointTopRight
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2iB.pack(_x.direction, _x.width, _x.sign_type))
      _x = self
      buff.write(_struct_2i.pack(_x.parkSpaceNum, _x.roadMarkingNum))
      length = len(self.roadMarkings)
      buff.write(_struct_I.pack(length))
      for val1 in self.roadMarkings:
        _v7 = val1.posCenter
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = val1.pointBottomLeft
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.pointBottomRight
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = val1.pointTopLeft
        _x = _v10
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v11 = val1.pointTopRight
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2iB.pack(_x.direction, _x.width, _x.sign_type))
      buff.write(_struct_i.pack(self.signNum))
      length = len(self.signs)
      buff.write(_struct_I.pack(length))
      for val1 in self.signs:
        _x = val1
        buff.write(_struct_B2iB.pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
      buff.write(_struct_i.pack(self.lightNum))
      length = len(self.lights)
      buff.write(_struct_I.pack(length))
      for val1 in self.lights:
        _x = val1
        buff.write(_struct_B2i4B.pack(_x.pos_flag, _x.x, _x.y, _x.forward_light_type, _x.left_light_type, _x.right_light_type, _x.uturn_light_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.vehicles is None:
        self.vehicles = None
      if self.pedestrians is None:
        self.pedestrians = None
      if self.lanes is None:
        self.lanes = None
      if self.farStaticObjects is None:
        self.farStaticObjects = None
      if self.keyPoints is None:
        self.keyPoints = None
      if self.parkSpace is None:
        self.parkSpace = None
      if self.roadMarkings is None:
        self.roadMarkings = None
      if self.signs is None:
        self.signs = None
      if self.lights is None:
        self.lights = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.head.frame_id = str[start:end].decode('utf-8')
      else:
        self.head.frame_id = str[start:end]
      _x = self
      start = end
      end += 208
      (_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.vehicleNum,) = _struct_d21i7bBI6d14i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicles = []
      for i in range(0, length):
        val1 = autonavigation.msg.VehicleObj()
        _x = val1
        start = end
        end += 28
        (_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass,) = _struct_7i.unpack(str[start:end])
        _v12 = val1.vehPolygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v12.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          _v12.points.append(val3)
        start = end
        end += 4
        (val1.vertexNumber,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.vertexX = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.vertexY = struct.unpack(pattern, str[start:end])
        self.vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.vehicleLane = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.pedestrianNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pedestrians = []
      for i in range(0, length):
        val1 = autonavigation.msg.PedestrianObj()
        _x = val1
        start = end
        end += 28
        (_x.ID, _x.centerX, _x.centerY, _x.radius, _x.speed, _x.direction, _x.height,) = _struct_7i.unpack(str[start:end])
        self.pedestrians.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.pedestrianLane = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.laneNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = autonavigation.msg.LaneObj()
        _x = val1
        start = end
        end += 20
        (_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum,) = _struct_5i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanePoint = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.lanePoint.append(val2)
        self.lanes.append(val1)
      _x = self
      start = end
      end += 8
      (_x.currentLane, _x.farObjectNum,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.farStaticObjects = []
      for i in range(0, length):
        val1 = autonavigation.msg.FarStaticObj()
        start = end
        end += 4
        (val1.VertexNumber,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ConvexX = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ConvexY = struct.unpack(pattern, str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _struct_2i.unpack(str[start:end])
        self.farStaticObjects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyPoints = []
      for i in range(0, length):
        val1 = autonavigation.msg.EntityKeyPoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.direction, _x.type,) = _struct_4i.unpack(str[start:end])
        self.keyPoints.append(val1)
      start = end
      end += 4
      (self.keyPointNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parkSpace = []
      for i in range(0, length):
        val1 = autonavigation.msg.RoadMarking()
        _v13 = val1.posCenter
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v14 = val1.pointBottomLeft
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v15 = val1.pointBottomRight
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = val1.pointTopLeft
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v17 = val1.pointTopRight
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.direction, _x.width, _x.sign_type,) = _struct_2iB.unpack(str[start:end])
        self.parkSpace.append(val1)
      _x = self
      start = end
      end += 8
      (_x.parkSpaceNum, _x.roadMarkingNum,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roadMarkings = []
      for i in range(0, length):
        val1 = autonavigation.msg.RoadMarking()
        _v18 = val1.posCenter
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v19 = val1.pointBottomLeft
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v20 = val1.pointBottomRight
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v21 = val1.pointTopLeft
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v22 = val1.pointTopRight
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.direction, _x.width, _x.sign_type,) = _struct_2iB.unpack(str[start:end])
        self.roadMarkings.append(val1)
      start = end
      end += 4
      (self.signNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signs = []
      for i in range(0, length):
        val1 = autonavigation.msg.Sign()
        _x = val1
        start = end
        end += 10
        (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _struct_B2iB.unpack(str[start:end])
        self.signs.append(val1)
      start = end
      end += 4
      (self.lightNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lights = []
      for i in range(0, length):
        val1 = autonavigation.msg.Light()
        _x = val1
        start = end
        end += 13
        (_x.pos_flag, _x.x, _x.y, _x.forward_light_type, _x.left_light_type, _x.right_light_type, _x.uturn_light_type,) = _struct_B2i4B.unpack(str[start:end])
        self.lights.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs))
      _x = self.head.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d21i7bBI6d14i.pack(_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.vehicleNum))
      length = len(self.vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicles:
        _x = val1
        buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass))
        _v23 = val1.vehPolygon
        length = len(_v23.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v23.points:
          _x = val3
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_i.pack(val1.vertexNumber))
        length = len(val1.vertexX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.vertexX.tostring())
        length = len(val1.vertexY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.vertexY.tostring())
      length = len(self.vehicleLane)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.vehicleLane.tostring())
      buff.write(_struct_i.pack(self.pedestrianNum))
      length = len(self.pedestrians)
      buff.write(_struct_I.pack(length))
      for val1 in self.pedestrians:
        _x = val1
        buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.radius, _x.speed, _x.direction, _x.height))
      length = len(self.pedestrianLane)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.pedestrianLane.tostring())
      buff.write(_struct_i.pack(self.laneNum))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _x = val1
        buff.write(_struct_5i.pack(_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum))
        length = len(val1.lanePoint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanePoint:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_2i.pack(_x.currentLane, _x.farObjectNum))
      length = len(self.farStaticObjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.farStaticObjects:
        buff.write(_struct_i.pack(val1.VertexNumber))
        length = len(val1.ConvexX)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.ConvexX.tostring())
        length = len(val1.ConvexY)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.ConvexY.tostring())
        _x = val1
        buff.write(_struct_2i.pack(_x.CenterX, _x.CenterY))
      length = len(self.keyPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyPoints:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.direction, _x.type))
      buff.write(_struct_i.pack(self.keyPointNum))
      length = len(self.parkSpace)
      buff.write(_struct_I.pack(length))
      for val1 in self.parkSpace:
        _v24 = val1.posCenter
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v25 = val1.pointBottomLeft
        _x = _v25
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v26 = val1.pointBottomRight
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v27 = val1.pointTopLeft
        _x = _v27
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v28 = val1.pointTopRight
        _x = _v28
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2iB.pack(_x.direction, _x.width, _x.sign_type))
      _x = self
      buff.write(_struct_2i.pack(_x.parkSpaceNum, _x.roadMarkingNum))
      length = len(self.roadMarkings)
      buff.write(_struct_I.pack(length))
      for val1 in self.roadMarkings:
        _v29 = val1.posCenter
        _x = _v29
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v30 = val1.pointBottomLeft
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v31 = val1.pointBottomRight
        _x = _v31
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v32 = val1.pointTopLeft
        _x = _v32
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v33 = val1.pointTopRight
        _x = _v33
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2iB.pack(_x.direction, _x.width, _x.sign_type))
      buff.write(_struct_i.pack(self.signNum))
      length = len(self.signs)
      buff.write(_struct_I.pack(length))
      for val1 in self.signs:
        _x = val1
        buff.write(_struct_B2iB.pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
      buff.write(_struct_i.pack(self.lightNum))
      length = len(self.lights)
      buff.write(_struct_I.pack(length))
      for val1 in self.lights:
        _x = val1
        buff.write(_struct_B2i4B.pack(_x.pos_flag, _x.x, _x.y, _x.forward_light_type, _x.left_light_type, _x.right_light_type, _x.uturn_light_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.vehicles is None:
        self.vehicles = None
      if self.pedestrians is None:
        self.pedestrians = None
      if self.lanes is None:
        self.lanes = None
      if self.farStaticObjects is None:
        self.farStaticObjects = None
      if self.keyPoints is None:
        self.keyPoints = None
      if self.parkSpace is None:
        self.parkSpace = None
      if self.roadMarkings is None:
        self.roadMarkings = None
      if self.signs is None:
        self.signs = None
      if self.lights is None:
        self.lights = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.head.frame_id = str[start:end].decode('utf-8')
      else:
        self.head.frame_id = str[start:end]
      _x = self
      start = end
      end += 208
      (_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.vehicleNum,) = _struct_d21i7bBI6d14i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicles = []
      for i in range(0, length):
        val1 = autonavigation.msg.VehicleObj()
        _x = val1
        start = end
        end += 28
        (_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass,) = _struct_7i.unpack(str[start:end])
        _v34 = val1.vehPolygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v34.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          _v34.points.append(val3)
        start = end
        end += 4
        (val1.vertexNumber,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.vertexX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.vertexY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.vehicleLane = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (self.pedestrianNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pedestrians = []
      for i in range(0, length):
        val1 = autonavigation.msg.PedestrianObj()
        _x = val1
        start = end
        end += 28
        (_x.ID, _x.centerX, _x.centerY, _x.radius, _x.speed, _x.direction, _x.height,) = _struct_7i.unpack(str[start:end])
        self.pedestrians.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.pedestrianLane = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (self.laneNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = autonavigation.msg.LaneObj()
        _x = val1
        start = end
        end += 20
        (_x.ID, _x.laneSeq, _x.laneType, _x.laneProb, _x.lanePtNum,) = _struct_5i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanePoint = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.lanePoint.append(val2)
        self.lanes.append(val1)
      _x = self
      start = end
      end += 8
      (_x.currentLane, _x.farObjectNum,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.farStaticObjects = []
      for i in range(0, length):
        val1 = autonavigation.msg.FarStaticObj()
        start = end
        end += 4
        (val1.VertexNumber,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ConvexX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ConvexY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _struct_2i.unpack(str[start:end])
        self.farStaticObjects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyPoints = []
      for i in range(0, length):
        val1 = autonavigation.msg.EntityKeyPoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.direction, _x.type,) = _struct_4i.unpack(str[start:end])
        self.keyPoints.append(val1)
      start = end
      end += 4
      (self.keyPointNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parkSpace = []
      for i in range(0, length):
        val1 = autonavigation.msg.RoadMarking()
        _v35 = val1.posCenter
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v36 = val1.pointBottomLeft
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v37 = val1.pointBottomRight
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v38 = val1.pointTopLeft
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v39 = val1.pointTopRight
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.direction, _x.width, _x.sign_type,) = _struct_2iB.unpack(str[start:end])
        self.parkSpace.append(val1)
      _x = self
      start = end
      end += 8
      (_x.parkSpaceNum, _x.roadMarkingNum,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roadMarkings = []
      for i in range(0, length):
        val1 = autonavigation.msg.RoadMarking()
        _v40 = val1.posCenter
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v41 = val1.pointBottomLeft
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v42 = val1.pointBottomRight
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v43 = val1.pointTopLeft
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v44 = val1.pointTopRight
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.direction, _x.width, _x.sign_type,) = _struct_2iB.unpack(str[start:end])
        self.roadMarkings.append(val1)
      start = end
      end += 4
      (self.signNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.signs = []
      for i in range(0, length):
        val1 = autonavigation.msg.Sign()
        _x = val1
        start = end
        end += 10
        (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _struct_B2iB.unpack(str[start:end])
        self.signs.append(val1)
      start = end
      end += 4
      (self.lightNum,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lights = []
      for i in range(0, length):
        val1 = autonavigation.msg.Light()
        _x = val1
        start = end
        end += 13
        (_x.pos_flag, _x.x, _x.y, _x.forward_light_type, _x.left_light_type, _x.right_light_type, _x.uturn_light_type,) = _struct_B2i4B.unpack(str[start:end])
        self.lights.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2i4B = struct.Struct("<B2i4B")
_struct_i = struct.Struct("<i")
_struct_7i = struct.Struct("<7i")
_struct_d21i7bBI6d14i = struct.Struct("<d21i7bBI6d14i")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_5i = struct.Struct("<5i")
_struct_4i = struct.Struct("<4i")
_struct_B2iB = struct.Struct("<B2iB")
_struct_2iB = struct.Struct("<2iB")
_struct_3f = struct.Struct("<3f")
_struct_3d = struct.Struct("<3d")

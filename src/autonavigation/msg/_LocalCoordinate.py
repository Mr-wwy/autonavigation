# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/LocalCoordinate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocalCoordinate(genpy.Message):
  _md5sum = "d3bcfb0404f035917578c8fa5ddf9675"
  _type = "autonavigation/LocalCoordinate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 z_x
int32 z_y
int32 g_x
int32 g_y
int32 heading
int32 pitch
int32 roll
int32 height
uint8 class_id

"""
  __slots__ = ['z_x','z_y','g_x','g_y','heading','pitch','roll','height','class_id']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       z_x,z_y,g_x,g_y,heading,pitch,roll,height,class_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalCoordinate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.z_x is None:
        self.z_x = 0
      if self.z_y is None:
        self.z_y = 0
      if self.g_x is None:
        self.g_x = 0
      if self.g_y is None:
        self.g_y = 0
      if self.heading is None:
        self.heading = 0
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
      if self.height is None:
        self.height = 0
      if self.class_id is None:
        self.class_id = 0
    else:
      self.z_x = 0
      self.z_y = 0
      self.g_x = 0
      self.g_y = 0
      self.heading = 0
      self.pitch = 0
      self.roll = 0
      self.height = 0
      self.class_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8iB.pack(_x.z_x, _x.z_y, _x.g_x, _x.g_y, _x.heading, _x.pitch, _x.roll, _x.height, _x.class_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.z_x, _x.z_y, _x.g_x, _x.g_y, _x.heading, _x.pitch, _x.roll, _x.height, _x.class_id,) = _struct_8iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8iB.pack(_x.z_x, _x.z_y, _x.g_x, _x.g_y, _x.heading, _x.pitch, _x.roll, _x.height, _x.class_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.z_x, _x.z_y, _x.g_x, _x.g_y, _x.heading, _x.pitch, _x.roll, _x.height, _x.class_id,) = _struct_8iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8iB = struct.Struct("<8iB")

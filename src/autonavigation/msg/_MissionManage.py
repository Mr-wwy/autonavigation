# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/MissionManage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MissionManage(genpy.Message):
  _md5sum = "e6b03ffe4a0683b6ce7c6780ec3601c5"
  _type = "autonavigation/MissionManage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32       current_key        #当前使用和显示载车的id
uint32       gps_week           #GPS周，时间零点为1980年1月6日零点，每1024周为一个循环周期
uint64       gps_millisecond    #GPS毫秒，以周的零点开始的毫秒数
uint8        reserve1           #预留
uint8        reserve2
uint8        reserve3
uint8        reserve4
uint8        reserve5
uint8        reserve6
uint8        reserve7
uint8        reserve8
"""
  __slots__ = ['current_key','gps_week','gps_millisecond','reserve1','reserve2','reserve3','reserve4','reserve5','reserve6','reserve7','reserve8']
  _slot_types = ['uint32','uint32','uint64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_key,gps_week,gps_millisecond,reserve1,reserve2,reserve3,reserve4,reserve5,reserve6,reserve7,reserve8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionManage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.current_key is None:
        self.current_key = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecond is None:
        self.gps_millisecond = 0
      if self.reserve1 is None:
        self.reserve1 = 0
      if self.reserve2 is None:
        self.reserve2 = 0
      if self.reserve3 is None:
        self.reserve3 = 0
      if self.reserve4 is None:
        self.reserve4 = 0
      if self.reserve5 is None:
        self.reserve5 = 0
      if self.reserve6 is None:
        self.reserve6 = 0
      if self.reserve7 is None:
        self.reserve7 = 0
      if self.reserve8 is None:
        self.reserve8 = 0
    else:
      self.current_key = 0
      self.gps_week = 0
      self.gps_millisecond = 0
      self.reserve1 = 0
      self.reserve2 = 0
      self.reserve3 = 0
      self.reserve4 = 0
      self.reserve5 = 0
      self.reserve6 = 0
      self.reserve7 = 0
      self.reserve8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IQ8B.pack(_x.current_key, _x.gps_week, _x.gps_millisecond, _x.reserve1, _x.reserve2, _x.reserve3, _x.reserve4, _x.reserve5, _x.reserve6, _x.reserve7, _x.reserve8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.current_key, _x.gps_week, _x.gps_millisecond, _x.reserve1, _x.reserve2, _x.reserve3, _x.reserve4, _x.reserve5, _x.reserve6, _x.reserve7, _x.reserve8,) = _struct_2IQ8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IQ8B.pack(_x.current_key, _x.gps_week, _x.gps_millisecond, _x.reserve1, _x.reserve2, _x.reserve3, _x.reserve4, _x.reserve5, _x.reserve6, _x.reserve7, _x.reserve8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.current_key, _x.gps_week, _x.gps_millisecond, _x.reserve1, _x.reserve2, _x.reserve3, _x.reserve4, _x.reserve5, _x.reserve6, _x.reserve7, _x.reserve8,) = _struct_2IQ8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IQ8B = struct.Struct("<2IQ8B")

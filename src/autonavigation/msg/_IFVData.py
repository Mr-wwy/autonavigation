# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/IFVData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autonavigation.msg
import std_msgs.msg

class IFVData(genpy.Message):
  _md5sum = "e582aced99348ba7bbdf747ed5cb5dab"
  _type = "autonavigation/IFVData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Header      head
LocalPose   localPose
GpsPosition gpsPos


#左车道线
float32     LKA_LANE_OFFSET_LEFT                 #LNTRK_HOST_STATE_MSG_1::CAN_LANE_OFFSET_LEFT
int8        LKA_LANE_DET_CONFIDENCE_LEFT         #LNTRK_HOST_STATE_MSG_1::CAN_LANE_DET_CONFIDENCE_LEFT
uint8       LKA_LANE_BOUNDARY_TYPE_LEFT          #LNTRK_HOST_STATE_MSG_2::CAN_LANE_BOUNDARY_TYPE_LEFT
int8        LKA_LEFT_MODEL_DEGREE                #LNTRK_HOST_STATE_MSG_2::CAN_LKA_LEFT_MODEL_DEGREE
float32     LKA_CURVATURE_LEFT                   #VFP_LKA_LANE_LEFT::CAN_LKA_CURVATURE_LEFT
float64     LKA_CURVATURE_DERIVATIVE_LEFT        #VFP_LKA_LANE_LEFT::CAN_LKA_CURVATURE_DERIVATIVE_LEFT
float32     LKA_HEADING_ANGLE_LEFT               #VFP_LKA_LANE_LEFT::CAN_LKA_HEADING_ANGLE_LEFT
uint8       LKA_YELLOW_LANE_MARKER_LEFT          #VFP_LKA_LANE_LEFT::CAN_LKA_YELLOW_LANE_MARKER_LEFT
float32     LKA_VIEW_RANGE_LEFT                  #VFP_LKA_LANE_LEFT::CAN_LKA_VIEW_RANGE_LEFT
uint8       LKA_VIEW_RANGE_AVAILABILITY_LEFT     #VFP_LKA_LANE_LEFT::CAN_LKA_VIEW_RANGE_AVAILABILITY_LEFT

#右车道线
float32     LKA_LANE_OFFSET_RIGHT                #LNTRK_HOST_STATE_MSG_1::CAN_LANE_OFFSET_RIGHT
int8        LKA_LANE_DET_CONFIDENCE_RIGHT        #LNTRK_HOST_STATE_MSG_1::CAN_LANE_DET_CONFIDENCE_RIGHT
uint8       LKA_LANE_BOUNDARY_TYPE_RIGHT         #LNTRK_HOST_STATE_MSG_2::CAN_LANE_BOUNDARY_TYPE_RIGHT
int8        LKA_RIGHT_MODEL_DEGREE               #LNTRK_HOST_STATE_MSG_2::CAN_LKA_RIGHT_MODEL_DEGREE
float32     LKA_CURVATURE_RIGHT                  #VFP_LKA_LANE_RIGHT::CAN_LKA_CURVATURE_RIGHT
float64     LKA_CURVATURE_DERIVATIVE_RIGHT       #VFP_LKA_LANE_RIGHT::CAN_LKA_CURVATURE_DERIVATIVE_RIGHT
float32     LKA_HEADING_ANGLE_RIGHT              #VFP_LKA_LANE_RIGHT::CAN_LKA_HEADING_ANGLE_RIGHT
uint8       LKA_YELLOW_LANE_MARKER_RIGHT         #VFP_LKA_LANE_RIGHT::CAN_LKA_YELLOW_LANE_MARKER_RIGHT
float32     LKA_VIEW_RANGE_RIGHT                 #VFP_LKA_LANE_RIGHT::CAN_LKA_VIEW_RANGE_RIGHT
uint8       LKA_VIEW_RANGE_AVAILABILITY_RIGHT    #VFP_LKA_LANE_RIGHT::CAN_LKA_VIEW_RANGE_AVAILABILITY_RIGHT

#左车道线2
float32     LKA_LANE_OFFSET_NEXT_LEFT
int8        LKA_LANE_DET_CONFIDENCE_NEXT_LEFT
uint8       LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT
int8        LKA_NEXT_LEFT_MODEL_DEGREE
float32     LKA_CURVATURE_NEXT_LEFT
float64     LKA_CURVATURE_DERIVATIVE_NEXT_LEFT
float32     LKA_HEADING_ANGLE_NEXT_LEFT
uint8       LKA_YELLOW_LANE_MARKER_NEXT_LEFT
float32     LKA_VIEW_RANGE_NEXT_LEFT
uint8       LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT

#右车道线2
float32     LKA_LANE_OFFSET_NEXT_RIGHT
int8        LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT
uint8       LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT
int8        LKA_NEXT_RIGHT_MODEL_DEGREE
float32     LKA_CURVATURE_NEXT_RIGHT
float64     LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT
float32     LKA_HEADING_ANGLE_NEXT_RIGHT
uint8       LKA_YELLOW_LANE_MARKER_NEXT_RIGHT
float32     LKA_VIEW_RANGE_NEXT_RIGHT
uint8       LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT


#物体
uint8       CAN_NO_OF_VIS_OBS_OUTPUT             #VFP_SYS_STATUS_MSG2::CAN_NO_OF_VIS_OBS_OUTPUT
VisObs[]    CAN_VIS_OBS

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autonavigation/LocalPose
#LocalPose msg

float64 time			  
#centimeter  
int32 dr_x
int32 dr_y
int32 dr_z
#0.01degree
int32 dr_heading
int32 dr_roll
int32 dr_pitch		    

#left_front wheel speed,cm/s
int32 lf_speed
#right_front wheel speed,cm/s		    
int32 rf_speed
#left_rear wheel speed,cm/s		    
int32 lr_speed
#right_rear wheel speed,cm/s		    
int32 rr_speed		    

#imu三轴陀螺速度 0.01degree/s
int32 rot_x
int32 rot_y                      
int32 rot_z                      
#imu三轴加速度  0.01m/s^2
int32 acc_x                      
int32 acc_y                      
int32 acc_z                      

int32 batteryState
int32 batteryEnergy           #0-100

#-3000(right)~3000(left) degree  0.01degree/s
int32 steer   
#0(zero)~100(full)                  
int32 brake                 
#0(zero)~100(full)     
int32 fuel      
#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3                 
int8  trans                      
int8  VehicleState
#DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2
int8  mode                       
#dr运行状态
int8 drStatus
#错误状态		    
int8 errorStatus		    
int8 emergency_flag
int8 hardswitch_on


================================================================================
MSG: autonavigation/GpsPosition
#gps info is updated
char          gps_flag               
uint32        gps_week
#millisecond in a week
float64       gps_millisecond   
#经纬度，单位为度     
float64	      longitude		      
float64	      laltitude
#高斯投影位置,cm
float64	      gaussX		      
float64       gaussY
#height,     cm
float64         height  
#欧拉角，单位为0.01度                
int32         pitch                   
int32         roll
#欧拉角，单位为0.01度,向东为零度，逆时针0-360                    
int32         azimuth                 

#north速度，单位为cm/s
int32         northVelocity           
int32         eastVelocity
int32         upVelocity
#系统运行状态
int32         positionStatus	      

#imu三轴陀螺速度 0.01degree/s
int32	        rot_x                      
int32           rot_y                      
int32           rot_z                      

#imu三轴加速度  0.01m/s^2
int32           acc_x                      
int32           acc_y                      
int32           acc_z                      
	

================================================================================
MSG: autonavigation/VisObs
#VISION_OBSTACLE_MSG1
uint8            CAN_VIS_OBS_COUNT
float32          CAN_VIS_OBS_ANGLE_RATE
float32          CAN_VIS_OBS_ANGLE_CENTROID
float32          CAN_VIS_OBS_RANGE_RATE
float32          CAN_VIS_OBS_RANGE 
float32          CAN_VIS_OBS_LATERAL_RATE

#VISION_OBSTACLE_MSG2
int8             CAN_VIS_OBS_MANEUVER_STATE
uint8            CAN_VIS_OBS_DETECTION_STATUS
uint8            CAN_VIS_OBS_MOTION_TYPE
uint8            CAN_VIS_OBS_CROSSING_STATUS
uint8            CAN_VIS_OBS_ID
uint8            CAN_VIS_OBS_LOW_CONFIDENCE
int8             CAN_VIS_OBS_LANE_NUMBER
uint8            CAN_VIS_OBS_TURN_INDICATOR
uint8            CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR
uint8            CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF
uint8            CAN_VIS_OBS_OBJECT_IN_PATH
uint8            CAN_VIS_OBS_HIGH_DECELERATION
uint8            CAN_VIS_OBS_FCW_STATUS
float32          CAN_VIS_OBS_TTC_WITHOUT_ACC
uint8            CAN_VIS_OBS_ME_AWS
uint8            CAN_VIS_OBS_CIPO
float32          CAN_VIS_OBS_TTC_WITH_ACC
float32          CAN_VIS_OBS_TTC_WITH_ACC_CONF
uint8            CAN_VIS_OBS_CLASSIFICATION

#VISION_OBSTACLE_MSG3
uint8            CAN_RADAR_TARGET_MATCH_COASTED
float32          CAN_VIS_OBS_VISION_RANGE
uint8            CAN_RADAR_TARGET_MATCH_INDEX_1
uint8            CAN_RADAR_TARGET_MATCH_INDEX_2
uint8            CAN_RADAR_TARGET_MATCH_INDEX_3
uint8            CAN_RADAR_TARGET_MATCH_INDEX_4
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_1
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_2
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_3
uint8            CAN_RADAR_TGT_MATCH_CONFIDENCE_4
float32          CAN_VIS_OBS_WIDTH


#VISION_OBSTACLE_MSG4
float32          CAN_VIS_OBS_VISION_ANGLE_RATE
float32          CAN_VIS_OBS_VISION_ANGLE_CENTROID
float32          CAN_VIS_OBS_VISION_RANGE_RATE
float32          CAN_VIS_OBS_VISION_LATERAL_RATE
float32          CAN_VIS_OBS_VISION_WIDTH

#VISION_OBSTACLE_MSG5
float32          CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST
float32          CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST
float32          CAN_VIS_OBS_RANGE_FUNC_ACT_EST
uint8            CAN_VIS_OBS_FCW_CALC_STATUS
float32          CAN_VIS_OBS_PREDICTED_TTC
float32          CAN_VIS_OBS_PREDICTED_LAT_POS
uint8            CAN_OBJECT_HIGH_DECEL_FLAG
uint8            CAN_VIS_HALF_BODY_DETECTION_FLAG
"""
  __slots__ = ['head','localPose','gpsPos','LKA_LANE_OFFSET_LEFT','LKA_LANE_DET_CONFIDENCE_LEFT','LKA_LANE_BOUNDARY_TYPE_LEFT','LKA_LEFT_MODEL_DEGREE','LKA_CURVATURE_LEFT','LKA_CURVATURE_DERIVATIVE_LEFT','LKA_HEADING_ANGLE_LEFT','LKA_YELLOW_LANE_MARKER_LEFT','LKA_VIEW_RANGE_LEFT','LKA_VIEW_RANGE_AVAILABILITY_LEFT','LKA_LANE_OFFSET_RIGHT','LKA_LANE_DET_CONFIDENCE_RIGHT','LKA_LANE_BOUNDARY_TYPE_RIGHT','LKA_RIGHT_MODEL_DEGREE','LKA_CURVATURE_RIGHT','LKA_CURVATURE_DERIVATIVE_RIGHT','LKA_HEADING_ANGLE_RIGHT','LKA_YELLOW_LANE_MARKER_RIGHT','LKA_VIEW_RANGE_RIGHT','LKA_VIEW_RANGE_AVAILABILITY_RIGHT','LKA_LANE_OFFSET_NEXT_LEFT','LKA_LANE_DET_CONFIDENCE_NEXT_LEFT','LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT','LKA_NEXT_LEFT_MODEL_DEGREE','LKA_CURVATURE_NEXT_LEFT','LKA_CURVATURE_DERIVATIVE_NEXT_LEFT','LKA_HEADING_ANGLE_NEXT_LEFT','LKA_YELLOW_LANE_MARKER_NEXT_LEFT','LKA_VIEW_RANGE_NEXT_LEFT','LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT','LKA_LANE_OFFSET_NEXT_RIGHT','LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT','LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT','LKA_NEXT_RIGHT_MODEL_DEGREE','LKA_CURVATURE_NEXT_RIGHT','LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT','LKA_HEADING_ANGLE_NEXT_RIGHT','LKA_YELLOW_LANE_MARKER_NEXT_RIGHT','LKA_VIEW_RANGE_NEXT_RIGHT','LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT','CAN_NO_OF_VIS_OBS_OUTPUT','CAN_VIS_OBS']
  _slot_types = ['std_msgs/Header','autonavigation/LocalPose','autonavigation/GpsPosition','float32','int8','uint8','int8','float32','float64','float32','uint8','float32','uint8','float32','int8','uint8','int8','float32','float64','float32','uint8','float32','uint8','float32','int8','uint8','int8','float32','float64','float32','uint8','float32','uint8','float32','int8','uint8','int8','float32','float64','float32','uint8','float32','uint8','uint8','autonavigation/VisObs[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head,localPose,gpsPos,LKA_LANE_OFFSET_LEFT,LKA_LANE_DET_CONFIDENCE_LEFT,LKA_LANE_BOUNDARY_TYPE_LEFT,LKA_LEFT_MODEL_DEGREE,LKA_CURVATURE_LEFT,LKA_CURVATURE_DERIVATIVE_LEFT,LKA_HEADING_ANGLE_LEFT,LKA_YELLOW_LANE_MARKER_LEFT,LKA_VIEW_RANGE_LEFT,LKA_VIEW_RANGE_AVAILABILITY_LEFT,LKA_LANE_OFFSET_RIGHT,LKA_LANE_DET_CONFIDENCE_RIGHT,LKA_LANE_BOUNDARY_TYPE_RIGHT,LKA_RIGHT_MODEL_DEGREE,LKA_CURVATURE_RIGHT,LKA_CURVATURE_DERIVATIVE_RIGHT,LKA_HEADING_ANGLE_RIGHT,LKA_YELLOW_LANE_MARKER_RIGHT,LKA_VIEW_RANGE_RIGHT,LKA_VIEW_RANGE_AVAILABILITY_RIGHT,LKA_LANE_OFFSET_NEXT_LEFT,LKA_LANE_DET_CONFIDENCE_NEXT_LEFT,LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT,LKA_NEXT_LEFT_MODEL_DEGREE,LKA_CURVATURE_NEXT_LEFT,LKA_CURVATURE_DERIVATIVE_NEXT_LEFT,LKA_HEADING_ANGLE_NEXT_LEFT,LKA_YELLOW_LANE_MARKER_NEXT_LEFT,LKA_VIEW_RANGE_NEXT_LEFT,LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT,LKA_LANE_OFFSET_NEXT_RIGHT,LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT,LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT,LKA_NEXT_RIGHT_MODEL_DEGREE,LKA_CURVATURE_NEXT_RIGHT,LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT,LKA_HEADING_ANGLE_NEXT_RIGHT,LKA_YELLOW_LANE_MARKER_NEXT_RIGHT,LKA_VIEW_RANGE_NEXT_RIGHT,LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT,CAN_NO_OF_VIS_OBS_OUTPUT,CAN_VIS_OBS

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IFVData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.LKA_LANE_OFFSET_LEFT is None:
        self.LKA_LANE_OFFSET_LEFT = 0.
      if self.LKA_LANE_DET_CONFIDENCE_LEFT is None:
        self.LKA_LANE_DET_CONFIDENCE_LEFT = 0
      if self.LKA_LANE_BOUNDARY_TYPE_LEFT is None:
        self.LKA_LANE_BOUNDARY_TYPE_LEFT = 0
      if self.LKA_LEFT_MODEL_DEGREE is None:
        self.LKA_LEFT_MODEL_DEGREE = 0
      if self.LKA_CURVATURE_LEFT is None:
        self.LKA_CURVATURE_LEFT = 0.
      if self.LKA_CURVATURE_DERIVATIVE_LEFT is None:
        self.LKA_CURVATURE_DERIVATIVE_LEFT = 0.
      if self.LKA_HEADING_ANGLE_LEFT is None:
        self.LKA_HEADING_ANGLE_LEFT = 0.
      if self.LKA_YELLOW_LANE_MARKER_LEFT is None:
        self.LKA_YELLOW_LANE_MARKER_LEFT = 0
      if self.LKA_VIEW_RANGE_LEFT is None:
        self.LKA_VIEW_RANGE_LEFT = 0.
      if self.LKA_VIEW_RANGE_AVAILABILITY_LEFT is None:
        self.LKA_VIEW_RANGE_AVAILABILITY_LEFT = 0
      if self.LKA_LANE_OFFSET_RIGHT is None:
        self.LKA_LANE_OFFSET_RIGHT = 0.
      if self.LKA_LANE_DET_CONFIDENCE_RIGHT is None:
        self.LKA_LANE_DET_CONFIDENCE_RIGHT = 0
      if self.LKA_LANE_BOUNDARY_TYPE_RIGHT is None:
        self.LKA_LANE_BOUNDARY_TYPE_RIGHT = 0
      if self.LKA_RIGHT_MODEL_DEGREE is None:
        self.LKA_RIGHT_MODEL_DEGREE = 0
      if self.LKA_CURVATURE_RIGHT is None:
        self.LKA_CURVATURE_RIGHT = 0.
      if self.LKA_CURVATURE_DERIVATIVE_RIGHT is None:
        self.LKA_CURVATURE_DERIVATIVE_RIGHT = 0.
      if self.LKA_HEADING_ANGLE_RIGHT is None:
        self.LKA_HEADING_ANGLE_RIGHT = 0.
      if self.LKA_YELLOW_LANE_MARKER_RIGHT is None:
        self.LKA_YELLOW_LANE_MARKER_RIGHT = 0
      if self.LKA_VIEW_RANGE_RIGHT is None:
        self.LKA_VIEW_RANGE_RIGHT = 0.
      if self.LKA_VIEW_RANGE_AVAILABILITY_RIGHT is None:
        self.LKA_VIEW_RANGE_AVAILABILITY_RIGHT = 0
      if self.LKA_LANE_OFFSET_NEXT_LEFT is None:
        self.LKA_LANE_OFFSET_NEXT_LEFT = 0.
      if self.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT is None:
        self.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT = 0
      if self.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT is None:
        self.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT = 0
      if self.LKA_NEXT_LEFT_MODEL_DEGREE is None:
        self.LKA_NEXT_LEFT_MODEL_DEGREE = 0
      if self.LKA_CURVATURE_NEXT_LEFT is None:
        self.LKA_CURVATURE_NEXT_LEFT = 0.
      if self.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT is None:
        self.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT = 0.
      if self.LKA_HEADING_ANGLE_NEXT_LEFT is None:
        self.LKA_HEADING_ANGLE_NEXT_LEFT = 0.
      if self.LKA_YELLOW_LANE_MARKER_NEXT_LEFT is None:
        self.LKA_YELLOW_LANE_MARKER_NEXT_LEFT = 0
      if self.LKA_VIEW_RANGE_NEXT_LEFT is None:
        self.LKA_VIEW_RANGE_NEXT_LEFT = 0.
      if self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT is None:
        self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT = 0
      if self.LKA_LANE_OFFSET_NEXT_RIGHT is None:
        self.LKA_LANE_OFFSET_NEXT_RIGHT = 0.
      if self.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT is None:
        self.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT = 0
      if self.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT is None:
        self.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT = 0
      if self.LKA_NEXT_RIGHT_MODEL_DEGREE is None:
        self.LKA_NEXT_RIGHT_MODEL_DEGREE = 0
      if self.LKA_CURVATURE_NEXT_RIGHT is None:
        self.LKA_CURVATURE_NEXT_RIGHT = 0.
      if self.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT is None:
        self.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT = 0.
      if self.LKA_HEADING_ANGLE_NEXT_RIGHT is None:
        self.LKA_HEADING_ANGLE_NEXT_RIGHT = 0.
      if self.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT is None:
        self.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT = 0
      if self.LKA_VIEW_RANGE_NEXT_RIGHT is None:
        self.LKA_VIEW_RANGE_NEXT_RIGHT = 0.
      if self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT is None:
        self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT = 0
      if self.CAN_NO_OF_VIS_OBS_OUTPUT is None:
        self.CAN_NO_OF_VIS_OBS_OUTPUT = 0
      if self.CAN_VIS_OBS is None:
        self.CAN_VIS_OBS = []
    else:
      self.head = std_msgs.msg.Header()
      self.localPose = autonavigation.msg.LocalPose()
      self.gpsPos = autonavigation.msg.GpsPosition()
      self.LKA_LANE_OFFSET_LEFT = 0.
      self.LKA_LANE_DET_CONFIDENCE_LEFT = 0
      self.LKA_LANE_BOUNDARY_TYPE_LEFT = 0
      self.LKA_LEFT_MODEL_DEGREE = 0
      self.LKA_CURVATURE_LEFT = 0.
      self.LKA_CURVATURE_DERIVATIVE_LEFT = 0.
      self.LKA_HEADING_ANGLE_LEFT = 0.
      self.LKA_YELLOW_LANE_MARKER_LEFT = 0
      self.LKA_VIEW_RANGE_LEFT = 0.
      self.LKA_VIEW_RANGE_AVAILABILITY_LEFT = 0
      self.LKA_LANE_OFFSET_RIGHT = 0.
      self.LKA_LANE_DET_CONFIDENCE_RIGHT = 0
      self.LKA_LANE_BOUNDARY_TYPE_RIGHT = 0
      self.LKA_RIGHT_MODEL_DEGREE = 0
      self.LKA_CURVATURE_RIGHT = 0.
      self.LKA_CURVATURE_DERIVATIVE_RIGHT = 0.
      self.LKA_HEADING_ANGLE_RIGHT = 0.
      self.LKA_YELLOW_LANE_MARKER_RIGHT = 0
      self.LKA_VIEW_RANGE_RIGHT = 0.
      self.LKA_VIEW_RANGE_AVAILABILITY_RIGHT = 0
      self.LKA_LANE_OFFSET_NEXT_LEFT = 0.
      self.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT = 0
      self.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT = 0
      self.LKA_NEXT_LEFT_MODEL_DEGREE = 0
      self.LKA_CURVATURE_NEXT_LEFT = 0.
      self.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT = 0.
      self.LKA_HEADING_ANGLE_NEXT_LEFT = 0.
      self.LKA_YELLOW_LANE_MARKER_NEXT_LEFT = 0
      self.LKA_VIEW_RANGE_NEXT_LEFT = 0.
      self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT = 0
      self.LKA_LANE_OFFSET_NEXT_RIGHT = 0.
      self.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT = 0
      self.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT = 0
      self.LKA_NEXT_RIGHT_MODEL_DEGREE = 0
      self.LKA_CURVATURE_NEXT_RIGHT = 0.
      self.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT = 0.
      self.LKA_HEADING_ANGLE_NEXT_RIGHT = 0.
      self.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT = 0
      self.LKA_VIEW_RANGE_NEXT_RIGHT = 0.
      self.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT = 0
      self.CAN_NO_OF_VIS_OBS_OUTPUT = 0
      self.CAN_VIS_OBS = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs))
      _x = self.head.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B.pack(_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.LKA_LANE_OFFSET_LEFT, _x.LKA_LANE_DET_CONFIDENCE_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_LEFT, _x.LKA_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_LEFT, _x.LKA_CURVATURE_DERIVATIVE_LEFT, _x.LKA_HEADING_ANGLE_LEFT, _x.LKA_YELLOW_LANE_MARKER_LEFT, _x.LKA_VIEW_RANGE_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_LEFT, _x.LKA_LANE_OFFSET_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_RIGHT, _x.LKA_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_RIGHT, _x.LKA_HEADING_ANGLE_RIGHT, _x.LKA_YELLOW_LANE_MARKER_RIGHT, _x.LKA_VIEW_RANGE_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_RIGHT, _x.LKA_LANE_OFFSET_NEXT_LEFT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT, _x.LKA_NEXT_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_LEFT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT, _x.LKA_HEADING_ANGLE_NEXT_LEFT, _x.LKA_YELLOW_LANE_MARKER_NEXT_LEFT, _x.LKA_VIEW_RANGE_NEXT_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT, _x.LKA_LANE_OFFSET_NEXT_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT, _x.LKA_NEXT_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT, _x.LKA_HEADING_ANGLE_NEXT_RIGHT, _x.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT, _x.LKA_VIEW_RANGE_NEXT_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT, _x.CAN_NO_OF_VIS_OBS_OUTPUT))
      length = len(self.CAN_VIS_OBS)
      buff.write(_struct_I.pack(length))
      for val1 in self.CAN_VIS_OBS:
        _x = val1
        buff.write(_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.pack(_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.CAN_VIS_OBS is None:
        self.CAN_VIS_OBS = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.head.frame_id = str[start:end].decode('utf-8')
      else:
        self.head.frame_id = str[start:end]
      _x = self
      start = end
      end += 321
      (_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.LKA_LANE_OFFSET_LEFT, _x.LKA_LANE_DET_CONFIDENCE_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_LEFT, _x.LKA_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_LEFT, _x.LKA_CURVATURE_DERIVATIVE_LEFT, _x.LKA_HEADING_ANGLE_LEFT, _x.LKA_YELLOW_LANE_MARKER_LEFT, _x.LKA_VIEW_RANGE_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_LEFT, _x.LKA_LANE_OFFSET_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_RIGHT, _x.LKA_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_RIGHT, _x.LKA_HEADING_ANGLE_RIGHT, _x.LKA_YELLOW_LANE_MARKER_RIGHT, _x.LKA_VIEW_RANGE_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_RIGHT, _x.LKA_LANE_OFFSET_NEXT_LEFT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT, _x.LKA_NEXT_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_LEFT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT, _x.LKA_HEADING_ANGLE_NEXT_LEFT, _x.LKA_YELLOW_LANE_MARKER_NEXT_LEFT, _x.LKA_VIEW_RANGE_NEXT_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT, _x.LKA_LANE_OFFSET_NEXT_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT, _x.LKA_NEXT_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT, _x.LKA_HEADING_ANGLE_NEXT_RIGHT, _x.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT, _x.LKA_VIEW_RANGE_NEXT_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT, _x.CAN_NO_OF_VIS_OBS_OUTPUT,) = _struct_d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CAN_VIS_OBS = []
      for i in range(0, length):
        val1 = autonavigation.msg.VisObs()
        _x = val1
        start = end
        end += 109
        (_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG,) = _struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.unpack(str[start:end])
        self.CAN_VIS_OBS.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs))
      _x = self.head.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B.pack(_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.LKA_LANE_OFFSET_LEFT, _x.LKA_LANE_DET_CONFIDENCE_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_LEFT, _x.LKA_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_LEFT, _x.LKA_CURVATURE_DERIVATIVE_LEFT, _x.LKA_HEADING_ANGLE_LEFT, _x.LKA_YELLOW_LANE_MARKER_LEFT, _x.LKA_VIEW_RANGE_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_LEFT, _x.LKA_LANE_OFFSET_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_RIGHT, _x.LKA_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_RIGHT, _x.LKA_HEADING_ANGLE_RIGHT, _x.LKA_YELLOW_LANE_MARKER_RIGHT, _x.LKA_VIEW_RANGE_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_RIGHT, _x.LKA_LANE_OFFSET_NEXT_LEFT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT, _x.LKA_NEXT_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_LEFT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT, _x.LKA_HEADING_ANGLE_NEXT_LEFT, _x.LKA_YELLOW_LANE_MARKER_NEXT_LEFT, _x.LKA_VIEW_RANGE_NEXT_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT, _x.LKA_LANE_OFFSET_NEXT_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT, _x.LKA_NEXT_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT, _x.LKA_HEADING_ANGLE_NEXT_RIGHT, _x.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT, _x.LKA_VIEW_RANGE_NEXT_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT, _x.CAN_NO_OF_VIS_OBS_OUTPUT))
      length = len(self.CAN_VIS_OBS)
      buff.write(_struct_I.pack(length))
      for val1 in self.CAN_VIS_OBS:
        _x = val1
        buff.write(_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.pack(_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.head is None:
        self.head = std_msgs.msg.Header()
      if self.localPose is None:
        self.localPose = autonavigation.msg.LocalPose()
      if self.gpsPos is None:
        self.gpsPos = autonavigation.msg.GpsPosition()
      if self.CAN_VIS_OBS is None:
        self.CAN_VIS_OBS = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head.seq, _x.head.stamp.secs, _x.head.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.head.frame_id = str[start:end].decode('utf-8')
      else:
        self.head.frame_id = str[start:end]
      _x = self
      start = end
      end += 321
      (_x.localPose.time, _x.localPose.dr_x, _x.localPose.dr_y, _x.localPose.dr_z, _x.localPose.dr_heading, _x.localPose.dr_roll, _x.localPose.dr_pitch, _x.localPose.lf_speed, _x.localPose.rf_speed, _x.localPose.lr_speed, _x.localPose.rr_speed, _x.localPose.rot_x, _x.localPose.rot_y, _x.localPose.rot_z, _x.localPose.acc_x, _x.localPose.acc_y, _x.localPose.acc_z, _x.localPose.batteryState, _x.localPose.batteryEnergy, _x.localPose.steer, _x.localPose.brake, _x.localPose.fuel, _x.localPose.trans, _x.localPose.VehicleState, _x.localPose.mode, _x.localPose.drStatus, _x.localPose.errorStatus, _x.localPose.emergency_flag, _x.localPose.hardswitch_on, _x.gpsPos.gps_flag, _x.gpsPos.gps_week, _x.gpsPos.gps_millisecond, _x.gpsPos.longitude, _x.gpsPos.laltitude, _x.gpsPos.gaussX, _x.gpsPos.gaussY, _x.gpsPos.height, _x.gpsPos.pitch, _x.gpsPos.roll, _x.gpsPos.azimuth, _x.gpsPos.northVelocity, _x.gpsPos.eastVelocity, _x.gpsPos.upVelocity, _x.gpsPos.positionStatus, _x.gpsPos.rot_x, _x.gpsPos.rot_y, _x.gpsPos.rot_z, _x.gpsPos.acc_x, _x.gpsPos.acc_y, _x.gpsPos.acc_z, _x.LKA_LANE_OFFSET_LEFT, _x.LKA_LANE_DET_CONFIDENCE_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_LEFT, _x.LKA_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_LEFT, _x.LKA_CURVATURE_DERIVATIVE_LEFT, _x.LKA_HEADING_ANGLE_LEFT, _x.LKA_YELLOW_LANE_MARKER_LEFT, _x.LKA_VIEW_RANGE_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_LEFT, _x.LKA_LANE_OFFSET_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_RIGHT, _x.LKA_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_RIGHT, _x.LKA_HEADING_ANGLE_RIGHT, _x.LKA_YELLOW_LANE_MARKER_RIGHT, _x.LKA_VIEW_RANGE_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_RIGHT, _x.LKA_LANE_OFFSET_NEXT_LEFT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_LEFT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_LEFT, _x.LKA_NEXT_LEFT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_LEFT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_LEFT, _x.LKA_HEADING_ANGLE_NEXT_LEFT, _x.LKA_YELLOW_LANE_MARKER_NEXT_LEFT, _x.LKA_VIEW_RANGE_NEXT_LEFT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_LEFT, _x.LKA_LANE_OFFSET_NEXT_RIGHT, _x.LKA_LANE_DET_CONFIDENCE_NEXT_RIGHT, _x.LKA_LANE_BOUNDARY_TYPE_NEXT_RIGHT, _x.LKA_NEXT_RIGHT_MODEL_DEGREE, _x.LKA_CURVATURE_NEXT_RIGHT, _x.LKA_CURVATURE_DERIVATIVE_NEXT_RIGHT, _x.LKA_HEADING_ANGLE_NEXT_RIGHT, _x.LKA_YELLOW_LANE_MARKER_NEXT_RIGHT, _x.LKA_VIEW_RANGE_NEXT_RIGHT, _x.LKA_VIEW_RANGE_AVAILABILITY_NEXT_RIGHT, _x.CAN_NO_OF_VIS_OBS_OUTPUT,) = _struct_d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CAN_VIS_OBS = []
      for i in range(0, length):
        val1 = autonavigation.msg.VisObs()
        _x = val1
        start = end
        end += 109
        (_x.CAN_VIS_OBS_COUNT, _x.CAN_VIS_OBS_ANGLE_RATE, _x.CAN_VIS_OBS_ANGLE_CENTROID, _x.CAN_VIS_OBS_RANGE_RATE, _x.CAN_VIS_OBS_RANGE, _x.CAN_VIS_OBS_LATERAL_RATE, _x.CAN_VIS_OBS_MANEUVER_STATE, _x.CAN_VIS_OBS_DETECTION_STATUS, _x.CAN_VIS_OBS_MOTION_TYPE, _x.CAN_VIS_OBS_CROSSING_STATUS, _x.CAN_VIS_OBS_ID, _x.CAN_VIS_OBS_LOW_CONFIDENCE, _x.CAN_VIS_OBS_LANE_NUMBER, _x.CAN_VIS_OBS_TURN_INDICATOR, _x.CAN_VIS_OBS_BRAKE_LIGHT_INDICATOR, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC_CONF, _x.CAN_VIS_OBS_OBJECT_IN_PATH, _x.CAN_VIS_OBS_HIGH_DECELERATION, _x.CAN_VIS_OBS_FCW_STATUS, _x.CAN_VIS_OBS_TTC_WITHOUT_ACC, _x.CAN_VIS_OBS_ME_AWS, _x.CAN_VIS_OBS_CIPO, _x.CAN_VIS_OBS_TTC_WITH_ACC, _x.CAN_VIS_OBS_TTC_WITH_ACC_CONF, _x.CAN_VIS_OBS_CLASSIFICATION, _x.CAN_RADAR_TARGET_MATCH_COASTED, _x.CAN_VIS_OBS_VISION_RANGE, _x.CAN_RADAR_TARGET_MATCH_INDEX_1, _x.CAN_RADAR_TARGET_MATCH_INDEX_2, _x.CAN_RADAR_TARGET_MATCH_INDEX_3, _x.CAN_RADAR_TARGET_MATCH_INDEX_4, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_1, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_2, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_3, _x.CAN_RADAR_TGT_MATCH_CONFIDENCE_4, _x.CAN_VIS_OBS_WIDTH, _x.CAN_VIS_OBS_VISION_ANGLE_RATE, _x.CAN_VIS_OBS_VISION_ANGLE_CENTROID, _x.CAN_VIS_OBS_VISION_RANGE_RATE, _x.CAN_VIS_OBS_VISION_LATERAL_RATE, _x.CAN_VIS_OBS_VISION_WIDTH, _x.CAN_VIS_OBS_TTC_WO_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_TTC_W_ACC_FUNC_ACT_EST, _x.CAN_VIS_OBS_RANGE_FUNC_ACT_EST, _x.CAN_VIS_OBS_FCW_CALC_STATUS, _x.CAN_VIS_OBS_PREDICTED_TTC, _x.CAN_VIS_OBS_PREDICTED_LAT_POS, _x.CAN_OBJECT_HIGH_DECEL_FLAG, _x.CAN_VIS_HALF_BODY_DETECTION_FLAG,) = _struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B.unpack(str[start:end])
        self.CAN_VIS_OBS.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B = struct.Struct("<d21i7bBI6d13ifbBbfdfBfBfbBbfdfBfBfbBbfdfBfBfbBbfdfBf2B")
_struct_B5fb5Bb6Bf2B2f2Bf8B9fB2f2B = struct.Struct("<B5fb5Bb6Bf2B2f2Bf8B9fB2f2B")

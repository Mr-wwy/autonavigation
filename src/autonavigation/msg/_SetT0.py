# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/SetT0.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetT0(genpy.Message):
  _md5sum = "9ae7495e5be2c0bedf8ce7469cc06a96"
  _type = "autonavigation/SetT0"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#

uint32     unique_key          #自主行驶载车唯一标识，用于区分载车的id
uint32     gps_week            #GPS周
uint64     gps_millisecond     #取GPS周的毫秒级时间
uint64     cmd_millisecond     #T0 时间
uint8      cmd_reserve1        #预留
uint8      cmd_reserve2        #预留
uint8      cmd_reserve3 
"""
  __slots__ = ['unique_key','gps_week','gps_millisecond','cmd_millisecond','cmd_reserve1','cmd_reserve2','cmd_reserve3']
  _slot_types = ['uint32','uint32','uint64','uint64','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       unique_key,gps_week,gps_millisecond,cmd_millisecond,cmd_reserve1,cmd_reserve2,cmd_reserve3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetT0, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.unique_key is None:
        self.unique_key = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecond is None:
        self.gps_millisecond = 0
      if self.cmd_millisecond is None:
        self.cmd_millisecond = 0
      if self.cmd_reserve1 is None:
        self.cmd_reserve1 = 0
      if self.cmd_reserve2 is None:
        self.cmd_reserve2 = 0
      if self.cmd_reserve3 is None:
        self.cmd_reserve3 = 0
    else:
      self.unique_key = 0
      self.gps_week = 0
      self.gps_millisecond = 0
      self.cmd_millisecond = 0
      self.cmd_reserve1 = 0
      self.cmd_reserve2 = 0
      self.cmd_reserve3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2Q3B.pack(_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.cmd_millisecond, _x.cmd_reserve1, _x.cmd_reserve2, _x.cmd_reserve3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.cmd_millisecond, _x.cmd_reserve1, _x.cmd_reserve2, _x.cmd_reserve3,) = _struct_2I2Q3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2Q3B.pack(_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.cmd_millisecond, _x.cmd_reserve1, _x.cmd_reserve2, _x.cmd_reserve3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.cmd_millisecond, _x.cmd_reserve1, _x.cmd_reserve2, _x.cmd_reserve3,) = _struct_2I2Q3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2Q3B = struct.Struct("<2I2Q3B")

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/Sign.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sign(genpy.Message):
  _md5sum = "3513bee1140afeb245ce4576130c04b8"
  _type = "autonavigation/Sign"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 pos_flag       #  交通标志位置信息 
int32 x              #  x坐标，厘米为单位
int32 y              #  y坐标，厘米为单位
uint8 sign_type      #  交通标志类型信息


#
# pos_flag
#  0: 没有位置信息
#  1: 位置信息有效

# sign_type:
#  0：无路标        
#  1：禁止左转
#  2：禁止右转
#  3：禁止直行
#  4：禁止向左和向右
#  5：禁止向左和直行
#  6：禁止向右和直行
#  7：禁止驶入
#  8：停车
#  9： 前方学校 （减速）       
#  10：注意行人 （减速）       
#  11：路面不平 （减速）      
#  12：路面施工 （减速）
#  13：直行
#  14：向左转
#  15：向右转
#  16：直行和左转
#  17：直行和右转
#  18：向左和向右
#  19：靠右行驶        
#  20：靠左行驶        
#  21：鸣喇叭 ------- 无    
#  22：环岛行驶 ------- 无     
#  23：人行横道        
#  24：允许掉头        
#  25：停车位          
#  26：禁止掉头  
#  27：限速10公里 （减速）
#  28：解除限速10公里 ------- 无
#  29：限速15公里
#  30：限速20公里
#  31：限速25公里
#  32: 三角修车标志
"""
  __slots__ = ['pos_flag','x','y','sign_type']
  _slot_types = ['uint8','int32','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos_flag,x,y,sign_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sign, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos_flag is None:
        self.pos_flag = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.sign_type is None:
        self.sign_type = 0
    else:
      self.pos_flag = 0
      self.x = 0
      self.y = 0
      self.sign_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2iB.pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _struct_B2iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2iB.pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _struct_B2iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2iB = struct.Struct("<B2iB")

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/VehicleServoStates.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleServoStates(genpy.Message):
  _md5sum = "7014131f2cf55edb95cc01009825b3c2"
  _type = "autonavigation/VehicleServoStates"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 control_mode
float64 steer_angle
float64 fuel_value
float64 brake_value
int32 trans_position
int32 brake_light
float64 left_wheel_speed
float64 right_wheel_speed


"""
  __slots__ = ['control_mode','steer_angle','fuel_value','brake_value','trans_position','brake_light','left_wheel_speed','right_wheel_speed']
  _slot_types = ['int32','float64','float64','float64','int32','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_mode,steer_angle,fuel_value,brake_value,trans_position,brake_light,left_wheel_speed,right_wheel_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleServoStates, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.control_mode is None:
        self.control_mode = 0
      if self.steer_angle is None:
        self.steer_angle = 0.
      if self.fuel_value is None:
        self.fuel_value = 0.
      if self.brake_value is None:
        self.brake_value = 0.
      if self.trans_position is None:
        self.trans_position = 0
      if self.brake_light is None:
        self.brake_light = 0
      if self.left_wheel_speed is None:
        self.left_wheel_speed = 0.
      if self.right_wheel_speed is None:
        self.right_wheel_speed = 0.
    else:
      self.control_mode = 0
      self.steer_angle = 0.
      self.fuel_value = 0.
      self.brake_value = 0.
      self.trans_position = 0
      self.brake_light = 0
      self.left_wheel_speed = 0.
      self.right_wheel_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i3d2i2d.pack(_x.control_mode, _x.steer_angle, _x.fuel_value, _x.brake_value, _x.trans_position, _x.brake_light, _x.left_wheel_speed, _x.right_wheel_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.control_mode, _x.steer_angle, _x.fuel_value, _x.brake_value, _x.trans_position, _x.brake_light, _x.left_wheel_speed, _x.right_wheel_speed,) = _struct_i3d2i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i3d2i2d.pack(_x.control_mode, _x.steer_angle, _x.fuel_value, _x.brake_value, _x.trans_position, _x.brake_light, _x.left_wheel_speed, _x.right_wheel_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.control_mode, _x.steer_angle, _x.fuel_value, _x.brake_value, _x.trans_position, _x.brake_light, _x.left_wheel_speed, _x.right_wheel_speed,) = _struct_i3d2i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i3d2i2d = struct.Struct("<i3d2i2d")

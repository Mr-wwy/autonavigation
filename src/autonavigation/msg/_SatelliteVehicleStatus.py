# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/SatelliteVehicleStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SatelliteVehicleStatus(genpy.Message):
  _md5sum = "c54d083367b6c5736ad6547a58a68963"
  _type = "autonavigation/SatelliteVehicleStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#对应结构体Autonavigation_Satellite_Vehicle_Status

uint32     unique_key           #自主行驶载车唯一标识
uint32     gps_week             #GPS周
uint64     gps_millisecond      #GPS毫秒,以周的零点开始的毫秒数
float64    longitude            #经度，单位为度
float64    latitude             #纬度，单位为度
int64      gaussX               #高斯坐标X
int64      gaussY               #高斯坐标Y
int32      azimuth              #航向角，单位0.01度，向东为0，逆时针0～36000
uint32     travel_distance      #T0时刻开始后，前进的里程，单位米
int32      remain_time          #距离T0时刻还有多少时间，单位毫秒
int16      steer                #单位0.01度，前轮转角，左转为正
uint8      fuel                 #剩余油量，百分比
uint8      shift                #档位
uint8      voltage              #电压
uint8      throttle             #当前使用油门量，百分比
uint8      brake                #当前使用刹车量，百分比
uint8      engine_speed         #单位100转/分钟，发动机转速
uint8      vehicle_speed        #单位km/h，汽车时速
uint8      control_status       #控制状态
uint8      handbrake            #手刹状态
uint8      engine_status        #发动机点火状态
uint8      controllable1        #Bit8：方向盘 Bit7：油门 Bit6：刹车 Bit5：档位 Bit4：手刹 Bit3：点火 Bit2：熄火 Bit1：预留 相应位为1表示受方舱控制 

uint8      reserve1             #预留
uint8      reserve2 
uint8      reserve3 


"""
  __slots__ = ['unique_key','gps_week','gps_millisecond','longitude','latitude','gaussX','gaussY','azimuth','travel_distance','remain_time','steer','fuel','shift','voltage','throttle','brake','engine_speed','vehicle_speed','control_status','handbrake','engine_status','controllable1','reserve1','reserve2','reserve3']
  _slot_types = ['uint32','uint32','uint64','float64','float64','int64','int64','int32','uint32','int32','int16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       unique_key,gps_week,gps_millisecond,longitude,latitude,gaussX,gaussY,azimuth,travel_distance,remain_time,steer,fuel,shift,voltage,throttle,brake,engine_speed,vehicle_speed,control_status,handbrake,engine_status,controllable1,reserve1,reserve2,reserve3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SatelliteVehicleStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.unique_key is None:
        self.unique_key = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecond is None:
        self.gps_millisecond = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.gaussX is None:
        self.gaussX = 0
      if self.gaussY is None:
        self.gaussY = 0
      if self.azimuth is None:
        self.azimuth = 0
      if self.travel_distance is None:
        self.travel_distance = 0
      if self.remain_time is None:
        self.remain_time = 0
      if self.steer is None:
        self.steer = 0
      if self.fuel is None:
        self.fuel = 0
      if self.shift is None:
        self.shift = 0
      if self.voltage is None:
        self.voltage = 0
      if self.throttle is None:
        self.throttle = 0
      if self.brake is None:
        self.brake = 0
      if self.engine_speed is None:
        self.engine_speed = 0
      if self.vehicle_speed is None:
        self.vehicle_speed = 0
      if self.control_status is None:
        self.control_status = 0
      if self.handbrake is None:
        self.handbrake = 0
      if self.engine_status is None:
        self.engine_status = 0
      if self.controllable1 is None:
        self.controllable1 = 0
      if self.reserve1 is None:
        self.reserve1 = 0
      if self.reserve2 is None:
        self.reserve2 = 0
      if self.reserve3 is None:
        self.reserve3 = 0
    else:
      self.unique_key = 0
      self.gps_week = 0
      self.gps_millisecond = 0
      self.longitude = 0.
      self.latitude = 0.
      self.gaussX = 0
      self.gaussY = 0
      self.azimuth = 0
      self.travel_distance = 0
      self.remain_time = 0
      self.steer = 0
      self.fuel = 0
      self.shift = 0
      self.voltage = 0
      self.throttle = 0
      self.brake = 0
      self.engine_speed = 0
      self.vehicle_speed = 0
      self.control_status = 0
      self.handbrake = 0
      self.engine_status = 0
      self.controllable1 = 0
      self.reserve1 = 0
      self.reserve2 = 0
      self.reserve3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IQ2d2qiIih14B.pack(_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.latitude, _x.gaussX, _x.gaussY, _x.azimuth, _x.travel_distance, _x.remain_time, _x.steer, _x.fuel, _x.shift, _x.voltage, _x.throttle, _x.brake, _x.engine_speed, _x.vehicle_speed, _x.control_status, _x.handbrake, _x.engine_status, _x.controllable1, _x.reserve1, _x.reserve2, _x.reserve3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.latitude, _x.gaussX, _x.gaussY, _x.azimuth, _x.travel_distance, _x.remain_time, _x.steer, _x.fuel, _x.shift, _x.voltage, _x.throttle, _x.brake, _x.engine_speed, _x.vehicle_speed, _x.control_status, _x.handbrake, _x.engine_status, _x.controllable1, _x.reserve1, _x.reserve2, _x.reserve3,) = _struct_2IQ2d2qiIih14B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IQ2d2qiIih14B.pack(_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.latitude, _x.gaussX, _x.gaussY, _x.azimuth, _x.travel_distance, _x.remain_time, _x.steer, _x.fuel, _x.shift, _x.voltage, _x.throttle, _x.brake, _x.engine_speed, _x.vehicle_speed, _x.control_status, _x.handbrake, _x.engine_status, _x.controllable1, _x.reserve1, _x.reserve2, _x.reserve3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.unique_key, _x.gps_week, _x.gps_millisecond, _x.longitude, _x.latitude, _x.gaussX, _x.gaussY, _x.azimuth, _x.travel_distance, _x.remain_time, _x.steer, _x.fuel, _x.shift, _x.voltage, _x.throttle, _x.brake, _x.engine_speed, _x.vehicle_speed, _x.control_status, _x.handbrake, _x.engine_status, _x.controllable1, _x.reserve1, _x.reserve2, _x.reserve3,) = _struct_2IQ2d2qiIih14B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IQ2d2qiIih14B = struct.Struct("<2IQ2d2qiIih14B")

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/PathBoundary.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PathBoundary(genpy.Message):
  _md5sum = "de99878f80fecf87fd1d9e75205a7390"
  _type = "autonavigation/PathBoundary"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[50] BoundaryPointsx
int32[50] BoundaryPointsy
int32  Number
"""
  __slots__ = ['BoundaryPointsx','BoundaryPointsy','Number']
  _slot_types = ['int32[50]','int32[50]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       BoundaryPointsx,BoundaryPointsy,Number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathBoundary, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.BoundaryPointsx is None:
        self.BoundaryPointsx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.BoundaryPointsy is None:
        self.BoundaryPointsy = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.Number is None:
        self.Number = 0
    else:
      self.BoundaryPointsx = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.BoundaryPointsy = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.Number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_50i.pack(*self.BoundaryPointsx))
      buff.write(_struct_50i.pack(*self.BoundaryPointsy))
      buff.write(_struct_i.pack(self.Number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 200
      self.BoundaryPointsx = _struct_50i.unpack(str[start:end])
      start = end
      end += 200
      self.BoundaryPointsy = _struct_50i.unpack(str[start:end])
      start = end
      end += 4
      (self.Number,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.BoundaryPointsx.tostring())
      buff.write(self.BoundaryPointsy.tostring())
      buff.write(_struct_i.pack(self.Number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 200
      self.BoundaryPointsx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.BoundaryPointsy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 4
      (self.Number,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_50i = struct.Struct("<50i")

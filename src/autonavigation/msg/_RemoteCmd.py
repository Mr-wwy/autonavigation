# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/RemoteCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RemoteCmd(genpy.Message):
  _md5sum = "653101b3557f16a0d9f858f840aed2dc"
  _type = "autonavigation/RemoteCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 RemoteMode
int32 RemoteSteerEnable
int32 RemoteBrakeFuelEnable
float32 RemoteSteerAngle
float32 RemoteSpeed
int32 RemoteTransPos
"""
  __slots__ = ['RemoteMode','RemoteSteerEnable','RemoteBrakeFuelEnable','RemoteSteerAngle','RemoteSpeed','RemoteTransPos']
  _slot_types = ['int32','int32','int32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RemoteMode,RemoteSteerEnable,RemoteBrakeFuelEnable,RemoteSteerAngle,RemoteSpeed,RemoteTransPos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RemoteCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.RemoteMode is None:
        self.RemoteMode = 0
      if self.RemoteSteerEnable is None:
        self.RemoteSteerEnable = 0
      if self.RemoteBrakeFuelEnable is None:
        self.RemoteBrakeFuelEnable = 0
      if self.RemoteSteerAngle is None:
        self.RemoteSteerAngle = 0.
      if self.RemoteSpeed is None:
        self.RemoteSpeed = 0.
      if self.RemoteTransPos is None:
        self.RemoteTransPos = 0
    else:
      self.RemoteMode = 0
      self.RemoteSteerEnable = 0
      self.RemoteBrakeFuelEnable = 0
      self.RemoteSteerAngle = 0.
      self.RemoteSpeed = 0.
      self.RemoteTransPos = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i2fi.pack(_x.RemoteMode, _x.RemoteSteerEnable, _x.RemoteBrakeFuelEnable, _x.RemoteSteerAngle, _x.RemoteSpeed, _x.RemoteTransPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.RemoteMode, _x.RemoteSteerEnable, _x.RemoteBrakeFuelEnable, _x.RemoteSteerAngle, _x.RemoteSpeed, _x.RemoteTransPos,) = _struct_3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i2fi.pack(_x.RemoteMode, _x.RemoteSteerEnable, _x.RemoteBrakeFuelEnable, _x.RemoteSteerAngle, _x.RemoteSpeed, _x.RemoteTransPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.RemoteMode, _x.RemoteSteerEnable, _x.RemoteBrakeFuelEnable, _x.RemoteSteerAngle, _x.RemoteSpeed, _x.RemoteTransPos,) = _struct_3i2fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i2fi = struct.Struct("<3i2fi")

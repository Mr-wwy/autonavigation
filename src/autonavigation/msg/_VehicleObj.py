# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/VehicleObj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class VehicleObj(genpy.Message):
  _md5sum = "e49aa5a1ea7ecd453e5d85d1f462a10f"
  _type = "autonavigation/VehicleObj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#ID num
int32 ID       
# position, cm
int32 centerX
int32 centerY
# cm/s
int32 speed        
# 0.01degree   
int32 speedDirection  
int32 height         
# car, truck, bicycle, big obj, small obj, unknown obj 
int32 vehclass     

geometry_msgs/Polygon vehPolygon      

int32   vertexNumber
int32[] vertexX
int32[] vertexY

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['ID','centerX','centerY','speed','speedDirection','height','vehclass','vehPolygon','vertexNumber','vertexX','vertexY']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','geometry_msgs/Polygon','int32','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,centerX,centerY,speed,speedDirection,height,vehclass,vehPolygon,vertexNumber,vertexX,vertexY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleObj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.centerX is None:
        self.centerX = 0
      if self.centerY is None:
        self.centerY = 0
      if self.speed is None:
        self.speed = 0
      if self.speedDirection is None:
        self.speedDirection = 0
      if self.height is None:
        self.height = 0
      if self.vehclass is None:
        self.vehclass = 0
      if self.vehPolygon is None:
        self.vehPolygon = geometry_msgs.msg.Polygon()
      if self.vertexNumber is None:
        self.vertexNumber = 0
      if self.vertexX is None:
        self.vertexX = []
      if self.vertexY is None:
        self.vertexY = []
    else:
      self.ID = 0
      self.centerX = 0
      self.centerY = 0
      self.speed = 0
      self.speedDirection = 0
      self.height = 0
      self.vehclass = 0
      self.vehPolygon = geometry_msgs.msg.Polygon()
      self.vertexNumber = 0
      self.vertexX = []
      self.vertexY = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass))
      length = len(self.vehPolygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehPolygon.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_i.pack(self.vertexNumber))
      length = len(self.vertexX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.vertexX))
      length = len(self.vertexY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.vertexY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.vehPolygon is None:
        self.vehPolygon = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass,) = _struct_7i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehPolygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.vehPolygon.points.append(val1)
      start = end
      end += 4
      (self.vertexNumber,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vertexX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vertexY = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7i.pack(_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass))
      length = len(self.vehPolygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehPolygon.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_i.pack(self.vertexNumber))
      length = len(self.vertexX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vertexX.tostring())
      length = len(self.vertexY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vertexY.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.vehPolygon is None:
        self.vehPolygon = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.ID, _x.centerX, _x.centerY, _x.speed, _x.speedDirection, _x.height, _x.vehclass,) = _struct_7i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehPolygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.vehPolygon.points.append(val1)
      start = end
      end += 4
      (self.vertexNumber,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vertexX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.vertexY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3f = struct.Struct("<3f")
_struct_7i = struct.Struct("<7i")

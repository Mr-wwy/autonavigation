# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonavigation/RecvWayPoints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RecvWayPoints(genpy.Message):
  _md5sum = "cfc84bf91694d7cb048a755fe64d02fa"
  _type = "autonavigation/RecvWayPoints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#对应结构体Autonavigation_RecvWayPoints

int32       waypointnumA         #路点个数
int32[]     Apx                  #路点X坐标，单位cm
int32[]     Apy                  #路点Y坐标，单位cm
int32       waypointnumB         #路点个数
int32[]     Bpx                  #路点X坐标，单位cm
int32[]     Bpy                  #路点Y坐标，单位cm
"""
  __slots__ = ['waypointnumA','Apx','Apy','waypointnumB','Bpx','Bpy']
  _slot_types = ['int32','int32[]','int32[]','int32','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypointnumA,Apx,Apy,waypointnumB,Bpx,Bpy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecvWayPoints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypointnumA is None:
        self.waypointnumA = 0
      if self.Apx is None:
        self.Apx = []
      if self.Apy is None:
        self.Apy = []
      if self.waypointnumB is None:
        self.waypointnumB = 0
      if self.Bpx is None:
        self.Bpx = []
      if self.Bpy is None:
        self.Bpy = []
    else:
      self.waypointnumA = 0
      self.Apx = []
      self.Apy = []
      self.waypointnumB = 0
      self.Bpx = []
      self.Bpy = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.waypointnumA))
      length = len(self.Apx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Apx))
      length = len(self.Apy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Apy))
      buff.write(_struct_i.pack(self.waypointnumB))
      length = len(self.Bpx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Bpx))
      length = len(self.Bpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.Bpy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.waypointnumA,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Apx = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Apy = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.waypointnumB,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Bpx = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Bpy = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.waypointnumA))
      length = len(self.Apx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Apx.tostring())
      length = len(self.Apy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Apy.tostring())
      buff.write(_struct_i.pack(self.waypointnumB))
      length = len(self.Bpx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Bpx.tostring())
      length = len(self.Bpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Bpy.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.waypointnumA,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Apx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Apy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.waypointnumB,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Bpx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.Bpy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
